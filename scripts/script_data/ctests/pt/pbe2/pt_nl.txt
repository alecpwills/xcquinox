no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/condabin/conda
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/conda
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/conda-env
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/activate
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/bin/deactivate
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/etc/profile.d/conda.sh
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/etc/fish/conf.d/conda.fish
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/shell/condabin/Conda.psm1
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/shell/condabin/conda-hook.ps1
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/lib/python3.9/site-packages/xontrib/conda.xsh
no change     /gpfs/projects/FernandezGroup/Alec/miniconda3/etc/profile.d/conda.csh
no change     /gpfs/home/awills/.bashrc
No action taken.
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/pyscf/dft/libxc.py:772: UserWarning: Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, the same to the B3LYP functional in Gaussian and ORCA (issue 1480). To restore the VWN5 definition, you can put the setting "B3LYP_WITH_VWN5 = True" in pyscf_conf.py
  warnings.warn('Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, '
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c1993c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c1993c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
SINGLE NETFILE MATCH FOUND. DESERIALIZING...
WARNING: External module "mldftdat" required for non-local descriptor use.
<pyscf.gto.mole.Mole object at 0x7ffe3c1993c0> [['P', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c199390> [['N', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c198bb0> [['H', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c1997b0> [['Li', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c199a20> [['O', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c199660> [['Cl', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c199e10> [['Al', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c19a140> [['S', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffe3c199cf0> [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19a8c0> [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19a7d0> [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19a0e0> [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]] 3
<pyscf.gto.mole.Mole object at 0x7ffe3c19ad10> [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]] 3
<pyscf.gto.mole.Mole object at 0x7ffe3c19abc0> [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19aa70> [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19aec0> [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19b0d0> [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]] 4
<pyscf.gto.mole.Mole object at 0x7ffe3c19ae60> [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19b370> [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19b3a0> [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19b010> [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19b640> [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]] 4
<pyscf.gto.mole.Mole object at 0x7ffe3c19b550> [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]] 4
<pyscf.gto.mole.Mole object at 0x7ffe3c19b4c0> [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]] 2
<pyscf.gto.mole.Mole object at 0x7ffe3c19ba00> [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]] 5
<pyscf.gto.mole.Mole object at 0x7ffe3c19bcd0> [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]] 3
<pyscf.gto.mole.Mole object at 0x7ffe3c19b940> [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]] 5
mol:  [['P', array([0., 0., 0.])]]
converged SCF energy = -341.104145992717  <S^2> = 3.7502984  2S+1 = 4.0001492
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c199390> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c199390> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-8.21170344e-10 -5.08921979e-10 -1.11761057e-07 ... -1.39991317e-01
 -1.39991317e-01 -1.39991317e-01] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.67994866e-11, dtype=float64), Array(1059.62286844, dtype=float64))
rho0_b = (Array(4.43047991e-14, dtype=float64), Array(1059.87616936, dtype=float64))
gamma_a = (Array(5.28031237e-21, dtype=float64), Array(9.20660135e+08, dtype=float64))
gamma_b = (Array(8.5144319e-27, dtype=float64), Array(9.21228364e+08, dtype=float64))
gamma_ab = (Array(-8.14145379e-18, dtype=float64), Array(9.20944206e+08, dtype=float64))
tau_a = (Array(1.80944571e-11, dtype=float64), Array(117315.47918142, dtype=float64))
tau_b = (Array(2.4091098e-14, dtype=float64), Array(117138.81600436, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['N', array([0., 0., 0.])]]
converged SCF energy = -54.5289742046674  <S^2> = 3.7524945  2S+1 = 4.0012471
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c198bb0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c198bb0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5016, 22)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 5016), rho_b.shape=(6, 5016)
exc with xc_func = [-9.19718764e-10 -8.50773293e-12 -3.66530807e-15 ... -1.18880463e-01
 -1.18880463e-01 -1.18880463e-01] = ,PBE
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5016, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.01250672e-10, dtype=float64), Array(98.02349249, dtype=float64))
rho0_b = (Array(7.96767579e-13, dtype=float64), Array(98.07082061, dtype=float64))
gamma_a = (Array(7.38523929e-20, dtype=float64), Array(1678679.86597092, dtype=float64))
gamma_b = (Array(5.20206274e-24, dtype=float64), Array(1685178.28025283, dtype=float64))
gamma_ab = (Array(6.19826412e-22, dtype=float64), Array(1681925.93464514, dtype=float64))
tau_a = (Array(9.19823844e-11, dtype=float64), Array(2392.4769597, dtype=float64))
tau_b = (Array(8.16119858e-13, dtype=float64), Array(2377.12659072, dtype=float64))
retrho shape: (5016, 9)
refexc shape: (5016,)
mol:  [['H', array([0., 0., 0.])]]
converged SCF energy = -0.49981298400854  <S^2> = 0.75  2S+1 = 2
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c1997b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c1997b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 7, 7)
ao.shape (10, 2440, 7)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 2440), rho_b.shape=(6, 2440)
exc with xc_func = [-1.33444119e-09 -2.48043678e-11 -3.44423925e-15 ... -3.24373299e-02
 -3.24373299e-02 -3.24373299e-02] = ,PBE
get_data, dm shape = (2, 7, 7)
ao_eval.shape=(4, 2440, 7)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.6658391e-11, dtype=float64), Array(0.29561959, dtype=float64))
rho0_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_a = (Array(4.73133914e-21, dtype=float64), Array(0.26449368, dtype=float64))
gamma_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_ab = (Array(0., dtype=float64), Array(0., dtype=float64))
tau_a = (Array(1.61332065e-11, dtype=float64), Array(0.13786571, dtype=float64))
tau_b = (Array(0., dtype=float64), Array(0., dtype=float64))
retrho shape: (2440, 9)
refexc shape: (2440,)
mol:  [['Li', array([0., 0., 0.])]]
converged SCF energy = -7.46006188627841  <S^2> = 0.75000049  2S+1 = 2.0000005
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c199a20> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c199a20> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 4592, 22)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 4592), rho_b.shape=(6, 4592)
exc with xc_func = [-1.37557672e-07 -1.50600495e-09 -1.50600495e-09 ... -1.88453418e-06
 -9.34847678e-02 -9.34847678e-02] = ,PBE
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 4592, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.98682912e-08, dtype=float64), Array(6.61008772, dtype=float64))
rho0_b = (Array(5.00919173e-12, dtype=float64), Array(6.40126477, dtype=float64))
gamma_a = (Array(8.7831563e-16, dtype=float64), Array(1337.91712145, dtype=float64))
gamma_b = (Array(4.51852966e-22, dtype=float64), Array(1252.60460758, dtype=float64))
gamma_ab = (Array(-7.10811059e-13, dtype=float64), Array(1294.55828409, dtype=float64))
tau_a = (Array(3.70309247e-09, dtype=float64), Array(28.9347713, dtype=float64))
tau_b = (Array(2.38827694e-13, dtype=float64), Array(27.96947733, dtype=float64))
retrho shape: (4592, 9)
refexc shape: (4592,)
mol:  [['O', array([0., 0., 0.])]]
converged SCF energy = -75.0033781167379  <S^2> = 2.002745  2S+1 = 3.0018295
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c199660> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c199660> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5040, 22)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 5040), rho_b.shape=(6, 5040)
exc with xc_func = [-1.07130158e-10 -2.00690701e-13 -8.29414662e-18 ... -1.22853761e-01
 -1.22853761e-01 -1.22853761e-01] = ,PBE
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5040, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.72354978e-13, dtype=float64), Array(148.53261239, dtype=float64))
rho0_b = (Array(9.95819041e-16, dtype=float64), Array(148.54627892, dtype=float64))
gamma_a = (Array(5.88130606e-24, dtype=float64), Array(4945144.77527625, dtype=float64))
gamma_b = (Array(1.83182101e-29, dtype=float64), Array(4956870.259374, dtype=float64))
gamma_ab = (Array(9.12538385e-27, dtype=float64), Array(4950939.3050438, dtype=float64))
tau_a = (Array(1.10321468e-12, dtype=float64), Array(4773.97056539, dtype=float64))
tau_b = (Array(1.44448922e-14, dtype=float64), Array(4747.12464728, dtype=float64))
retrho shape: (5040, 9)
refexc shape: (5040,)
mol:  [['Cl', array([0., 0., 0.])]]
converged SCF energy = -459.957577120893  <S^2> = 0.75161941  2S+1 = 2.0016188
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c199e10> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c199e10> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6152, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6152), rho_b.shape=(6, 6152)
exc with xc_func = [-1.88008971e-10 -1.58740967e-09 -8.07637583e-12 ... -1.42656279e-01
 -1.42656279e-01 -1.42656279e-01] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6152, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.2569756e-11, dtype=float64), Array(1561.9047126, dtype=float64))
rho0_b = (Array(6.65037706e-13, dtype=float64), Array(1561.9578721, dtype=float64))
gamma_a = (Array(1.30505457e-20, dtype=float64), Array(2.73171451e+09, dtype=float64))
gamma_b = (Array(2.67787765e-24, dtype=float64), Array(2.73216812e+09, dtype=float64))
gamma_ab = (Array(-1.17599405e-17, dtype=float64), Array(2.731938e+09, dtype=float64))
tau_a = (Array(3.1522896e-11, dtype=float64), Array(239540.94872894, dtype=float64))
tau_b = (Array(6.65188115e-13, dtype=float64), Array(239371.79433676, dtype=float64))
retrho shape: (6152, 9)
refexc shape: (6152,)
mol:  [['Al', array([0., 0., 0.])]]
converged SCF energy = -242.226560973981  <S^2> = 0.75226414  2S+1 = 2.0022629
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19a140> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19a140> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6088, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6088), rho_b.shape=(6, 6088)
exc with xc_func = [-7.64192366e-06 -1.14318494e-06 -6.92791720e-08 ... -6.14577291e-14
 -2.25066778e-10 -2.51529483e-14] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6088, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.96518209e-12, dtype=float64), Array(679.40140576, dtype=float64))
rho0_b = (Array(5.91187233e-12, dtype=float64), Array(679.4986596, dtype=float64))
gamma_a = (Array(9.81955055e-23, dtype=float64), Array(2.66170705e+08, dtype=float64))
gamma_b = (Array(9.78189907e-23, dtype=float64), Array(2.66254715e+08, dtype=float64))
gamma_ab = (Array(1.07884052e-22, dtype=float64), Array(2.66212707e+08, dtype=float64))
tau_a = (Array(3.70213435e-12, dtype=float64), Array(56081.37738259, dtype=float64))
tau_b = (Array(2.10032728e-12, dtype=float64), Array(56073.23121555, dtype=float64))
retrho shape: (6088, 9)
refexc shape: (6088,)
mol:  [['S', array([0., 0., 0.])]]
converged SCF energy = -397.938786807084  <S^2> = 2.0022329  2S+1 = 3.0014882
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c199cf0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c199cf0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-2.82387578e-10 -2.87563421e-10 -1.69803475e-09 ... -1.41348425e-01
 -1.41348425e-01 -1.41348425e-01] = ,PBE
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.90898904e-12, dtype=float64), Array(1294.97546991, dtype=float64))
rho0_b = (Array(9.65068578e-15, dtype=float64), Array(1295.10901156, dtype=float64))
gamma_a = (Array(1.97170223e-23, dtype=float64), Array(1.63838354e+09, dtype=float64))
gamma_b = (Array(5.33006208e-28, dtype=float64), Array(1.63892051e+09, dtype=float64))
gamma_ab = (Array(-7.14485319e-17, dtype=float64), Array(1.63865082e+09, dtype=float64))
tau_a = (Array(1.30063644e-12, dtype=float64), Array(172116.85531804, dtype=float64))
tau_b = (Array(9.97436481e-15, dtype=float64), Array(171895.27161956, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]]
converged SCF energy = -1.16580491182912  <S^2> = 1.110223e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19a8c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19a8c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 14, 14)
ao.shape (10, 4776, 14)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 4776), rho_b.shape=(6, 4776)
exc with xc_func = [-1.71384445e-13 -1.02199607e-16 -3.33971067e-12 ... -6.04627872e-02
 -6.04627872e-02 -6.04627872e-02] = ,PBE
get_data, dm shape = (2, 14, 14)
ao_eval.shape=(4, 4776, 14)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.44689399e-13, dtype=float64), Array(0.20861087, dtype=float64))
rho0_b = (Array(1.44689332e-13, dtype=float64), Array(0.20861087, dtype=float64))
gamma_a = (Array(7.72165748e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_b = (Array(7.72165033e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_ab = (Array(7.72165391e-26, dtype=float64), Array(0.17008873, dtype=float64))
tau_a = (Array(6.67089084e-14, dtype=float64), Array(0.12766215, dtype=float64))
tau_b = (Array(6.67088776e-14, dtype=float64), Array(0.12766216, dtype=float64))
retrho shape: (4776, 9)
refexc shape: (4776,)
mol:  [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]]
converged SCF energy = -109.439263799566  <S^2> = 1.7763568e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19a7d0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19a7d0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9848, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9848), rho_b.shape=(6, 9848)
exc with xc_func = [-7.79352169e-14 -3.55020537e-10 -2.71132834e-12 ... -5.78665805e-16
 -5.77744233e-16 -7.79359758e-14] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9848, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.14686831e-11, dtype=float64), Array(97.7451329, dtype=float64))
rho0_b = (Array(1.14686957e-11, dtype=float64), Array(97.74513282, dtype=float64))
gamma_a = (Array(1.02439634e-21, dtype=float64), Array(1675905.64475822, dtype=float64))
gamma_b = (Array(1.02439863e-21, dtype=float64), Array(1675905.63933796, dtype=float64))
gamma_ab = (Array(1.02439749e-21, dtype=float64), Array(1675905.64204809, dtype=float64))
tau_a = (Array(1.12920136e-11, dtype=float64), Array(2385.36851255, dtype=float64))
tau_b = (Array(1.12920262e-11, dtype=float64), Array(2385.36850636, dtype=float64))
retrho shape: (9848, 9)
refexc shape: (9848,)
mol:  [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]]
converged SCF energy = -107.339357395734  <S^2> = 1.7763568e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19a0e0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19a0e0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9752, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9752), rho_b.shape=(6, 9752)
exc with xc_func = [-2.33480507e-07 -7.75990571e-09 -1.38708048e-07 ... -6.76654044e-07
 -5.04688188e-02 -5.04688188e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9752, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.45847479e-10, dtype=float64), Array(213.38344803, dtype=float64))
rho0_b = (Array(6.45847123e-10, dtype=float64), Array(213.38344813, dtype=float64))
gamma_a = (Array(7.30703612e-21, dtype=float64), Array(12045972.15074638, dtype=float64))
gamma_b = (Array(7.30703495e-21, dtype=float64), Array(12045972.15767288, dtype=float64))
gamma_ab = (Array(7.30703553e-21, dtype=float64), Array(12045972.15420963, dtype=float64))
tau_a = (Array(8.2392185e-12, dtype=float64), Array(8296.09746707, dtype=float64))
tau_b = (Array(8.23921436e-12, dtype=float64), Array(8296.09747258, dtype=float64))
retrho shape: (9752, 9)
refexc shape: (9752,)
mol:  [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]]
converged SCF energy = -93.337792446513  <S^2> = 4.0072745e-10  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19ad10> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19ad10> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 12256, 51)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 12256), rho_b.shape=(6, 12256)
exc with xc_func = [-1.28965444e-11 -1.95324442e-15 -4.27568679e-15 ... -6.49048383e-02
 -6.49048383e-02 -6.49048383e-02] = ,PBE
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 12256, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.47734201e-14, dtype=float64), Array(97.63905609, dtype=float64))
rho0_b = (Array(5.47744418e-14, dtype=float64), Array(97.63905217, dtype=float64))
gamma_a = (Array(2.1109048e-26, dtype=float64), Array(1672514.39746184, dtype=float64))
gamma_b = (Array(2.11098406e-26, dtype=float64), Array(1672514.37036921, dtype=float64))
gamma_ab = (Array(2.11094443e-26, dtype=float64), Array(1672514.38391553, dtype=float64))
tau_a = (Array(4.84017018e-14, dtype=float64), Array(2383.14480496, dtype=float64))
tau_b = (Array(4.84026184e-14, dtype=float64), Array(2383.14461777, dtype=float64))
retrho shape: (12256, 9)
refexc shape: (12256,)
mol:  [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]]
converged SCF energy = -188.456965322844  <S^2> = 1.4210855e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19abc0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19abc0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 66, 66)
ao.shape (10, 14920, 66)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 14920), rho_b.shape=(6, 14920)
exc with xc_func = [-4.43383850e-12 -1.92417382e-12 -3.22387723e-10 ...  0.00000000e+00
 -1.14188564e-01 -1.14188564e-01] = ,PBE
get_data, dm shape = (2, 66, 66)
ao_eval.shape=(4, 14920, 66)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.26912701e-14, dtype=float64), Array(148.00725437, dtype=float64))
rho0_b = (Array(2.26912687e-14, dtype=float64), Array(148.00725431, dtype=float64))
gamma_a = (Array(3.64491259e-27, dtype=float64), Array(4932043.35241809, dtype=float64))
gamma_b = (Array(3.64491214e-27, dtype=float64), Array(4932043.35050724, dtype=float64))
gamma_ab = (Array(3.64491237e-27, dtype=float64), Array(4932043.35146267, dtype=float64))
tau_a = (Array(2.01975405e-14, dtype=float64), Array(4763.25601498, dtype=float64))
tau_b = (Array(2.01975393e-14, dtype=float64), Array(4763.25601227, dtype=float64))
retrho shape: (14920, 9)
refexc shape: (14920,)
mol:  [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]]
converged SCF energy = -920.005608888959  <S^2> = 5.0093263e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19aa70> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19aa70> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12208, 60)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 12208), rho_b.shape=(6, 12208)
exc with xc_func = [-3.40913430e-08 -8.87192882e-10 -1.62718226e-06 ... -8.87192880e-10
 -5.59744128e-02 -5.59744128e-02] = ,PBE
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12208, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.03699875e-10, dtype=float64), Array(1561.84909056, dtype=float64))
rho0_b = (Array(1.03699908e-10, dtype=float64), Array(1561.84909229, dtype=float64))
gamma_a = (Array(4.91102934e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
gamma_b = (Array(4.91103253e-20, dtype=float64), Array(2.73287725e+09, dtype=float64))
gamma_ab = (Array(4.91103094e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
tau_a = (Array(6.02564479e-11, dtype=float64), Array(239560.02664872, dtype=float64))
tau_b = (Array(6.02564657e-11, dtype=float64), Array(239560.02652209, dtype=float64))
retrho shape: (12208, 9)
refexc shape: (12208,)
mol:  [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]]
converged SCF energy = -199.394370591172  <S^2> = 1.2434498e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19aec0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19aec0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9824, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9824), rho_b.shape=(6, 9824)
exc with xc_func = [-4.07235010e-13 -1.28586378e-16 -2.72317936e-10 ... -6.11312151e-02
 -6.11312151e-02 -6.11312151e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9824, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.87956275e-12, dtype=float64), Array(213.92658889, dtype=float64))
rho0_b = (Array(2.87956309e-12, dtype=float64), Array(213.9265899, dtype=float64))
gamma_a = (Array(1.17053094e-22, dtype=float64), Array(12130448.41996828, dtype=float64))
gamma_b = (Array(1.17053126e-22, dtype=float64), Array(12130448.47158321, dtype=float64))
gamma_ab = (Array(1.1705311e-22, dtype=float64), Array(12130448.44577575, dtype=float64))
tau_a = (Array(5.2690727e-12, dtype=float64), Array(8330.31451392, dtype=float64))
tau_b = (Array(5.26907329e-12, dtype=float64), Array(8330.31451124, dtype=float64))
retrho shape: (9824, 9)
refexc shape: (9824,)
mol:  [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]]
converged SCF energy = -150.214894514335  <S^2> = 1.0018599  2S+1 = 2.2377309
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b0d0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b0d0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9912, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9912), rho_b.shape=(6, 9912)
exc with xc_func = [-3.75522265e-11 -7.28092716e-14 -1.63172427e-17 ... -6.61293756e-02
 -6.61293756e-02 -6.61293756e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9912, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.75421917e-13, dtype=float64), Array(148.29947181, dtype=float64))
rho0_b = (Array(1.75422096e-13, dtype=float64), Array(148.29947181, dtype=float64))
gamma_a = (Array(4.0563874e-25, dtype=float64), Array(4951708.93833926, dtype=float64))
gamma_b = (Array(4.05639564e-25, dtype=float64), Array(4951708.93825382, dtype=float64))
gamma_ab = (Array(2.14369885e-24, dtype=float64), Array(4951708.93829654, dtype=float64))
tau_a = (Array(2.98402901e-13, dtype=float64), Array(4771.62332703, dtype=float64))
tau_b = (Array(2.98403185e-13, dtype=float64), Array(4771.62332702, dtype=float64))
retrho shape: (9912, 9)
refexc shape: (9912,)
mol:  [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]]
converged SCF energy = -77.2435048346372  <S^2> = 7.1054274e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19ae60> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19ae60> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 58, 58)
ao.shape (10, 15208, 58)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 15208), rho_b.shape=(6, 15208)
exc with xc_func = [-1.71677071e-13 -1.71675011e-13 -7.19667088e-10 ... -7.04129680e-15
 -4.90943007e-15 -4.91054137e-15] = ,PBE
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15208, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.13931846e-12, dtype=float64), Array(59.9351633, dtype=float64))
rho0_b = (Array(6.13931316e-12, dtype=float64), Array(59.93516325, dtype=float64))
gamma_a = (Array(1.65925574e-22, dtype=float64), Array(440696.01492364, dtype=float64))
gamma_b = (Array(1.65925309e-22, dtype=float64), Array(440696.01408612, dtype=float64))
gamma_ab = (Array(1.65925442e-22, dtype=float64), Array(440696.01450488, dtype=float64))
tau_a = (Array(3.4327454e-12, dtype=float64), Array(998.2990185, dtype=float64))
tau_b = (Array(3.43274276e-12, dtype=float64), Array(998.29901761, dtype=float64))
retrho shape: (15208, 9)
refexc shape: (15208,)
mol:  [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]]
converged SCF energy = -113.221335689652  <S^2> = 6.6968653e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b370> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b370> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 10040, 44)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 10040), rho_b.shape=(6, 10040)
exc with xc_func = [-6.33104777e-11 -3.57449910e-10 -1.88463532e-08 ... -6.22578679e-02
 -6.22578679e-02 -6.22578679e-02] = ,PBE
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 10040, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.33751683e-14, dtype=float64), Array(148.14285767, dtype=float64))
rho0_b = (Array(4.33752459e-14, dtype=float64), Array(148.14285736, dtype=float64))
gamma_a = (Array(1.33620756e-26, dtype=float64), Array(4935292.34683904, dtype=float64))
gamma_b = (Array(1.33621237e-26, dtype=float64), Array(4935292.3412988, dtype=float64))
gamma_ab = (Array(1.33620996e-26, dtype=float64), Array(4935292.34406892, dtype=float64))
tau_a = (Array(3.85913574e-14, dtype=float64), Array(4761.65762933, dtype=float64))
tau_b = (Array(3.8591427e-14, dtype=float64), Array(4761.65760861, dtype=float64))
retrho shape: (10040, 9)
refexc shape: (10040,)
mol:  [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]]
converged SCF energy = -460.624592374078  <S^2> = 6.750156e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b3a0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b3a0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 37, 37)
ao.shape (10, 8552, 37)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 8552), rho_b.shape=(6, 8552)
exc with xc_func = [-6.96925677e-12 -5.25783844e-16 -1.35248800e-15 ... -3.20968833e-02
 -3.20968833e-02 -3.20968833e-02] = ,PBE
get_data, dm shape = (2, 37, 37)
ao_eval.shape=(4, 8552, 37)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.16474784e-13, dtype=float64), Array(1561.4701971, dtype=float64))
rho0_b = (Array(1.16474765e-13, dtype=float64), Array(1561.47019709, dtype=float64))
gamma_a = (Array(6.83811728e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_b = (Array(6.83811477e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_ab = (Array(6.83811603e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
tau_a = (Array(7.41738348e-14, dtype=float64), Array(239519.29876293, dtype=float64))
tau_b = (Array(7.41738193e-14, dtype=float64), Array(239519.29876104, dtype=float64))
retrho shape: (8552, 9)
refexc shape: (8552,)
mol:  [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]]
converged SCF energy = -8.04458854018921  <S^2> = 7.5273121e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b010> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b010> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 29, 29)
ao.shape (10, 6936, 29)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 6936), rho_b.shape=(6, 6936)
exc with xc_func = [-2.03296153e-08 -2.11140102e-08 -2.11140102e-08 ... -1.03260661e-02
 -1.03260661e-02 -1.03260661e-02] = ,PBE
get_data, dm shape = (2, 29, 29)
ao_eval.shape=(4, 6936, 29)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.1956466e-09, dtype=float64), Array(6.49224216, dtype=float64))
rho0_b = (Array(1.19564647e-09, dtype=float64), Array(6.49224223, dtype=float64))
gamma_a = (Array(6.99865839e-19, dtype=float64), Array(1296.00260034, dtype=float64))
gamma_b = (Array(6.99867634e-19, dtype=float64), Array(1296.00262925, dtype=float64))
gamma_ab = (Array(6.99866736e-19, dtype=float64), Array(1296.00261479, dtype=float64))
tau_a = (Array(7.59635231e-11, dtype=float64), Array(28.56238368, dtype=float64))
tau_b = (Array(7.5963734e-11, dtype=float64), Array(28.56238403, dtype=float64))
retrho shape: (6936, 9)
refexc shape: (6936,)
mol:  [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]]
converged SCF energy = -324.340512506578  <S^2> = 1.5862867e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b640> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b640> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 11536, 60)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 11536), rho_b.shape=(6, 11536)
exc with xc_func = [-1.27764758e-07 -1.27764758e-07 -3.69492645e-07 ... -1.27764758e-07
 -1.27764758e-07 -3.69492645e-07] = ,PBE
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 11536, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.52246293e-10, dtype=float64), Array(403.20885679, dtype=float64))
rho0_b = (Array(2.52300149e-10, dtype=float64), Array(403.20885662, dtype=float64))
gamma_a = (Array(6.89938397e-19, dtype=float64), Array(74474467.6558507, dtype=float64))
gamma_b = (Array(6.90222033e-19, dtype=float64), Array(74474467.43498264, dtype=float64))
gamma_ab = (Array(6.900802e-19, dtype=float64), Array(74474467.54541667, dtype=float64))
tau_a = (Array(9.39053862e-10, dtype=float64), Array(25611.04602866, dtype=float64))
tau_b = (Array(9.39060981e-10, dtype=float64), Array(25611.04594205, dtype=float64))
retrho shape: (11536, 9)
refexc shape: (11536,)
mol:  [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]]
converged SCF energy = -1622.57507845814  <S^2> = 8.31335e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b550> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b550> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 120, 120)
ao.shape (10, 24512, 120)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 24512), rho_b.shape=(6, 24512)
exc with xc_func = [-1.26617412e-12 -7.35928037e-11 -3.91748201e-06 ... -1.36439237e-01
 -1.36439237e-01 -1.36439237e-01] = ,PBE
get_data, dm shape = (2, 120, 120)
ao_eval.shape=(4, 24512, 120)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.46952787e-13, dtype=float64), Array(1561.49823004, dtype=float64))
rho0_b = (Array(2.46953012e-13, dtype=float64), Array(1561.49822975, dtype=float64))
gamma_a = (Array(3.44377657e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_b = (Array(3.44378235e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_ab = (Array(3.44377946e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
tau_a = (Array(1.76995542e-13, dtype=float64), Array(239490.70443847, dtype=float64))
tau_b = (Array(1.76995676e-13, dtype=float64), Array(239490.70434005, dtype=float64))
retrho shape: (24512, 9)
refexc shape: (24512,)
mol:  [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]]
converged SCF energy = -342.979728469574  <S^2> = 2.5393021e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b4c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b4c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 13096, 51)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 13096), rho_b.shape=(6, 13096)
exc with xc_func = [-2.82659563e-08 -6.72494482e-11 -7.07761757e-15 ... -7.07572569e-02
 -7.07572569e-02 -7.07572569e-02] = ,PBE
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 13096, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.01629307e-12, dtype=float64), Array(1058.86187873, dtype=float64))
rho0_b = (Array(4.01622475e-12, dtype=float64), Array(1058.86187689, dtype=float64))
gamma_a = (Array(6.24753832e-23, dtype=float64), Array(9.1992722e+08, dtype=float64))
gamma_b = (Array(6.24732653e-23, dtype=float64), Array(9.19927223e+08, dtype=float64))
gamma_ab = (Array(6.24743242e-23, dtype=float64), Array(9.19927221e+08, dtype=float64))
tau_a = (Array(1.97470238e-12, dtype=float64), Array(117220.07289163, dtype=float64))
tau_b = (Array(1.97466879e-12, dtype=float64), Array(117220.07268553, dtype=float64))
retrho shape: (13096, 9)
refexc shape: (13096,)
mol:  [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]]
converged SCF energy = -578.565336498545  <S^2> = 1.0034705  2S+1 = 2.23917
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19ba00> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19ba00> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12384, 60)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 12384), rho_b.shape=(6, 12384)
exc with xc_func = [-1.02789023e-12 -5.83368596e-12 -5.83412507e-12 ... -5.31290372e-02
 -5.31290372e-02 -5.31290372e-02] = ,PBE
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12384, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(8.42950531e-12, dtype=float64), Array(856.05047293, dtype=float64))
rho0_b = (Array(8.42950536e-12, dtype=float64), Array(856.05047293, dtype=float64))
gamma_a = (Array(2.87778223e-22, dtype=float64), Array(5.06808631e+08, dtype=float64))
gamma_b = (Array(2.87778225e-22, dtype=float64), Array(5.06808631e+08, dtype=float64))
gamma_ab = (Array(2.93973816e-22, dtype=float64), Array(5.06808631e+08, dtype=float64))
tau_a = (Array(4.29090552e-12, dtype=float64), Array(79367.69391521, dtype=float64))
tau_b = (Array(4.29090552e-12, dtype=float64), Array(79367.6939145, dtype=float64))
retrho shape: (12384, 9)
refexc shape: (12384,)
mol:  [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]]
converged SCF energy = -40.4598214864076  <S^2> = 3.2152059e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19bcd0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19bcd0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 50, 50)
ao.shape (10, 13936, 50)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 13936), rho_b.shape=(6, 13936)
exc with xc_func = [-5.41425036e-10 -5.68267688e-12 -4.29994582e-16 ... -1.82026703e-15
 -1.81834257e-15 -1.81793599e-15] = ,PBE
get_data, dm shape = (2, 50, 50)
ao_eval.shape=(4, 13936, 50)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.44212404e-12, dtype=float64), Array(59.76454746, dtype=float64))
rho0_b = (Array(4.44211909e-12, dtype=float64), Array(59.76454814, dtype=float64))
gamma_a = (Array(7.40422815e-23, dtype=float64), Array(437657.06370626, dtype=float64))
gamma_b = (Array(7.40421202e-23, dtype=float64), Array(437657.07271682, dtype=float64))
gamma_ab = (Array(7.40422008e-23, dtype=float64), Array(437657.06821154, dtype=float64))
tau_a = (Array(2.21705267e-12, dtype=float64), Array(994.09544356, dtype=float64))
tau_b = (Array(2.21705041e-12, dtype=float64), Array(994.09545666, dtype=float64))
retrho shape: (13936, 9)
refexc shape: (13936,)
mol:  [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]]
converged SCF energy = -39.0756147483504  <S^2> = 6.1963767e-12  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffe3c19b940> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffe3c19b940> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 36, 36)
ao.shape (10, 9656, 36)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 9656), rho_b.shape=(6, 9656)
exc with xc_func = [-4.35296084e-10 -1.35610924e-14 -2.71085780e-12 ... -1.38359588e-02
 -1.38359588e-02 -1.38359588e-02] = ,PBE
get_data, dm shape = (2, 36, 36)
ao_eval.shape=(4, 9656, 36)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.97325576e-13, dtype=float64), Array(60.29192193, dtype=float64))
rho0_b = (Array(3.97312799e-13, dtype=float64), Array(60.2919211, dtype=float64))
gamma_a = (Array(1.45216607e-24, dtype=float64), Array(446896.79345498, dtype=float64))
gamma_b = (Array(1.45209229e-24, dtype=float64), Array(446896.79069891, dtype=float64))
gamma_ab = (Array(1.45212918e-24, dtype=float64), Array(446896.79207694, dtype=float64))
tau_a = (Array(4.14746853e-13, dtype=float64), Array(1005.74223904, dtype=float64))
tau_b = (Array(4.14752919e-13, dtype=float64), Array(1005.74223364, dtype=float64))
retrho shape: (9656, 9)
refexc shape: (9656,)
mol:  [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]]
converged SCF energy = -291.719272437819  <S^2> = 1.3152146e-11  2S+1 = 1
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
New DM shape: (2, 58, 58)
ao.shape (10, 15256, 58)
Correlation contribution only
,PBE
no spin scaling
rho_a.shape=(6, 15256), rho_b.shape=(6, 15256)
exc with xc_func = [-4.48109085e-10 -5.22668042e-12 -5.15348398e-16 ... -7.47991079e-16
 -7.49969748e-16 -7.50376324e-16] = ,PBE
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15256, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.5975292e-12, dtype=float64), Array(854.88974535, dtype=float64))
rho0_b = (Array(4.59745479e-12, dtype=float64), Array(854.88973823, dtype=float64))
gamma_a = (Array(7.56370859e-23, dtype=float64), Array(5.05221649e+08, dtype=float64))
gamma_b = (Array(7.56346804e-23, dtype=float64), Array(5.0522164e+08, dtype=float64))
gamma_ab = (Array(7.56358831e-23, dtype=float64), Array(5.05221645e+08, dtype=float64))
tau_a = (Array(2.07913851e-12, dtype=float64), Array(79243.89454595, dtype=float64))
tau_b = (Array(2.07910628e-12, dtype=float64), Array(79243.89351869, dtype=float64))
retrho shape: (15256, 9)
refexc shape: (15256,)
Epoch 0
Step = 0: initializing inp_model and inp_opt_state.
Epoch 0 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.011782482583459116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01178248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c450>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7458ebb0; to 'JaxprTracer' at 0x7ffd7458e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30e49a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.028638992670464408
Epoch 0 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.031030221605817056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03103022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67e1f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc4c2070; to 'JaxprTracer' at 0x7ffdbc4c22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22c2e4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.01832471624179762
Epoch 0 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.008676767063244117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00867677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d590>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c0e1c60; to 'JaxprTracer' at 0x7ffd9c0e05e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf76c340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.006286363365619397
Epoch 0 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.008291169705018874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00829117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ed00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c4f4ef0; to 'JaxprTracer' at 0x7ffd9c2b5c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x347453e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.012047890428650601
Epoch 0 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.007995406467344961, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00799541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67eef0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74338d10; to 'JaxprTracer' at 0x7ffd7433b9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b8fa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.023782311219170817
Epoch 0 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02173052897762551, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67e9d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c352340; to 'JaxprTracer' at 0x7ffd9c3539c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e03410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01880416461149067
Epoch 0 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.01734396779792993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01734397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67de50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c2eebb0; to 'JaxprTracer' at 0x7ffd9c2ed260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e373720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01637674708023394
Epoch 0 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0298385918541019, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02983859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d970>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd40d1300; to 'JaxprTracer' at 0x7ffdd40d18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf2bd320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.022216633241588905
Epoch 0 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01960329135020732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01960329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d340>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c484950; to 'JaxprTracer' at 0x7ffd9c484ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1581a700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.013436659890825492
Epoch 0 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02425970869496008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cf50>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74742520; to 'JaxprTracer' at 0x7ffd74743060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc207b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.015598889040560369
Epoch 0 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.024618783133508106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02461878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67dcc0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd42a8810; to 'JaxprTracer' at 0x7ffdd42ab010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1346a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.015089353431470266
Epoch 0 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.024683591822441873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02468359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67efe0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc315e90; to 'JaxprTracer' at 0x7ffdbc316d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13488a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.013610840347929845
Epoch 0 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.025719343919407785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02571934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67fc70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c4bbd80; to 'JaxprTracer' at 0x7ffdd46bfb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e4bdd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.013735294032486751
Epoch 0 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.030629283163804897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03062928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c880>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c632bb0; to 'JaxprTracer' at 0x7ffd9c633c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66e28a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.02326373538709738
Epoch 0 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.018398044230859365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01839804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f940>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4090e00; to 'JaxprTracer' at 0x7ffdf4092bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f141e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.02339791011602662
Epoch 0 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.019529568319645894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01952957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f400>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73d7b0; to 'JaxprTracer' at 0x7ffdbc73ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x300ba0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.01761974542755141
Epoch 0 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021706289634763655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02170629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d430>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c6be930; to 'JaxprTracer' at 0x7ffd9c4f7380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x380ed6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.012067665453952636
Epoch 0 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.025277601378201425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0252776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c590>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd427f790; to 'JaxprTracer' at 0x7ffdbc2e0b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24c3cad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.013723973495773
Epoch 0 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.027531941638839867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02753194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67dd50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42b8ae0; to 'JaxprTracer' at 0x7ffdf42baed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x333a3bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.02159428096868099
Epoch 0 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016433180772151144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01643318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ef00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4710ae0; to 'JaxprTracer' at 0x7ffdf4519440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c95c6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.010213538170513093
Epoch 0 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.029186206963089573, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02918621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ea40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd468ae80; to 'JaxprTracer' at 0x7ffdd46892b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x474afd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.022431218233685674
Epoch 0 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02491665469231384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02491665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c610>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4753c40; to 'JaxprTracer' at 0x7ffdf47531a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e9bfa30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.026997778720343046
Epoch 0 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02127956249290778, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02127956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67fcb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4063100; to 'JaxprTracer' at 0x7ffd9c6331a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a7b790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.019241467714358498
Epoch 0 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02547647624730615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02547648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cdc0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c121080; to 'JaxprTracer' at 0x7ffe2c120130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20a61150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.024416491632329444
Epoch 0 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023639285406200188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c640>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf466e020; to 'JaxprTracer' at 0x7ffdf466eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8780e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.008411428213383362
Epoch 0 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.025273982826518934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02527398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67dc50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c122b10; to 'JaxprTracer' at 0x7ffe2c122020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2839a7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.009381376421514648
Epoch 0 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.029809042588491878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02980904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c680>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4255210; to 'JaxprTracer' at 0x7ffdf4256610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29b16e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0154931377099194
0, epoch_train_loss=0.4662026032674182
Epoch 1
Epoch 1 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03309217568257436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03309218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ca40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42bbf10; to 'JaxprTracer' at 0x7ffdf42bac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12074350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.024027435750799415
Epoch 1 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.027313184782187885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02731318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c312980>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c30b5b0; to 'JaxprTracer' at 0x7ffe3c308040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3436a160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.014670249516917734
Epoch 1 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011915274807630417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01191527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457dd10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c738040; to 'JaxprTracer' at 0x7ffd3c703f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x232f6a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0053085127892389125
Epoch 1 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013118435803092122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01311844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c687450>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c528090; to 'JaxprTracer' at 0x7ffc6c607c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ae8dec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008185503325714983
Epoch 1 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01599417283707652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01599417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2237750>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2087920; to 'JaxprTracer' at 0x7ffbe2087510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x424de900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.013866249209578173
Epoch 1 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025001139073326673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02500114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe17e7b00>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1638900; to 'JaxprTracer' at 0x7ffbe16383b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49f60f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.018929850205899504
Epoch 1 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022127024047384078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7660>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09136a0; to 'JaxprTracer' at 0x7ffbe09113a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52aab6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.013675334344381762
Epoch 1 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.019308250407465987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01930825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0995620>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe07096c0; to 'JaxprTracer' at 0x7ffbe0709670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bc227d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.014383954157940774
Epoch 1 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.016695710894757947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01669571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f600>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0012520; to 'JaxprTracer' at 0x7ffbe0012660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ee0ce70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.010746872616162875
Epoch 1 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022349737660862734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409bc80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe2650d0; to 'JaxprTracer' at 0x7ffbbe264e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bfdfa80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.013758111631455544
Epoch 1 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.021934253059753304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a590>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbda01ee0; to 'JaxprTracer' at 0x7ffbbda02020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ba1ee50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.010652534268179716
Epoch 1 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.023044883951024733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02304488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c7ae740>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbce9e4d0; to 'JaxprTracer' at 0x7ffbbce9e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60e29220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.009728730425215538
Epoch 1 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02457617662617011, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02457618, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cabe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc626890; to 'JaxprTracer' at 0x7ffbbc6268e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x640154f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.010759404928506805
Epoch 1 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.03275152041268448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03275152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2112a60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb18c20; to 'JaxprTracer' at 0x7ffbbbb18d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x663a3b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.023498127692997393
Epoch 1 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.026322385164811276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02632239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe13be4f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb29cf40; to 'JaxprTracer' at 0x7ffbbb29d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6577c820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.012113506267346698
Epoch 1 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021591829548539554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02159183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0995f30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa45a30; to 'JaxprTracer' at 0x7ffbbaa458a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69a11bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009367837651398843
Epoch 1 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.020941040050087362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02094104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009050>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c16b10; to 'JaxprTracer' at 0x7ffbb9c16f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a7a9760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.009252012872602659
Epoch 1 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0205279565864325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02052796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ea90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93a33d0; to 'JaxprTracer' at 0x7ffbb93a3240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a540080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009905973948031799
Epoch 1 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024538565421163068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02453857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd7786a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaba32cf0; to 'JaxprTracer' at 0x7ffbaba33100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f1b4770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011610333673286026
Epoch 1 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01820900728123019, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01820901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd1b2380>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab1bffb0; to 'JaxprTracer' at 0x7ffbab1bfe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73b3e4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.009649228170869115
Epoch 1 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023704959743829412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc8bb420>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa97c8b0; to 'JaxprTracer' at 0x7ffbaac43c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x722e2b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.013728788628824342
Epoch 1 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.021789677496514986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02178968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe255d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9e29210; to 'JaxprTracer' at 0x7ffba9e29080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74e195d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.013952116438748193
Epoch 1 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.020215128629342563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02021513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbb5a3370>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba95d5e40; to 'JaxprTracer' at 0x7ffba9545bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77783040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.010250417907163096
Epoch 1 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.01999407540145083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01999408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68ba0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8aa1ad0; to 'JaxprTracer' at 0x7ffba8aa1940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7896b440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01245568445460228
Epoch 1 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.020354266848568066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02035427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba3c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e37600; to 'JaxprTracer' at 0x7ffb93dde110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af24a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.007223975584624461
Epoch 1 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021540501606689147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0215405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96b7750>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb936460c0; to 'JaxprTracer' at 0x7ffb93645260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b599bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007656345973127806
Epoch 1 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02630766234990734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02630766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbabc59240>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92af1620; to 'JaxprTracer' at 0x7ffb92af1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7da73700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.008397523110357493
1, epoch_train_loss=0.32775461554397195
Epoch 2
Epoch 2 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.024558160062640506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02455816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510b10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8b1dc10; to 'JaxprTracer' at 0x7ffba8b1dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15d88530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012177323819322005
Epoch 2 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017462476488065044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01746248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b810>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9b2ea20; to 'JaxprTracer' at 0x7ffba9b2d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23370170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009165336959789041
Epoch 2 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011803458715764463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01180346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4febf0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaafc7240; to 'JaxprTracer' at 0x7ffbaafc4540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d0a0540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0054329572291842865
Epoch 2 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.007221625449059782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00722163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c96f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e09ee0; to 'JaxprTracer' at 0x7ffbb8e0b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x961d150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.012062147600718855
Epoch 2 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.010280052192845225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01028005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4098540>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e38f40; to 'JaxprTracer' at 0x7ffbb9e39350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x743ddbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.01796395101792085
Epoch 2 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.01882064204930687, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01882064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4501c90>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb8bb8d0; to 'JaxprTracer' at 0x7ffbbb8b91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79d2b040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.014703310743022266
Epoch 2 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0157882418243379, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01578824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795190>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc93e020; to 'JaxprTracer' at 0x7ffbbc93f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x553f3730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.015359451647271075
Epoch 2 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021981627988091144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77bf30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6320c0; to 'JaxprTracer' at 0x7ffc6c632ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x759fbed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.0126218757517913
Epoch 2 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022705311973720874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b950>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd4ad260; to 'JaxprTracer' at 0x7ffbbd4acdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44db9480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004343841805474658
Epoch 2 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023106694226026174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02310669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc92a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba07a0c0; to 'JaxprTracer' at 0x7ffbba0782c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51111220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010632173655711568
Epoch 2 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01712412452759034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01712412, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052edf0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff9e340; to 'JaxprTracer' at 0x7ffbdfa35c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f6bafe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009264639640827448
Epoch 2 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021482003006530127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ff0f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd472fb00; to 'JaxprTracer' at 0x7ffdd472d170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x539d5620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008323480627046338
Epoch 2 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02185699216528786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496b7c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0dabe20; to 'JaxprTracer' at 0x7ffbe0da92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e63910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009194714953391709
Epoch 2 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024983560609117807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02498356, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e06d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0d7c630; to 'JaxprTracer' at 0x7ffbe1185760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e3f8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012275663649677497
Epoch 2 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022588862014990975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f310>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1f22ac0; to 'JaxprTracer' at 0x7ffbe1f20130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37dcd980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009655110284637508
Epoch 2 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021504218216175167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779130>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c37e430; to 'JaxprTracer' at 0x7ffc6c37cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f5c930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009306798957669707
Epoch 2 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.020907458501899602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02090746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c7e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c320950; to 'JaxprTracer' at 0x7ffc6c481620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36a97f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007294022334352403
Epoch 2 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020964611204740587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02096461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab47ad20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44749f0; to 'JaxprTracer' at 0x7ffd5c2a1bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5421d350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00868658355735817
Epoch 2 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023985837502449703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c4910>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74402d90; to 'JaxprTracer' at 0x7ffd740f6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43d14770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010766818975061418
Epoch 2 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017895733882225078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01789573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b65e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c0bebb0; to 'JaxprTracer' at 0x7ffe3c108360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53622270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.008712797509108455
Epoch 2 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024659525804597706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02465953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba76f6f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c47bb00; to 'JaxprTracer' at 0x7ffe2c478e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c8da30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012642925327486195
Epoch 2 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024103224968345098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf198a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c542980; to 'JaxprTracer' at 0x7ffe2c4becf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e277fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012665828021993045
Epoch 2 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02372096457349362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8df3840>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc50d120; to 'JaxprTracer' at 0x7ffdbc50d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f1f3560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008413974440291959
Epoch 2 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025102403931351686, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ece10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93952d40; to 'JaxprTracer' at 0x7ffb93952e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53eadd70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011206802865843555
Epoch 2 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02402841043268481, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8552530>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd960360; to 'JaxprTracer' at 0x7ffbbd9601d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ba01d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005914611200534502
Epoch 2 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.019677662370141895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01967766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbb04b9f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe276db70; to 'JaxprTracer' at 0x7ffbe276d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e3599c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.00696777518156595
Epoch 2 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.022178190507345645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6554e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0013f10; to 'JaxprTracer' at 0x7ffba9dcfe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x442aded0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.00809132681054275
2, epoch_train_loss=0.27384624456759443
Epoch 3
Epoch 3 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.019408924535039597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01940892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20d3830; to 'JaxprTracer' at 0x7ffbe20ae1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b36a370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011940794641579575
Epoch 3 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019425365681238593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01942537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a940>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c39c5e0; to 'JaxprTracer' at 0x7ffe3c39c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eaa4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009745075439928265
Epoch 3 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011208212268546397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01120821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb95f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40dd8a0; to 'JaxprTracer' at 0x7ffe3c22fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4387cec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004883387137294201
Epoch 3 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010795233142319505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01079523, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a0c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7414ea70; to 'JaxprTracer' at 0x7ffd7414e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e14ada0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008005841508036486
Epoch 3 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.016941106444777785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01694111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac50d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24aa520; to 'JaxprTracer' at 0x7ffbe24a81d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x248a28f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009397692723832767
Epoch 3 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02185270387932833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052fdf0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a295d0; to 'JaxprTracer' at 0x7ffbe1a2b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3275e4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012123133660023683
Epoch 3 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021852722983731584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26eb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0ac30b0; to 'JaxprTracer' at 0x7ffbe0ac2b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a4959b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01055114097451755
Epoch 3 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02239726227561669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26810>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b33dd0; to 'JaxprTracer' at 0x7ffbe0b33920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78e38b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011050448670204367
Epoch 3 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020519441739405037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02051944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253de0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff4a570; to 'JaxprTracer' at 0x7ffbe0507600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb381990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003124417576257552
Epoch 3 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023017754080712053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e9d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe31f1f0; to 'JaxprTracer' at 0x7ffbba044720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x470f14a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00948332109519989
Epoch 3 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01702757341341298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01702757, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba796530>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7951c0; to 'JaxprTracer' at 0x7ffbbd7946d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4db67b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008025096788531052
Epoch 3 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02082469887999329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0208247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502fb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc86d8f0; to 'JaxprTracer' at 0x7ffbbc86f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ef9df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008103893699187502
Epoch 3 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02054055728852206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02054056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313bd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc135a30; to 'JaxprTracer' at 0x7ffbbc135e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ebe02d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.0089078597217931
Epoch 3 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025168238890627664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02516824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb19b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb19b20; to 'JaxprTracer' at 0x7ffbbc84c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79e5f440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011933563674636001
Epoch 3 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02276228445220569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02276228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b170>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa07e70; to 'JaxprTracer' at 0x7ffbbaa062a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x626061f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009646530273005431
Epoch 3 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02169331634336725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513300>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9338220; to 'JaxprTracer' at 0x7ffbb93392b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65b2cd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00869240913254219
Epoch 3 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.0223058127953107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02230581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68c20>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb12a70; to 'JaxprTracer' at 0x7ffbabb13150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2153e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007366510542203228
Epoch 3 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02180346812895439, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02180347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a680>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaca4540; to 'JaxprTracer' at 0x7ffbaaca7d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f17960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008437611295449541
Epoch 3 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025585316610684583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02558532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7394c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa6d6b10; to 'JaxprTracer' at 0x7ffbaa6d5940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4988a660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010725880930251777
Epoch 3 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017545217850068726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01754522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affb00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87e0180; to 'JaxprTracer' at 0x7ffba87e0bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52f33410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006660123332399452
Epoch 3 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02189916311838981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5ec0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93957790; to 'JaxprTracer' at 0x7ffb93954630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52628190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011003257305405929
Epoch 3 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02517424034886122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02517424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc656f00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8aa1120; to 'JaxprTracer' at 0x7ffba8aa23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fe23aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.0120173148851042
Epoch 3 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023764080500966796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466f1a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93deed0; to 'JaxprTracer' at 0x7ffbb93dec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f68e4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008444099225796248
Epoch 3 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.022944758624746143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02294476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba9864ed0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbddc400; to 'JaxprTracer' at 0x7ffbbbddffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x683a60f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011474133686245617
Epoch 3 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02191941606078049, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c532600>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938b1b20; to 'JaxprTracer' at 0x7ffb938b1990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2efd8790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.0061281710381848676
Epoch 3 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02113054622789229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdff7bac0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcab420; to 'JaxprTracer' at 0x7ffbbdcab8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c2c51a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0068783206688611655
Epoch 3 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02419246105875549, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02419246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e155b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7b1670; to 'JaxprTracer' at 0x7ffbbd7b17b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aa649e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007249122036475918
3, epoch_train_loss=0.24199915166294758
Epoch 4
Epoch 4 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02218776791849322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218777, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f40f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9108ae0; to 'JaxprTracer' at 0x7ffbb910a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x455f7120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011063088225826875
Epoch 4 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017040445871668974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01704045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afd270>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab177830; to 'JaxprTracer' at 0x7ffbab176d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e720c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00876261655650228
Epoch 4 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010653120818235363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01065312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69c60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938c8270; to 'JaxprTracer' at 0x7ffb938c8680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bf6110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004076464999749682
Epoch 4 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.00935129524336966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0093513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25800>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaf4dfd0; to 'JaxprTracer' at 0x7ffbaaf4ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f786a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008482354070240748
Epoch 4 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.016949744727681647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01694974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d000>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb90ee7f0; to 'JaxprTracer' at 0x7ffbb90edf80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2efcd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009313638738325506
Epoch 4 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022137874628939087, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6e70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa44450; to 'JaxprTracer' at 0x7ffbbaa45b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56963130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01210534588230563
Epoch 4 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021939375158953982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409aa60>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7433a340; to 'JaxprTracer' at 0x7ffd74339080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45e0a500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010929198972930773
Epoch 4 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02207304131406353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409ae50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9392ef20; to 'JaxprTracer' at 0x7ffb9392dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50e33f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011286450767942614
Epoch 4 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020268349422969005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02026835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff430>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd9cdc60; to 'JaxprTracer' at 0x7ffbbd9ceb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e1f2f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0032614427068964275
Epoch 4 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02175956931676226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466cd40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba0a5940; to 'JaxprTracer' at 0x7ffbba0a7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be04220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00900485701414774
Epoch 4 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01750409561302702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0175041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7140>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfacae30; to 'JaxprTracer' at 0x7ffbdfac9ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b4ba2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008210380957695204
Epoch 4 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02227637345638605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b7f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4711cb0; to 'JaxprTracer' at 0x7ffdd4712610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37e1e900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008258044252470157
Epoch 4 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022276918977509195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a1e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbda17d30; to 'JaxprTracer' at 0x7ffbbda168e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16f00ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009104223748305667
Epoch 4 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025627666365431026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02562767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2df0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe11b2340; to 'JaxprTracer' at 0x7ffbaa9adb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4feabab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01163200535274943
Epoch 4 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022330532450262223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02233053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3109c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c37c860; to 'JaxprTracer' at 0x7ffdf451bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12f53f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009232714859378797
Epoch 4 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02064933580148866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02064934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c7f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c706a70; to 'JaxprTracer' at 0x7ffe2c706bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a1b10e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008820849084380102
Epoch 4 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.020413789989979923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02041379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45037a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c4b99e0; to 'JaxprTracer' at 0x7ffd9c4ba3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3dbed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007026244090855133
Epoch 4 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02012190613580884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02012191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba794f80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c1088b0; to 'JaxprTracer' at 0x7ffe3c108860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32ea0130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008392094281705315
Epoch 4 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02353429703574126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0235343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb933498f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c1e30b0; to 'JaxprTracer' at 0x7ffe3c1e0310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bbd85d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01046653943420393
Epoch 4 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016179104749639912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0161791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c2f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6e5fd0; to 'JaxprTracer' at 0x7ffdbc6e4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c7dc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005696931482952252
Epoch 4 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02251454448275955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1ac30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46b3380; to 'JaxprTracer' at 0x7ffdf46b0360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x381e8390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011066725612130002
Epoch 4 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02725305017609122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02725305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc630>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0741b70; to 'JaxprTracer' at 0x7ffdbc50e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f011b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012148803822644943
Epoch 4 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025822494791001068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02582249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739af0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c76c180; to 'JaxprTracer' at 0x7ffd3c76f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74e4ec90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008120517009725057
Epoch 4 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025240306023040567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02524031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2774fe0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7b0270; to 'JaxprTracer' at 0x7ffbbd7b0ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c657140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011172691173278888
Epoch 4 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023235213608953705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02323521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba8f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e46930; to 'JaxprTracer' at 0x7ffbb8e46de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x409c7770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005116669126319724
Epoch 4 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020759572934260766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02075957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaf63b60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc78130; to 'JaxprTracer' at 0x7ffbbcc785e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cec3d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005997355594641179
Epoch 4 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023329801096325518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0233298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb995d640>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0de2de0; to 'JaxprTracer' at 0x7ffbe0de2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58784950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007003424342120098
4, epoch_train_loss=0.23575167216042414
Epoch 5
Epoch 5 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0197392200231303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01973922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250130>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c22930; to 'JaxprTracer' at 0x7ffbb9c21300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x354040b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011768092920980253
Epoch 5 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01762680733446388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01762681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b9f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4692b60; to 'JaxprTracer' at 0x7ffdf4691a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb1f3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009215978745403098
Epoch 5 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011049783499708447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01104978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30d400>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c4f61b0; to 'JaxprTracer' at 0x7ffd9c4f4540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bdaa080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004898178546155551
Epoch 5 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012313539865914677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01231354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310410>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd740f5580; to 'JaxprTracer' at 0x7ffe3c274770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44028b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.007558065900388971
Epoch 5 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018256105983497885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01825611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1fd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c739cb0; to 'JaxprTracer' at 0x7ffd3c738c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76510960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008774485243964009
Epoch 5 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.021928127818396818, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02192813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe00087b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c34e7f0; to 'JaxprTracer' at 0x7ffc6c528090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40f77500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012093386655893866
Epoch 5 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021697649516297383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5129d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f42d90; to 'JaxprTracer' at 0x7ffbe0f43ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34309ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010685870432470173
Epoch 5 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02151960605710873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02151961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5119f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa924a90; to 'JaxprTracer' at 0x7ffbaa9256c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d603540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011180844448222644
Epoch 5 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021744928892924145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174493, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b490>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09e1d50; to 'JaxprTracer' at 0x7ffdd4713ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73ebc960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002940251092887377
Epoch 5 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02263409106099247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18fd0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe04daa70; to 'JaxprTracer' at 0x7ffbe04daca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f1d0660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00936236980173524
Epoch 5 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01699561439940584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01699561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795d90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc69b70; to 'JaxprTracer' at 0x7ffbbcc68680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51e5f7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007873127545876008
Epoch 5 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.020882853969432603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02088285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bcb70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d68f40; to 'JaxprTracer' at 0x7ffb92d68e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76948070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008131428857555797
Epoch 5 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020355437510046502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02035544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca2d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb974c0; to 'JaxprTracer' at 0x7ffbbb84df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f6c8db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009081562605711174
Epoch 5 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024203718340252704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02420372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd290>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb4ecae0; to 'JaxprTracer' at 0x7ffba9ba9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d902640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011569443479083043
Epoch 5 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021591844152973976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02159184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc98b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93d73d0; to 'JaxprTracer' at 0x7ffbb93d58f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cdb1990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009087927738042269
Epoch 5 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021285263222658113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68dc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaba661b0; to 'JaxprTracer' at 0x7ffbaba65440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4269b280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00872769638149412
Epoch 5 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021934864987070934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6010>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab521350; to 'JaxprTracer' at 0x7ffbab520130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22e7e910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006699756038794955
Epoch 5 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021606934674261155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02160693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b74e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa3c82c0; to 'JaxprTracer' at 0x7ffbaaf4ee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40be60b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00819969011896893
Epoch 5 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024629376188315462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f73a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaf95a80; to 'JaxprTracer' at 0x7ffb938b1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5610ad50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01025756600636335
Epoch 5 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018027644630071494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01802764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07e060>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93355710; to 'JaxprTracer' at 0x7ffb933558a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dc11400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007041216870522178
Epoch 5 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023565082573207944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02356508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc656320>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba903e570; to 'JaxprTracer' at 0x7ffba903e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35803a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011616516616626764
Epoch 5 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025490390719288266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02549039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cd50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dbf560; to 'JaxprTracer' at 0x7ffb93dbe5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60a584d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012186395703764709
Epoch 5 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023949560635313213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bfa30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0cc4f0; to 'JaxprTracer' at 0x7ffd3c0cc130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x391e71b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008359614378536199
Epoch 5 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02359860318057877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0235986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7510c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba837100; to 'JaxprTracer' at 0x7ffbba837830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60d653e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01122826026159077
Epoch 5 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021968948341666152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebac60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c38ce50; to 'JaxprTracer' at 0x7ffd5c38fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7491b8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005521368312488012
Epoch 5 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02038060961015698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02038061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf580a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe274dda0; to 'JaxprTracer' at 0x7ffbe274dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45251650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006056704266379686
Epoch 5 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024007033708674567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe04c97c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe11abf10; to 'JaxprTracer' at 0x7ffbe11ab8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d57ff10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.00715824980572873
5, epoch_train_loss=0.23727404877562788
Epoch 6
Epoch 6 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02069807614498928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02069808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afda90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc659800; to 'JaxprTracer' at 0x7ffbbc65ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x531eb450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012142221070714462
Epoch 6 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01850728197931084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01850728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefe3f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9534d60; to 'JaxprTracer' at 0x7ffba9535a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35882ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008850387223719051
Epoch 6 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010989329572431697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01098933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466d010>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13c78d0; to 'JaxprTracer' at 0x7ffbe13c5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74982820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004932500767885379
Epoch 6 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011652075615290929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01165208, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73bf30>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dc7e70; to 'JaxprTracer' at 0x7ffb93dc7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48a8bdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.007721663488835901
Epoch 6 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02022978005155262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02022978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe261d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab183330; to 'JaxprTracer' at 0x7ffbab182570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1aeebd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009449632199746618
Epoch 6 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02470726313311332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02470726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca200>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9ed9f80; to 'JaxprTracer' at 0x7ffbb9ed9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53e2af20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011679530087100121
Epoch 6 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02334276993687539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02334277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7be050>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb87a4d0; to 'JaxprTracer' at 0x7ffbbb878630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c8355d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01089090355034026
Epoch 6 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022233044807533024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7be4d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab222700; to 'JaxprTracer' at 0x7ffbab220770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c213e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010962474527526363
Epoch 6 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019182046593460723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01918205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5e20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c259990; to 'JaxprTracer' at 0x7ffe3c258c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e01a190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0028886849596900413
Epoch 6 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.020614254633759915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02061425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bedb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe2667f0; to 'JaxprTracer' at 0x7ffbbe265300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a14bce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00904899534282987
Epoch 6 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01621187116568873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01621187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7850>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44b0ae0; to 'JaxprTracer' at 0x7ffdd44b31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a139cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007812745086000586
Epoch 6 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021358140974013343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135814, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5520>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20af8d0; to 'JaxprTracer' at 0x7ffbe20ad850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x338201a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008049685374755908
Epoch 6 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02168602150372318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7396a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf451b150; to 'JaxprTracer' at 0x7ffdf45180e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78380de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008809976543965366
Epoch 6 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025857913540782016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02585791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26640>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa3cb1a0; to 'JaxprTracer' at 0x7ffbba557e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e8ed9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01166308597878846
Epoch 6 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023614809385020724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c9af0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17bddf0; to 'JaxprTracer' at 0x7ffdf4753b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72fff750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009440922561008517
Epoch 6 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021957929128622117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02195793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bcba0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6d6d90; to 'JaxprTracer' at 0x7ffc6c6d61b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b8a4450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008695291658534922
Epoch 6 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022498098505630285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c130>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c52d940; to 'JaxprTracer' at 0x7ffd3c52ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x485f320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0070655085495659456
Epoch 6 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02108999754117576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e27c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c48cb80; to 'JaxprTracer' at 0x7ffe3c48c810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a349e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00825139062756167
Epoch 6 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.0242360353724892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f450>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc756430; to 'JaxprTracer' at 0x7ffdbc754860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x595cbde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010468575141201213
Epoch 6 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018136351866604762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01813635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a950>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c495f80; to 'JaxprTracer' at 0x7ffe2c497510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c834140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007354174053306512
Epoch 6 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022879486869994973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02287949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000acb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c1b5120; to 'JaxprTracer' at 0x7ffe3c1b6340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41eb5f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01144758020863989
Epoch 6 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.024550188962466274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02455019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67dcb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b71a0; to 'JaxprTracer' at 0x7ffbe15b5ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e7dc280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012057401166547263
Epoch 6 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02436105418098474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02436105, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07e5a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e0d530; to 'JaxprTracer' at 0x7ffbb8e0c630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f0d2700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00814687521522264
Epoch 6 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023396246284255576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02339625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbbad150>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4f880; to 'JaxprTracer' at 0x7ffbe1a4cb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9f2020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010866891431611961
Epoch 6 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022955687378491362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93349ce0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c11f920; to 'JaxprTracer' at 0x7ffd3c11ff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x496df530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005657289221787249
Epoch 6 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021041934628644163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02104193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94a7f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c523830; to 'JaxprTracer' at 0x7ffd3c5236a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5560d6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006320205831888996
Epoch 6 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0239036520809605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02390365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1429860>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcea58a0; to 'JaxprTracer' at 0x7ffbbcea59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77e3afa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0070253495481013275
6, epoch_train_loss=0.2376999414168765
Epoch 7
Epoch 7 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021958733297345823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02195873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07c100>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c8fce0; to 'JaxprTracer' at 0x7ffbb9c8e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d9297d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01103590758574767
Epoch 7 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018103210154656508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01810321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e550>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93645440; to 'JaxprTracer' at 0x7ffb936476f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11f54a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009157706350647056
Epoch 7 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010804153647156584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01080415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba390>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7411dda0; to 'JaxprTracer' at 0x7ffd7411f150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x130a5c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004474048927574161
Epoch 7 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011569056728108274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01156906, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3121c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c30aa20; to 'JaxprTracer' at 0x7ffe3c30a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40b5c000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.00696190499206946
Epoch 7 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018340191915898404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01834019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e3e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74524180; to 'JaxprTracer' at 0x7ffd74525d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58ad6c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008930505719939452
Epoch 7 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02281057931514273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc675540>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c37d080; to 'JaxprTracer' at 0x7ffc6c37db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a7fa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011738826828117449
Epoch 7 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02207572955966274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6140>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe19fbd30; to 'JaxprTracer' at 0x7ffbe19fbf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a2162f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01069997869064695
Epoch 7 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022033540433603907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02203354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f41f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf451b970; to 'JaxprTracer' at 0x7ffdf45184f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a5dd5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010993755798386797
Epoch 7 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01992217684637384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01992218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94a5b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfdc6110; to 'JaxprTracer' at 0x7ffbdfdc5850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d9e2930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0021379173058395464
Epoch 7 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02179534531709431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d690>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbce9d620; to 'JaxprTracer' at 0x7ffbbce9e430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20762570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009146916712972799
Epoch 7 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01752169459684931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01752169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30d0e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd984810; to 'JaxprTracer' at 0x7ffbbd986f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x625ceee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007452009372297774
Epoch 7 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022418991676831715, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02241899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa541c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93bd8cc0; to 'JaxprTracer' at 0x7ffb93bdb7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x593f9ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.0078332605195394
Epoch 7 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021984825813097002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7df0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb975b0; to 'JaxprTracer' at 0x7ffbdfa8ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d72c520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008445691080239143
Epoch 7 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025659422730046188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02565942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1c60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb527ce0; to 'JaxprTracer' at 0x7ffbbb524540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2de9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011446765652592858
Epoch 7 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02241512058342054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02241512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7385a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa923ba0; to 'JaxprTracer' at 0x7ffbaa922fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447b2dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008675695366738394
Epoch 7 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021491358809301947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02149136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f5720>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaac0b240; to 'JaxprTracer' at 0x7ffbaac0a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x473b51a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008351496806459333
Epoch 7 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022583080540336847, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6578a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9855210; to 'JaxprTracer' at 0x7ffba9854ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ec568e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0068808747054235776
Epoch 7 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021632437445974557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be250>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9006e80; to 'JaxprTracer' at 0x7ffbab1fefc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x739a8a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008084587382549685
Epoch 7 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024248177352037072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02424818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510610>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93896cf0; to 'JaxprTracer' at 0x7ffb93896890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x799c60c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010725663949805883
Epoch 7 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01805648242895842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01805648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778a60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafc09a0; to 'JaxprTracer' at 0x7ffbbafc0d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6521ece0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007092573357635665
Epoch 7 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018751331175391534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01875133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e750>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe247dc10; to 'JaxprTracer' at 0x7ffbe247e3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7237c1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011692540327530528
Epoch 7 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026480060178803035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02648006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26a60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd55440; to 'JaxprTracer' at 0x7ffbbcc78810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75349910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011857997705578528
Epoch 7 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.026434187405677812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02643419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68e30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e27380; to 'JaxprTracer' at 0x7ffbb8e25580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d150770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008277710058068408
Epoch 7 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02556568566796748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02556569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbe3091d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a1de90; to 'JaxprTracer' at 0x7ffbe1a1dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3839faa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010723370628646395
Epoch 7 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024541498529699005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0245415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a970>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba9b73d0; to 'JaxprTracer' at 0x7ffbba9b7240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74eb57c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005474122823202427
Epoch 7 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021724728058702986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6660>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0537c90; to 'JaxprTracer' at 0x7ffbe0534d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5555e390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0061391549390113305
Epoch 7 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023929110968183388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbabbb98d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc82660; to 'JaxprTracer' at 0x7ffbb9425b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74fb10b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0068052999889272004
7, epoch_train_loss=0.2312362835761879
Epoch 8
Epoch 8 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020908567029733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02090857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c950>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c343380; to 'JaxprTracer' at 0x7ffbbc88ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e88f920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010768111635720536
Epoch 8 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017023175762582384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01702318, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f65c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb6e1b0; to 'JaxprTracer' at 0x7ffbabb6ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63afff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009052919372831588
Epoch 8 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010608976509780845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01060898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe035080; to 'JaxprTracer' at 0x7ffbbe035bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34e72b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004004048020235559
Epoch 8 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010377980521842273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01037798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c46d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8562930; to 'JaxprTracer' at 0x7ffba8560630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79583d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.0073434621664758
Epoch 8 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017083588119437106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01708359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc87d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa3c8d10; to 'JaxprTracer' at 0x7ffbaa3c8fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d2c56b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009153222615827666
Epoch 8 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.021997981729764762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311730>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaba669d0; to 'JaxprTracer' at 0x7ffbaba66890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b8bb8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011591353087227495
Epoch 8 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021794554555446002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf40997a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad3c540; to 'JaxprTracer' at 0x7ffbbad3ee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60adc2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010168795577495969
Epoch 8 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022092964686298625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409b4f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbacabb00; to 'JaxprTracer' at 0x7ffbbaca8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22f58190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010761571280556782
Epoch 8 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019508873578721234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01950887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a600>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb87b7e0; to 'JaxprTracer' at 0x7ffbbb87a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f8ffee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0036723804358389555
Epoch 8 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022097928719262545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd7782f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe266700; to 'JaxprTracer' at 0x7ffbbe2667f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c4624f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009087190606723214
Epoch 8 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018341421611282483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01834142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6579f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd16ef70; to 'JaxprTracer' at 0x7ffbbd16c770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a477550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00778195464487854
Epoch 8 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022873514183948895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02287351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f070>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c08a890; to 'JaxprTracer' at 0x7ffe2c0889f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70cfb1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007930600979212325
Epoch 8 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022531260748660062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22504b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad20090; to 'JaxprTracer' at 0x7ffbbad23970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ca0d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008558405635732848
Epoch 8 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026584479832205424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02658448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e870>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd40d2610; to 'JaxprTracer' at 0x7ffdd40d2ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cec1d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01164013452275967
Epoch 8 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022156832472734977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa576a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd743d74c0; to 'JaxprTracer' at 0x7ffd743d7100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d1e10b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008841063944414765
Epoch 8 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020617378222394966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02061738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c380>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b3010; to 'JaxprTracer' at 0x7ffc6c6d59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e80bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008628443736557107
Epoch 8 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021425949293038232, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02142595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1a380>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc673920; to 'JaxprTracer' at 0x7ffdbc673600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53024160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007111024095175529
Epoch 8 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020471759772042006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02047176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f250>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c320bd0; to 'JaxprTracer' at 0x7ffd3c323650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15862410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008227123356105676
Epoch 8 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02429499924060195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.024295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94afe0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7d6fc0; to 'JaxprTracer' at 0x7ffbab7d73d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x581820a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010564052401431729
Epoch 8 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01861080709598145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01861081, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e27d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74689170; to 'JaxprTracer' at 0x7ffd74688540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f0dd770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.0071137451782442756
Epoch 8 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024081359513983856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7381b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe25acf0; to 'JaxprTracer' at 0x7ffbbe25ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x619356e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011674965643434594
Epoch 8 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02661793452408678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02661793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348b90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b5ee0; to 'JaxprTracer' at 0x7ffbe15b7ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ca81700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011797770985343405
Epoch 8 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.026220593382600303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02622059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26dd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc537240; to 'JaxprTracer' at 0x7ffdbc5376f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a702570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008256525580651165
Epoch 8 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02510955921217593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1595210>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93d95a80; to 'JaxprTracer' at 0x7ffb93d95f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44664890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01068436427003178
Epoch 8 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023921360962871518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92aff080>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb91532e0; to 'JaxprTracer' at 0x7ffbb9152de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c6ba350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.00593953828474261
Epoch 8 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021251783824277556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba5b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93325850; to 'JaxprTracer' at 0x7ffb93325ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771da590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006488707952558058
Epoch 8 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02345955183875022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02345955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c711920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c0c040; to 'JaxprTracer' at 0x7ffb93c0c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fcb7eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007143767954377504
8, epoch_train_loss=0.23398524396458514
Epoch 9
Epoch 9 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020171070321132585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02017107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba794690>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb962e660; to 'JaxprTracer' at 0x7ffbb962d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7df3e1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011112929213043703
Epoch 9 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016907152200856902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01690715, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6761a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c4868e0; to 'JaxprTracer' at 0x7ffd9c486390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf5ab780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008889681462807676
Epoch 9 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010781766500882497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01078177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1b9b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c0eb0b0; to 'JaxprTracer' at 0x7ffe3c0e9620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x776bf800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0040117993470680045
Epoch 9 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01009405116821633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01009405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56330>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7470bc40; to 'JaxprTracer' at 0x7ffd7470bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12ffedf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.007251076163178874
Epoch 9 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0174666623282085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01746666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccaf40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2107c0; to 'JaxprTracer' at 0x7ffd5c212340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20a05b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00895663344277157
Epoch 9 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02291446348130018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6f90>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4f51c0; to 'JaxprTracer' at 0x7ffbba4f5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x450296d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011607259830797911
Epoch 9 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022216122883123406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02221612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f910>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd757470; to 'JaxprTracer' at 0x7ffbbd756d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20837160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010293443020535515
Epoch 9 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022690990686019822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02269099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f9a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf451aa20; to 'JaxprTracer' at 0x7ffdf45184f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79bb1b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010978394888504689
Epoch 9 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019095252394979063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01909525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4b50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42555d0; to 'JaxprTracer' at 0x7ffdf4255260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3db74af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004058868054985676
Epoch 9 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021762265065620973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02176227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bfe10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd46be700; to 'JaxprTracer' at 0x7ffdd46bde40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a3d160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008632698208299386
Epoch 9 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01769361004168182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01769361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b500>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74741620; to 'JaxprTracer' at 0x7ffdd44b22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20b9ff40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007254848506886391
Epoch 9 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022042403994615347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30dfe0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaacdd8f0; to 'JaxprTracer' at 0x7ffba8af9990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6427800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007493153022608396
Epoch 9 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02212488779974376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa549e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb58bab0; to 'JaxprTracer' at 0x7ffbe0534b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ed3d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008335787480451728
Epoch 9 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026701728275266654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02670173, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccbd50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9924270; to 'JaxprTracer' at 0x7ffbb9926ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b15f580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011873302216983472
Epoch 9 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02264847662764015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5100>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4de430; to 'JaxprTracer' at 0x7ffbaaca5530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x390d0b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008894668733275999
Epoch 9 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021182275536741863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02118228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f3f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e36f70; to 'JaxprTracer' at 0x7ffba87e0c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x751ddef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00845620781934282
Epoch 9 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021377865006417668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02137787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779800>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938b1f80; to 'JaxprTracer' at 0x7ffb938b2340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2063d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006759802085578227
Epoch 9 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020891488879335993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02089149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a7f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd557330; to 'JaxprTracer' at 0x7ffbbd556840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65c8f5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008113862892722578
Epoch 9 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024665488671149545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02466549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc8b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafc3560; to 'JaxprTracer' at 0x7ffbbafc1990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dcae9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010330262637087882
Epoch 9 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018453995532603316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.018454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e370>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc66e6b0; to 'JaxprTracer' at 0x7ffbbc66d0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68ddc520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006555411294281896
Epoch 9 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024508873870506542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02450887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67e4b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb99a5b20; to 'JaxprTracer' at 0x7ffbb99a7ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68bc7710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011902465474997879
Epoch 9 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026658819263306932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02665882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511b20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba500130; to 'JaxprTracer' at 0x7ffbba5008b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74318c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011699657691139943
Epoch 9 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024718288920691667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02471829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25de0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a1ef70; to 'JaxprTracer' at 0x7ffbe1a1ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79761780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007807003220461365
Epoch 9 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024834880033406805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02483488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c0d9320>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c345ad0; to 'JaxprTracer' at 0x7ffd5c344270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fb83700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01061644069041153
Epoch 9 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02247099837052884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff850>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9aac00; to 'JaxprTracer' at 0x7ffbaa9aaa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5551f230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005764369467554613
Epoch 9 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020819557550117426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02081956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4ca0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc83ec0; to 'JaxprTracer' at 0x7ffd5c3fdd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c5b1400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006322791856348788
Epoch 9 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023703774793586832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92a559f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0d5e4d0; to 'JaxprTracer' at 0x7ffbe0d5e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x503a88e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0069046798400888044
9, epoch_train_loss=0.23087749856221534
Epoch 10
Epoch 10 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02206746277510195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7de0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3a19e0; to 'JaxprTracer' at 0x7ffd5c3a3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cd1f9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010792499409140661
Epoch 10 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01860080451559315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0186008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334beb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0cf100; to 'JaxprTracer' at 0x7ffd3c0cf420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64b74ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009059846909638267
Epoch 10 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011513453558902025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01151345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052cd40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb0f330; to 'JaxprTracer' at 0x7ffbabb0e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17146f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004543635502719845
Epoch 10 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010688320029333365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01068832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5bf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98f56c0; to 'JaxprTracer' at 0x7ffba98f44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75964f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006733910675660784
Epoch 10 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018128377843764035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01812838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4503bc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9e2b6a0; to 'JaxprTracer' at 0x7ffba9e2a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ee81ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008819053733327692
Epoch 10 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023330068705743497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02333007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1770>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4de0c0; to 'JaxprTracer' at 0x7ffbab4dd9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b7cac90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011387691716152431
Epoch 10 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022480844371707637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bebc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb588e50; to 'JaxprTracer' at 0x7ffbbb58a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26e37570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010412805175717337
Epoch 10 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022595153642513504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7b9da0; to 'JaxprTracer' at 0x7ffbbd7ba7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d23e770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010818567272073873
Epoch 10 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021609877903891187, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02160988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4dc40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb4ecbd0; to 'JaxprTracer' at 0x7ffbbb4ec5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19f1fb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003179775484557084
Epoch 10 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021437888012044482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02143789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409ace0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c343600; to 'JaxprTracer' at 0x7ffd5c386200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7348eb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008807723472747294
Epoch 10 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017138243208733434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01713824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334af00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa34680; to 'JaxprTracer' at 0x7ffbdfa34c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3747f3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007254374493956313
Epoch 10 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021341109327855302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779010>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c045260; to 'JaxprTracer' at 0x7ffd3c0440e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a7e8720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007991966731615861
Epoch 10 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021198778675443897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebba60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9151170; to 'JaxprTracer' at 0x7ffbb9153150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a2c030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008841085435399515
Epoch 10 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02537906191081948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02537906, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fe230>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0ba7240; to 'JaxprTracer' at 0x7ffbe0ba53f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52d8c870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011166644922516867
Epoch 10 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02199300761916459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc9250>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd468b8d0; to 'JaxprTracer' at 0x7ffdd4689210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82ac5290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008896220609007764
Epoch 10 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02076815492439145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02076815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57590>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1186ed0; to 'JaxprTracer' at 0x7ffbe11840e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34c471b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008547229860777831
Epoch 10 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02101640900264408, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02101641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ee460>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7470b4c0; to 'JaxprTracer' at 0x7ffd7470b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e10d7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006743595622603719
Epoch 10 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02083002535395696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02083003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30d900>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c353290; to 'JaxprTracer' at 0x7ffd9c352520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a14c3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008035792690165506
Epoch 10 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02428954702215178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02428955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b230>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf44f9da0; to 'JaxprTracer' at 0x7ffdf44f8ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36afd540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01002267215701065
Epoch 10 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017725942696939365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01772594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c738c20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7149a0; to 'JaxprTracer' at 0x7ffe2c121170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7de7e340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005962510688018791
Epoch 10 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02398249130972797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba797ee0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c51efc0; to 'JaxprTracer' at 0x7ffe2c51e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x631bbb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011404791341399611
Epoch 10 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026850407110296202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02685041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24990>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabae0950; to 'JaxprTracer' at 0x7ffbabae2340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x348fc0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011765295604256105
Epoch 10 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025026155817500353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02502616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22515c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd0f67a0; to 'JaxprTracer' at 0x7ffbbd0f4ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x534d91a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007955064933554573
Epoch 10 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02551350312951761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0255135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9363d320>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc5d7e20; to 'JaxprTracer' at 0x7ffbbc5d55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5052a0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010847427287605316
Epoch 10 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02311307540988919, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02311308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c240>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938d7f10; to 'JaxprTracer' at 0x7ffb938d52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b2f1e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005176358653956494
Epoch 10 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02136343701500923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6759b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c5654e0; to 'JaxprTracer' at 0x7ffd3c565350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26350aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005905769918430715
Epoch 10 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02384296211179874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02384296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a290>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcf6b7e0; to 'JaxprTracer' at 0x7ffbbcf6b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x724b7000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.00700135051119852
10, epoch_train_loss=0.2280736608132094
Epoch 11
Epoch 11 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021958983189398526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02195898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc5d7290; to 'JaxprTracer' at 0x7ffbbc5d63e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a70e590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010861795074478924
Epoch 11 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018421541466996753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01842154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6400>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c522ca0; to 'JaxprTracer' at 0x7ffd3c5225c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32368aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008619896432887275
Epoch 11 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010790401131181985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0107904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a7a7a0; to 'JaxprTracer' at 0x7ffbe1a7b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e22f290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004336531921802005
Epoch 11 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010443310798978958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01044331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a3870>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c2eee80; to 'JaxprTracer' at 0x7ffd9c2ee6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cbcd000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006996382686566129
Epoch 11 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01822723026264303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01822723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb26e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7414e200; to 'JaxprTracer' at 0x7ffd7414dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61803df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00854571840599968
Epoch 11 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02353918236853335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07edf0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93d8c040; to 'JaxprTracer' at 0x7ffb93d8f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dafe90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011536035572983475
Epoch 11 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021981617086731707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6561c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9150f90; to 'JaxprTracer' at 0x7ffbb9151df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57821a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010262026454481236
Epoch 11 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022607646268043236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc656a10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe181d4e0; to 'JaxprTracer' at 0x7ffbe181cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13517dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011020781226909967
Epoch 11 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02176964207719557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02176964, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affde0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2a0e50; to 'JaxprTracer' at 0x7ffd5c2a21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45a98f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0029742297697246973
Epoch 11 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021784813969484878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02178481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22513c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c33cdb0; to 'JaxprTracer' at 0x7ffd3c33c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45a7d000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008545850488988435
Epoch 11 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01741608105395786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01741608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795b70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c258d10; to 'JaxprTracer' at 0x7ffb92d6aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62ce58f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007110816947821864
Epoch 11 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021524365196822926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f090>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa7c5e0; to 'JaxprTracer' at 0x7ffbabbf87c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c83b110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.0077599613849592035
Epoch 11 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02126593266789519, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02126593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb350>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd46340; to 'JaxprTracer' at 0x7ffbbdd45940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x764b1e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008599812541508822
Epoch 11 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024911303059515943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5ed0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93560810; to 'JaxprTracer' at 0x7ffbabbd1df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34200c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011273861959503771
Epoch 11 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02198773323651401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198773, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b67a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9be6e30; to 'JaxprTracer' at 0x7ffba9be5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x764794c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.00873085396831806
Epoch 11 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020849134274995042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02084913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654260>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98555d0; to 'JaxprTracer' at 0x7ffba9854400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74219bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008448516861929226
Epoch 11 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021252195038371773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0212522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a340>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93895260; to 'JaxprTracer' at 0x7ffb93896930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59fd3ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006569925384014024
Epoch 11 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021219382127603235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5400>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd57830; to 'JaxprTracer' at 0x7ffbbbd57420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x439c4410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.007959334485180429
Epoch 11 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02446056597613097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02446057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4180>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8780bd0; to 'JaxprTracer' at 0x7ffba87809f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83c5d1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009910484083243605
Epoch 11 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018074149690721977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01807415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fc580>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc7bec0; to 'JaxprTracer' at 0x7ffb936062a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6428efc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005929188654955665
Epoch 11 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024041207090994506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02404121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bf7f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc883f10; to 'JaxprTracer' at 0x7ffd5c4160c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65223660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01133398952824435
Epoch 11 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026431129391165053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02643113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b4d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbff1f0; to 'JaxprTracer' at 0x7ffbbcbfcb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ab27b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011663518956270866
Epoch 11 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024561417519538723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02456142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677ef0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe34c310; to 'JaxprTracer' at 0x7ffbb9177420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73b4e670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007907267173014883
Epoch 11 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02490119214971569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02490119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe06d9350>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9091f80; to 'JaxprTracer' at 0x7ffbb99985e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46f04780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010854465840245577
Epoch 11 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022774646093115896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02277465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebb850>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc14d0d0; to 'JaxprTracer' at 0x7ffbbc0d8b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72a47070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004989819877374518
Epoch 11 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021324713333979377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02132471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457cf50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa42a430; to 'JaxprTracer' at 0x7ffbaa42a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x431e2010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005738928480177325
Epoch 11 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024381391978141397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02438139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009ac0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13c98f0; to 'JaxprTracer' at 0x7ffbe0968b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73abef90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006894886317580583
11, epoch_train_loss=0.22537488047916462
Epoch 12
Epoch 12 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022310124229583606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02231012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa949360>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb999ae80; to 'JaxprTracer' at 0x7ffbb9999bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22cc2950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010943561961901962
Epoch 12 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01878399874666257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.018784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fe770>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcea7a10; to 'JaxprTracer' at 0x7ffbbcea4b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54832230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00853417339384047
Epoch 12 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010927446715669635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01092745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf40982f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe155c090; to 'JaxprTracer' at 0x7ffbe155e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c12d2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004254285821748103
Epoch 12 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010606111955372631, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01060611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6ae10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0718540; to 'JaxprTracer' at 0x7ffbe0718630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x788d4270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006692390057777214
Epoch 12 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01751889420955699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01751889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6990>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9bb1ad0; to 'JaxprTracer' at 0x7ffbba8051c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd3bc660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008652349950680958
Epoch 12 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02262915986281582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02262916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45015e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc2b21b0; to 'JaxprTracer' at 0x7ffdbc2b31f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4acbbe20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011714081424490754
Epoch 12 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020746958111156236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02074696, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a3f90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab462930; to 'JaxprTracer' at 0x7ffbab461800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bdcede0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010275175895272562
Epoch 12 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022150718274905758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eea10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaca9df0; to 'JaxprTracer' at 0x7ffbbacaa3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63f28330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01108145900063977
Epoch 12 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021703285930025566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02170329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513220>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0d4630; to 'JaxprTracer' at 0x7ffbbb4edda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5611fe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0022874532018765043
Epoch 12 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022482570252590317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa572b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7433ade0; to 'JaxprTracer' at 0x7ffd7433aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d12ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008565551953173637
Epoch 12 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01761783728742007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01761784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4e130>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa34b80; to 'JaxprTracer' at 0x7ffbdfa35f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x270341d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006953130411516626
Epoch 12 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02174011448027035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a050>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd961120; to 'JaxprTracer' at 0x7ffbbd961d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33085970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007564265916952444
Epoch 12 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021170362250723395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02117036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311980>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcb97f10; to 'JaxprTracer' at 0x7ffbbcb96e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x400c17c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008451894727460057
Epoch 12 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024664683643400614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02466468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77b860>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc36750; to 'JaxprTracer' at 0x7ffbbcc350d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e13f6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011349794911752852
Epoch 12 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021681113418547008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3d20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93020ea0; to 'JaxprTracer' at 0x7ffb93020a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x498f1140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008738962539956235
Epoch 12 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021021741018672074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02102174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ed440>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c12bab0; to 'JaxprTracer' at 0x7ffd5c128db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x823e5780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008399433487287236
Epoch 12 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021581470957850356, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c490>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7414e0c0; to 'JaxprTracer' at 0x7ffdbc315cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76997f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006495248593259112
Epoch 12 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02199903453781669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739ba0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c350720; to 'JaxprTracer' at 0x7ffbab79ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48da4520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00806222706629424
Epoch 12 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02494706004031648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02494706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4b90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40de570; to 'JaxprTracer' at 0x7ffdf40df5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50685fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.00991236160470739
Epoch 12 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018054294631746848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01805429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc8b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c496570; to 'JaxprTracer' at 0x7ffe2c495300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cb3e530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005776750320409527
Epoch 12 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02397502990215747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e0340>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe25a570; to 'JaxprTracer' at 0x7ffdf4090720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xefcf730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01135512637336085
Epoch 12 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02604002757015994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02604003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c51c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4e44a0; to 'JaxprTracer' at 0x7ffd9c52ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x464fedc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011573551229386622
Epoch 12 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02400697427853762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc656470>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96b54e0; to 'JaxprTracer' at 0x7ffbb96b44a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x612adb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007910956909428024
Epoch 12 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024116538755852176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02411654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb93d5430>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7b33d0; to 'JaxprTracer' at 0x7ffbbd7b3e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46c24290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010701352948115446
Epoch 12 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022495027228692156, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02249503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb9660>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93904950; to 'JaxprTracer' at 0x7ffb93906bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x743a3e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005065467586579054
Epoch 12 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021204085452212935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb7c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9fe7510; to 'JaxprTracer' at 0x7ffbb9fe79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b880230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005744388290687915
Epoch 12 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02458595821916052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02458596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009e10>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5b5bc0; to 'JaxprTracer' at 0x7ffbbb5b60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62db8dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006806803471959383
12, epoch_train_loss=0.22386219905051497
Epoch 13
Epoch 13 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02227055617484985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466c3b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbef8d0; to 'JaxprTracer' at 0x7ffbbcbed2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b9e76f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010960272525672964
Epoch 13 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01922958527159483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01922959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1ac0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0743880; to 'JaxprTracer' at 0x7ffbe07411c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a0e5040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008739886429274006
Epoch 13 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011335863419887283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01133586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4610>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40fa390; to 'JaxprTracer' at 0x7ffdf40f9030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51144f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004445829059774083
Epoch 13 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011085130521013533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01108513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052ce60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46fda30; to 'JaxprTracer' at 0x7ffdf46ff470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x285de970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006512077379915261
Epoch 13 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01825985686858456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01825986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca560>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc560950; to 'JaxprTracer' at 0x7ffdbc562250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fbff200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008620370451156854
Epoch 13 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023294707577459023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02329471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d030>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c8c4a0; to 'JaxprTracer' at 0x7ffdf471d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40664740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01140129327732537
Epoch 13 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02144043224152132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02144043, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b800>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8561a30; to 'JaxprTracer' at 0x7ffba8561cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a0a83a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010282188551206002
Epoch 13 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022008133059244088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b0f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1d02930; to 'JaxprTracer' at 0x7ffbe1d016c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49c429b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01090097702129895
Epoch 13 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02086886459916965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02086886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccaf20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4256520; to 'JaxprTracer' at 0x7ffbbd963ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a6ae7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002170353534076548
Epoch 13 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021865076142282145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657220>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe351f30; to 'JaxprTracer' at 0x7ffbbe350630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6838ceb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008618630814671796
Epoch 13 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017511631760082753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01751163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afeb00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaac6e2f0; to 'JaxprTracer' at 0x7ffbaac6e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11cb7b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007026255714167283
Epoch 13 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022234550562793463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e8d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd42ab790; to 'JaxprTracer' at 0x7ffb92e10d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46134270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007879518967237714
Epoch 13 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022111175810723183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e4b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8d5530; to 'JaxprTracer' at 0x7ffbbc8d44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10326c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008662248126992105
Epoch 13 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02550796506925077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cbda0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c48dd00; to 'JaxprTracer' at 0x7ffbbc0e4f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x175ad970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011225745619365473
Epoch 13 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022233437901546794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07eb90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93a0ae0; to 'JaxprTracer' at 0x7ffbb93a1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59233f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.00873283000100975
Epoch 13 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020737757063339857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02073776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68170>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0c9ad0; to 'JaxprTracer' at 0x7ffbaa0caac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f576bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00849155509683002
Epoch 13 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02070390442260478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0207039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d5f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaace8090; to 'JaxprTracer' at 0x7ffbaace9f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x722a4e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006733436980688093
Epoch 13 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02068992860065622, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02068993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa54170>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc66f6a0; to 'JaxprTracer' at 0x7ffbbc66c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x722efcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008053346381035241
Epoch 13 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024066766817328385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa9489a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17fa890; to 'JaxprTracer' at 0x7ffbe17f8a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d8bb2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009875271115730338
Epoch 13 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01755193414475189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01755193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4098710>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c4149f0; to 'JaxprTracer' at 0x7ffd5c417ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8318350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005508702557653676
Epoch 13 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02407747211949572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02407747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313cb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3c4f40; to 'JaxprTracer' at 0x7ffbbc3c7d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x816874a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011339920992088328
Epoch 13 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02751917458920567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02751917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6748e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd46bbf0; to 'JaxprTracer' at 0x7ffbbd46afc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72505d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01170062155883623
Epoch 13 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02539814819047276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02539815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba240>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba84b0810; to 'JaxprTracer' at 0x7ffba84b2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d0e190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007822472749112533
Epoch 13 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025505891130807465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe24a14d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb52cae0; to 'JaxprTracer' at 0x7ffbbb52c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ca08e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010749505725718233
Epoch 13 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02295630349048693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73bc40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0484770; to 'JaxprTracer' at 0x7ffbe0567240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70d1fba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004918302792894776
Epoch 13 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02106627956103758, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02106628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7740>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1639a30; to 'JaxprTracer' at 0x7ffbe1639f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e0fc660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0056885447924977005
Epoch 13 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023991258247621487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02399126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009f50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c51f5b0; to 'JaxprTracer' at 0x7ffd3c51f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b88130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006859226060848724
13, epoch_train_loss=0.22391938427707803
Epoch 14
Epoch 14 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021586763278770713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8bf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb2e29d0; to 'JaxprTracer' at 0x7ffbbb2e0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85ec660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010923346788220037
Epoch 14 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01842208850368873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01842209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513340>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e60cc0; to 'JaxprTracer' at 0x7ffb93e63470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5439f7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00847644032198369
Epoch 14 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011199068687220618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01119907, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f070>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0daf70; to 'JaxprTracer' at 0x7ffbbc0db290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42f219c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004345058256086188
Epoch 14 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011024050640967665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01102405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457dc50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd53f470; to 'JaxprTracer' at 0x7ffbbd53e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b5c53a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006466967334968866
Epoch 14 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018135805132848855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01813581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf192b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9004b80; to 'JaxprTracer' at 0x7ffba9004a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47458bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008737495439129677
Epoch 14 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023058876708516883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77bbe0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5bf060; to 'JaxprTracer' at 0x7ffbbb5bda30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540d3680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011877764893318448
Epoch 14 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.018757619014851366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01875762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052dd40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87b81d0; to 'JaxprTracer' at 0x7ffba87b83b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1af41590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011340448726857766
Epoch 14 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02285810868498801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff2e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbacee700; to 'JaxprTracer' at 0x7ffbbacec9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a67170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01117465775004686
Epoch 14 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022734962638179822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f74a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92dc5f30; to 'JaxprTracer' at 0x7ffbabbfb3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7524eb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0030898650975237736
Epoch 14 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022598726268768934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250880>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc1d620; to 'JaxprTracer' at 0x7ffbbcc1ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59eff0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008407731161734875
Epoch 14 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017304959885678525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01730496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56a50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe04d9670; to 'JaxprTracer' at 0x7ffb9397d5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d72a010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006788763976386977
Epoch 14 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.020976029704778916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02097603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a640>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaf88180; to 'JaxprTracer' at 0x7ffbaaf89e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b91120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007563607440416423
Epoch 14 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02058601611079871, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02058602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be580>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa406ed0; to 'JaxprTracer' at 0x7ffbaa4048b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2630b9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008517947856255885
Epoch 14 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024446746149090145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02444675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07eed0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb815170; to 'JaxprTracer' at 0x7ffbbb8176f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aefd700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011511681840149855
Epoch 14 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02220718889349448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0760>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba555bc0; to 'JaxprTracer' at 0x7ffbba554db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x859b5060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008665854047522622
Epoch 14 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021870363637371857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff690>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7f4f40; to 'JaxprTracer' at 0x7ffd3c7f79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8322fa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008427427955839893
Epoch 14 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022131616403430344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e100>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc314720; to 'JaxprTracer' at 0x7ffdd4688770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d0e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006654403262814755
Epoch 14 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022093353749757984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc720>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7470a070; to 'JaxprTracer' at 0x7ffbba4fb4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4827d7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00819371217991451
Epoch 14 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024374323440319656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02437432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657000>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46fc900; to 'JaxprTracer' at 0x7ffdf46fe160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55fcf5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.00985559549650578
Epoch 14 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017717603004843718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0177176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccab70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74671d00; to 'JaxprTracer' at 0x7ffd74671b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x673f8790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006084005805993502
Epoch 14 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023864729618967934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02386473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f50f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4d530; to 'JaxprTracer' at 0x7ffbe1a4e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f826640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011710383674319771
Epoch 14 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025706996939171462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.025707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6ae40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44cd080; to 'JaxprTracer' at 0x7ffdd44ce0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a09e020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011587837560468047
Epoch 14 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02403149851594897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cbc10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe147d9e0; to 'JaxprTracer' at 0x7ffbe147ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62cc92f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007893779214732567
Epoch 14 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02506995726693263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02506996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c3014d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98c4950; to 'JaxprTracer' at 0x7ffba98c58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be406c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010876146638179436
Epoch 14 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023015384109221004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301538, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa949c60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdf5fec0; to 'JaxprTracer' at 0x7ffbbdf5e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b8a5470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005087650900834298
Epoch 14 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02177303994115282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bc970>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9cbeb10; to 'JaxprTracer' at 0x7ffbb9cbe980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e8b0920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005950967323117494
Epoch 14 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02465227701681632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02465228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27c90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1789a0; to 'JaxprTracer' at 0x7ffd5c179030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83768460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006815013276914512
14, epoch_train_loss=0.2270245542202365
Epoch 15
Epoch 15 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02288840869335904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02288841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bc4e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbed170; to 'JaxprTracer' at 0x7ffbbcbef3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1da2c050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010887832964257464
Epoch 15 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018482467729505774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01848247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c9630>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb76fc0; to 'JaxprTracer' at 0x7ffbabb75080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cfce7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00898593378281085
Epoch 15 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01162349826590789, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0116235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6546d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c503d30; to 'JaxprTracer' at 0x7ffbe1a4c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65ffbed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004627951505041252
Epoch 15 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010938689111776879, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01093869, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fc320>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb935d4540; to 'JaxprTracer' at 0x7ffb935d76f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x206bd5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006706839988125071
Epoch 15 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01773025353773682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01773025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d2a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd743d5710; to 'JaxprTracer' at 0x7ffd74524770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c76470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008807153989027072
Epoch 15 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022561981695433282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02256198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ac30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c08b290; to 'JaxprTracer' at 0x7ffd3c089800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x728d7f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011699511489942646
Epoch 15 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022494904503159444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf188d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8db4130; to 'JaxprTracer' at 0x7ffba8db7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52399ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010439995008024764
Epoch 15 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022845407468770913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1a2b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d0ec50; to 'JaxprTracer' at 0x7ffba8d0fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b40db10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010825729337783996
Epoch 15 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02160855363870168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02160855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b850>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a0950; to 'JaxprTracer' at 0x7ffbbc0a0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf0fc5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0018450924313308371
Epoch 15 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022050030910300528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02205003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7953e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe351ee0; to 'JaxprTracer' at 0x7ffe3c25bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b4ccdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008903797304853689
Epoch 15 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016746623464330004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01674662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c7391d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaac6ec00; to 'JaxprTracer' at 0x7ffbaac6fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ff92160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006964339309437008
Epoch 15 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.020775208757194324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02077521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1ca0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24f03b0; to 'JaxprTracer' at 0x7ffbe24f2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3890ad90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007892176968596759
Epoch 15 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02062901944907181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02062902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff830>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd0f0310; to 'JaxprTracer' at 0x7ffbbd0f05e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a40ad80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008743284129425525
Epoch 15 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02461284224206666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02461284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e300>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15cb880; to 'JaxprTracer' at 0x7ffbe207f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3928f040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01138090046949807
Epoch 15 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021791889078888172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778d40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c0586d0; to 'JaxprTracer' at 0x7ffe2c05ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x704035d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008832365071819503
Epoch 15 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02127106468160499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02127106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1b710>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc2b0950; to 'JaxprTracer' at 0x7ffdbc2b20c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7788bfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00853474785893381
Epoch 15 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021820424044776774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02182042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457dfd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4b7830; to 'JaxprTracer' at 0x7ffba936cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b2c6be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.00668671236579756
Epoch 15 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02193657918810525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466d890>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa88180; to 'JaxprTracer' at 0x7ffbbbd5c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e92f170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008282702567361256
Epoch 15 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024848033443728275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02484803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57a30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa065c0; to 'JaxprTracer' at 0x7ffbbaa076f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b51a0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009963001236384354
Epoch 15 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01813508089913846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01813508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c312360>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c358400; to 'JaxprTracer' at 0x7ffdf4090c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b26abd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006103287339215076
Epoch 15 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02440297561364806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02440298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250bd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4316d40; to 'JaxprTracer' at 0x7ffdd4317fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32d57070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011738416464928635
Epoch 15 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026226338352546737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02622634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8f10>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0cfc720; to 'JaxprTracer' at 0x7ffbab799120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xee6caf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01158113072225065
Epoch 15 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024084212510175226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bd320>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8545940; to 'JaxprTracer' at 0x7ffba85449a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ed0ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007921807089595384
Epoch 15 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024948077056456016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02494808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22414f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c35d7b0; to 'JaxprTracer' at 0x7ffc6c35f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x625f2990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010785470981058287
Epoch 15 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02250923799160595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b930>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c24eca0; to 'JaxprTracer' at 0x7ffd5c24ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58d7f300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005219292293664723
Epoch 15 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02133001939802235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409af50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb4f4860; to 'JaxprTracer' at 0x7ffbbb4f46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b8b8c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0058868777095081055
Epoch 15 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024616743398454436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02461674, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4fe10>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc37ad40; to 'JaxprTracer' at 0x7ffbbc37abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d4c4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0067821447169611766
15, epoch_train_loss=0.22702849509563353
Epoch 16
Epoch 16 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023474006904163427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02347401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afd720>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c36c00; to 'JaxprTracer' at 0x7ffbe1c37290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e9ce20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010847209439828816
Epoch 16 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01890262026283735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01890262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510540>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9998270; to 'JaxprTracer' at 0x7ffbaacc3010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7559c2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008993732645981864
Epoch 16 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011143820771985424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01114382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334bac0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa8df290; to 'JaxprTracer' at 0x7ffbaa8dd5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24989ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004159706948073808
Epoch 16 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011291016490046853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01129102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bdfa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd5553a0; to 'JaxprTracer' at 0x7ffbbd557b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83b18f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006239085933642232
Epoch 16 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017641745353904798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01764175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45021b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98f66b0; to 'JaxprTracer' at 0x7ffbaace9f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x370a21c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00883251409030674
Epoch 16 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022930127060504495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02293013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a1d10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa076d40; to 'JaxprTracer' at 0x7ffbaa077f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22d2b420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011448986123913029
Epoch 16 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022637575098053822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930590a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb934e390; to 'JaxprTracer' at 0x7ffbb934f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x344e9500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010373730354411812
Epoch 16 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022865186079006748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059fb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa7d260; to 'JaxprTracer' at 0x7ffbbaa7d8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x464c3270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010735304753681691
Epoch 16 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022561412695471465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02256141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24c50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9baa4d0; to 'JaxprTracer' at 0x7ffbe24f0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3185aea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003062258251347083
Epoch 16 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0223140492363028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02231405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f71c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44fb920; to 'JaxprTracer' at 0x7ffba8b47bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61295fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008867311153570978
Epoch 16 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017125452291839767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01712545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512f40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd46bf3d0; to 'JaxprTracer' at 0x7ffbe1c7c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c03bb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007036982581202178
Epoch 16 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021046852339735155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02104685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c2a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a3290; to 'JaxprTracer' at 0x7ffbbc0a2070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7056d5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007883009608965753
Epoch 16 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020337279058926676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02033728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7310>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdf5eed0; to 'JaxprTracer' at 0x7ffbbdf5e3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6033f8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008875299501264831
Epoch 16 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024098888461139237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02409889, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779cc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8db53f0; to 'JaxprTracer' at 0x7ffba8db7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f419e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011403634095261312
Epoch 16 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021038022925424203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02103802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c640>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba7992b0; to 'JaxprTracer' at 0x7ffbba79ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x813e30f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008925827108339788
Epoch 16 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020983073536903846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02098307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd7e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92db4630; to 'JaxprTracer' at 0x7ffb92db7510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b4136d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008507077059699511
Epoch 16 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022023219978621028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02202322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30eaf0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6caf70; to 'JaxprTracer' at 0x7ffdbc6c9080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52031510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006663223017581681
Epoch 16 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021914755906471038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73b460>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd746d4090; to 'JaxprTracer' at 0x7ffd746d6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5938ab30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.0081972518616596
Epoch 16 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02537934938627428, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02537935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba794620>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd472f1f0; to 'JaxprTracer' at 0x7ffe2c4bc770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x581b2f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010009375069381553
Epoch 16 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01850705902432985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01850706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6010>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c122c50; to 'JaxprTracer' at 0x7ffe2c121440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6542cc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006043492887743073
Epoch 16 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024234817723306247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677bf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf44f8db0; to 'JaxprTracer' at 0x7ffdf44f82c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x552d4d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011550525789766097
Epoch 16 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026210882252732038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02621088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacca2f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c520720; to 'JaxprTracer' at 0x7ffd3c522200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81dc1880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011744756307804666
Epoch 16 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023897682216530124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69760>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4489e90; to 'JaxprTracer' at 0x7ffdf448a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cf999f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008008717416934453
Epoch 16 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024416228778298344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93931560>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0564a90; to 'JaxprTracer' at 0x7ffbe0566750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e3eaf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010841355957857764
Epoch 16 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022470058446667898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec130>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbcb510; to 'JaxprTracer' at 0x7ffbbcbcae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86c1de10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.0050845953060403275
Epoch 16 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021561887640552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02156189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bcd40>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e4f600; to 'JaxprTracer' at 0x7ffb93e4d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bfa6a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005832088496354581
Epoch 16 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.025310010861879163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02531001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6100>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaef2b60; to 'JaxprTracer' at 0x7ffbaaef3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64c19040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007050046395475465
16, epoch_train_loss=0.22721709815609067
Epoch 17
Epoch 17 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.024196224872199912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02419622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ee270>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a03dd0; to 'JaxprTracer' at 0x7ffbe1a020c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45015f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011176528250017876
Epoch 17 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01867004724718806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01867005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a3c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b92b0; to 'JaxprTracer' at 0x7ffbe15bb740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3035bf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00878332099013206
Epoch 17 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010617254650364838, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01061725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7949b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7458da30; to 'JaxprTracer' at 0x7ffd7458cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39a94120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004278719164792774
Epoch 17 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010613071921376999, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01061307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ffd20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf446ac00; to 'JaxprTracer' at 0x7ffdf44695d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x653a46a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.0061553705112484
Epoch 17 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017944045321529583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01794405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305ac70>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c707010; to 'JaxprTracer' at 0x7ffe2c704c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x309b36e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008925640336565297
Epoch 17 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023858908918337415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0a80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab1eb100; to 'JaxprTracer' at 0x7ffbab1e98f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8072a250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011492517105262952
Epoch 17 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022616403009383255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502900>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1587600; to 'JaxprTracer' at 0x7ffc6c399c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x14db2af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010649593090913883
Epoch 17 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022680683693521404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502030>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe096ad90; to 'JaxprTracer' at 0x7ffbe096a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4efa6c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011115738174601698
Epoch 17 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021466667869502295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4ce30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0737f10; to 'JaxprTracer' at 0x7ffdd44b36f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5984db70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0030760307172444865
Epoch 17 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02222146823213945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02222147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19b20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaac6d710; to 'JaxprTracer' at 0x7ffbaac6f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54f04bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00876895115591
Epoch 17 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017426672557233635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01742667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc676a40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd45ee0; to 'JaxprTracer' at 0x7ffbbdd46b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc1aaf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007281870314180094
Epoch 17 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02196837123592612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cb610>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbacecae0; to 'JaxprTracer' at 0x7ffbbacefa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6358c7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00789554316239751
Epoch 17 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021618961997264718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc8a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b1940; to 'JaxprTracer' at 0x7ffd3c0b1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c7b330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.0089165497795612
Epoch 17 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025208445253930987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02520845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052ef10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938b1300; to 'JaxprTracer' at 0x7ffb938b3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x202e70c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011226622444860238
Epoch 17 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02137786020124382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02137786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a0d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5bf060; to 'JaxprTracer' at 0x7ffbbb5bdcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55e15190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009121982162613902
Epoch 17 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02019990675304394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02019991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496bb70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87e19e0; to 'JaxprTracer' at 0x7ffba87e1d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x743b7610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008822827111505276
Epoch 17 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.020537942461970275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02053794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f960>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90077e0; to 'JaxprTracer' at 0x7ffba9004c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71037f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006988983761761039
Epoch 17 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020229753911795486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02022975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f7f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb0e520; to 'JaxprTracer' at 0x7ffbabb0fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x654c45e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008199946225259519
Epoch 17 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024136653253369278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02413665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4fd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe250f560; to 'JaxprTracer' at 0x7ffbe250dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x638533d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.00960159622725511
Epoch 17 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018121544160590152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01812154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253290>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8e2610; to 'JaxprTracer' at 0x7ffbbc8e16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a7cc950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005719994586778335
Epoch 17 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02410270200935171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0241027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7e90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc80e00; to 'JaxprTracer' at 0x7ffbbcc80860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52d685d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011327830638589357
Epoch 17 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027320873076471682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02732087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6beae0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c13f4c0; to 'JaxprTracer' at 0x7ffd3c13cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74b65e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011377119054017237
Epoch 17 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02574516956200245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02574517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739700>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c332570; to 'JaxprTracer' at 0x7ffd3c4d3ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48356fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00772656507419162
Epoch 17 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025323660682372108, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02532366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb935a5580>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0764090; to 'JaxprTracer' at 0x7ffbe0767240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c4a2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010688514828889857
Epoch 17 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023867868238833738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02386787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacca300>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e24a90; to 'JaxprTracer' at 0x7ffb93e26980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b755110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004773278884296222
Epoch 17 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02156687861584903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02156688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba7c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92ac7510; to 'JaxprTracer' at 0x7ffb92ac7380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58421890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005740790193877014
Epoch 17 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024413538901160214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511980>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbe08b0; to 'JaxprTracer' at 0x7ffbbb064b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7add1520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0068073107014453025
17, epoch_train_loss=0.22663973464816825
Epoch 18
Epoch 18 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022372017345588347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02237202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c312770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafc76f0; to 'JaxprTracer' at 0x7ffbbafc6660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e63be70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010886976620385297
Epoch 18 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018299902553613287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0182999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73b550>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb1b010; to 'JaxprTracer' at 0x7ffbbbb1b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x619eb4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008810687154522122
Epoch 18 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010817690780498015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01081769, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56220>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe26bacf0; to 'JaxprTracer' at 0x7ffbe26bac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6203c400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.00444398667241031
Epoch 18 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011091858414448161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01109186, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07e6b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcb91c0; to 'JaxprTracer' at 0x7ffbbdcb9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e39a420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006216319014872471
Epoch 18 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018758416438351088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01875842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4503110>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe048c6d0; to 'JaxprTracer' at 0x7ffbe048cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f06e6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008634467548241674
Epoch 18 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024311897443126194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0243119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2960>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c2bf650; to 'JaxprTracer' at 0x7ffd3c2bc860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64277390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011400438228586001
Epoch 18 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022381715068647844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059aa0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c178c20; to 'JaxprTracer' at 0x7ffd5c1799e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fcf8a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010269133620011802
Epoch 18 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022747243442938832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02274724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305aa30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c1127f0; to 'JaxprTracer' at 0x7ffd9c113b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40656e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011118672751031303
Epoch 18 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02096508488189128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02096508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b300>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92e13600; to 'JaxprTracer' at 0x7ffb92e13880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b1e7cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.001898828157163717
Epoch 18 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02203151263263335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02203151, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8ca0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7a4c70; to 'JaxprTracer' at 0x7ffbab7a6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cca97d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00842664897857739
Epoch 18 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017733319046353682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01773332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be760>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbda25800; to 'JaxprTracer' at 0x7ffbbda25030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72cf31e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007291483203022089
Epoch 18 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022012927109993672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4160>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1481350; to 'JaxprTracer' at 0x7ffbe1483600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47389bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.0076522414106811425
Epoch 18 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021634464618638032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5680>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8d7380; to 'JaxprTracer' at 0x7ffbbc8d6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ec0ac40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008533065990773537
Epoch 18 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025638674493023084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02563867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778130>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c398b80; to 'JaxprTracer' at 0x7ffc6c398860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36785e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011069476184934384
Epoch 18 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021674384590316904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02167438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052cca0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba50f600; to 'JaxprTracer' at 0x7ffbba50ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d8d0ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008721659624493592
Epoch 18 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020580159282397634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02058016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058690>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c67ca90; to 'JaxprTracer' at 0x7ffb9336f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b44a980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008462579798972933
Epoch 18 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02126109030198691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02126109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ecc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc315a30; to 'JaxprTracer' at 0x7ffdbc316020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d554340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0065098294798690585
Epoch 18 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021115297311948715, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0211153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e29d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc34f510; to 'JaxprTracer' at 0x7ffdbc34ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11ca7c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.007974197169206079
Epoch 18 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024996285616867068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02499629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c93b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c1211c0; to 'JaxprTracer' at 0x7ffe2c120270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38ab4a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009688047900336751
Epoch 18 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01856453517925124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01856454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009220>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd744d7c40; to 'JaxprTracer' at 0x7ffd744d5170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf50f660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005895235327809677
Epoch 18 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023958921288895898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19990>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20616c0; to 'JaxprTracer' at 0x7ffbe2061120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dcd3150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011193787125435718
Epoch 18 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027111417920265425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02711142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4f7e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab2031a0; to 'JaxprTracer' at 0x7ffbab200040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x479c770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01150290754050863
Epoch 18 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02522425678633771, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02522426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466e9b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98958a0; to 'JaxprTracer' at 0x7ffba9897100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x460af540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007632191484847015
Epoch 18 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024689652639229204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02468965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba907d610>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd151760; to 'JaxprTracer' at 0x7ffbbd153a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e61d5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01067799694017773
Epoch 18 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0230005936309238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02300059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bd010>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe22e5ad0; to 'JaxprTracer' at 0x7ffbe22e62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xee3a4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.0048188067294681666
Epoch 18 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021170020929635665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02117002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250ea0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc355e90; to 'JaxprTracer' at 0x7ffd3c303060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a23f270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0057664090786175085
Epoch 18 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024432479939459146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02443248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb9150>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d46840; to 'JaxprTracer' at 0x7ffba8d467a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5622dc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006747634715449727
18, epoch_train_loss=0.22224370845040586
Epoch 19
Epoch 19 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02205534589659832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02205535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c70e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c128630; to 'JaxprTracer' at 0x7ffd9c52f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55f81c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010855254308247107
Epoch 19 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018175060761017946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01817506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466c7c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3adbc0; to 'JaxprTracer' at 0x7ffbbc3ac950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35a08b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008688043264630583
Epoch 19 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010943606523751617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01094361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe00097f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc495800; to 'JaxprTracer' at 0x7ffc6c12b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53162790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004109109119716621
Epoch 19 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0112500502334872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01125005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f080>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c275260; to 'JaxprTracer' at 0x7ffe3c276a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38b18c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006156765231169024
Epoch 19 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018546174297290927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01854617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6340>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f37330; to 'JaxprTracer' at 0x7ffdd44776a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4010cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008559768909481473
Epoch 19 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023386494670369833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02338649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052de90>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8a81cb0; to 'JaxprTracer' at 0x7ffba8a81440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aa0a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011504402905673353
Epoch 19 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02209641974042188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a2b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93d99080; to 'JaxprTracer' at 0x7ffb93d9aca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6532d960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010429300734222647
Epoch 19 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022062111410666697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ad50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd46ad90; to 'JaxprTracer' at 0x7ffbbd469d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64a52e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011039326365015877
Epoch 19 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021503859536208113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba796cc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6e62a0; to 'JaxprTracer' at 0x7ffdbc6e6110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f2b5f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002123426151283702
Epoch 19 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021915408926147056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68a50>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74741080; to 'JaxprTracer' at 0x7ffd74741cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c31e730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008352050957512477
Epoch 19 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017682604730923875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0176826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eec80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8afa750; to 'JaxprTracer' at 0x7ffbab7a79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32b86ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00711987312986289
Epoch 19 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02198124860495362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30d5d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92dc53f0; to 'JaxprTracer' at 0x7ffb92dc7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cfc6de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007549411145716196
Epoch 19 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02174931214001803, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affda0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0f98f0; to 'JaxprTracer' at 0x7ffbaa0fa520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c0e05e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.00842584663596814
Epoch 19 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025850908162289916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02585091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5fb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba92df1f0; to 'JaxprTracer' at 0x7ffba92df240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44bf7200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01109245511625338
Epoch 19 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02211752969969613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefca40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c730130; to 'JaxprTracer' at 0x7ffd3c730b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11b7a640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008721675766736435
Epoch 19 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021006832741572147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02100683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3910>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad239c0; to 'JaxprTracer' at 0x7ffb930788b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d7bb480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008402743982558853
Epoch 19 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021635511469966312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4500570>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba9a71a0; to 'JaxprTracer' at 0x7ffbab4b7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d794570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006438914182610118
Epoch 19 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021526833556144667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94aeb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9408db0; to 'JaxprTracer' at 0x7ffba989c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55237ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.007983257016657658
Epoch 19 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025188261424557313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02518826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d9f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa95b100; to 'JaxprTracer' at 0x7ffbbdcb8c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5520aab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009735651935736146
Epoch 19 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018227941258478125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01822794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c350>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8e2980; to 'JaxprTracer' at 0x7ffbbc8e0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77e262b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005373681264751064
Epoch 19 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02367646551928485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe246e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab724a90; to 'JaxprTracer' at 0x7ffbab727380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81647e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011044098285549744
Epoch 19 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026607708887810295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02660771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6555b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcf0f240; to 'JaxprTracer' at 0x7ffbbcf0fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfb5b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011436554751670255
Epoch 19 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02461240907167116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02461241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8c90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c35c10; to 'JaxprTracer' at 0x7ffbe1c36430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b0f8f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00760417913078333
Epoch 19 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024104159822820843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02410416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba995770>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa47f380; to 'JaxprTracer' at 0x7ffbaa47f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fc97640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010556670008896471
Epoch 19 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02297322638772244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02297323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4f5e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d440e0; to 'JaxprTracer' at 0x7ffbe091d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9697650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004909453038970604
Epoch 19 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021355896166872855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bd2b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1d9c60; to 'JaxprTracer' at 0x7ffd5c1da2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6495f460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005696037955567696
Epoch 19 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02474051667181248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02474052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c8da0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5c0810; to 'JaxprTracer' at 0x7ffbbb5c0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d1a3730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006666018344158402
19, epoch_train_loss=0.2205739696394003
Epoch 20
Epoch 20 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021677060681856628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02167706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251640>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa438e00; to 'JaxprTracer' at 0x7ffbaa4392b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29c92010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011061897095755087
Epoch 20 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017629946236017168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01762995, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c738c50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbacd7dd0; to 'JaxprTracer' at 0x7ffbbacd7470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37924950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008557448621199032
Epoch 20 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011139028149207928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01113903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d500>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c0bb920; to 'JaxprTracer' at 0x7ffe3c0b8a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x254e40a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004052226288655329
Epoch 20 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011794921208101342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01179492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502ac0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dbfb50; to 'JaxprTracer' at 0x7ffbbd5561b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fb771a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.005636092539910826
Epoch 20 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017853894944396993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01785389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fafc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93356980; to 'JaxprTracer' at 0x7ffb933553f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x301098d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008582980247488322
Epoch 20 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023278875359263835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02327888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0050>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5bee30; to 'JaxprTracer' at 0x7ffbe214d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x705d7fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011482806054108239
Epoch 20 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02190491911934731, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930590e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa7e160; to 'JaxprTracer' at 0x7ffbbaa7e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x644470c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01042681892480433
Epoch 20 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022067218177326008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305b690>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c112480; to 'JaxprTracer' at 0x7ffd9c110fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a17be00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011084690597367136
Epoch 20 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021730997511597152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c504c10>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93bdbfb0; to 'JaxprTracer' at 0x7ffbab7a7c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78634bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0021851984041275285
Epoch 20 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02231229537421272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0223123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc150>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c6bde90; to 'JaxprTracer' at 0x7ffd9c6bd620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4df42410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008368384092192597
Epoch 20 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017253998610344247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.017254, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24820>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd472c270; to 'JaxprTracer' at 0x7ffdd472c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x520d5ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006724209325997924
Epoch 20 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02201253608528231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201254, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07db30>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbc9f80; to 'JaxprTracer' at 0x7ffbbcbc8e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82a91710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007375612040704425
Epoch 20 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02174033292992552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb01f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0767c40; to 'JaxprTracer' at 0x7ffbbc8f9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33528f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008296297263340397
Epoch 20 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0257680310595527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02576803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd7799a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7fe390; to 'JaxprTracer' at 0x7ffbab7fe750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d424a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011214426244457645
Epoch 20 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022129193364728957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052fb80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c35f80; to 'JaxprTracer' at 0x7ffbbcbd84f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d44dce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008650517614726608
Epoch 20 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021277783334546767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02127778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305aea0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd754bd0; to 'JaxprTracer' at 0x7ffbbd756250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60ca4250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008333514143436502
Epoch 20 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021793275198347384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02179328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affd40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09d3060; to 'JaxprTracer' at 0x7ffbe09d2e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be73d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006330371211082785
Epoch 20 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02154664592940114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02154665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cc90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4689da0; to 'JaxprTracer' at 0x7ffdd4689260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64e58890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.007940857741985512
Epoch 20 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02510972427553769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e170>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c354950; to 'JaxprTracer' at 0x7ffe3c357880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4399d130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009823396792081844
Epoch 20 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017235906416801196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01723591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec2b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c479080; to 'JaxprTracer' at 0x7ffe2c479c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x655a5f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.004436351950360025
Epoch 20 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0217053030297704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18260>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2061d00; to 'JaxprTracer' at 0x7ffbe2060310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fe589e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010572648512943912
Epoch 20 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026653590552642208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02665359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b8d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46b35b0; to 'JaxprTracer' at 0x7ffd9c4f52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72b5d390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01142549893997843
Epoch 20 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024685245724968382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02468525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c53a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe05659e0; to 'JaxprTracer' at 0x7ffbe0567740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43673f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007586709172443023
Epoch 20 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02349718662963244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02349719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f65770>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe22e6390; to 'JaxprTracer' at 0x7ffbe22e6480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70827710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010846150673987694
Epoch 20 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023311562459607273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02331156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bedd0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb99d38d0; to 'JaxprTracer' at 0x7ffbb99d3d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a523530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004680743516663857
Epoch 20 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02175062272419633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebb850>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1cc6e80; to 'JaxprTracer' at 0x7ffbe1cc6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85d43360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005691632997506269
Epoch 20 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.025132505008098632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02513251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fcad0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7712b0; to 'JaxprTracer' at 0x7ffbab770e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55d06f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006725030053013881
20, epoch_train_loss=0.2180925110603192
Epoch 21
Epoch 21 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02183289379893016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02183289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334beb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c2eebb0; to 'JaxprTracer' at 0x7ffd9c2ecfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33bd3c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01102116047377903
Epoch 21 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018146799739663277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0181468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc656250>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0741bc0; to 'JaxprTracer' at 0x7ffbe0742520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46f727f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008587130878920053
Epoch 21 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010910220279493956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01091022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7cd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c41b1f0; to 'JaxprTracer' at 0x7ffd5c418450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x304fe600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004288262860556749
Epoch 21 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01198532955386774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01198533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67dfe0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc562e80; to 'JaxprTracer' at 0x7ffdbc5612b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69b8a6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.005600587672137778
Epoch 21 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018470019927292074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01847002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4e90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd433c630; to 'JaxprTracer' at 0x7ffbbcc35940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20ab01a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00881358212228282
Epoch 21 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02350667942636127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02350668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305bf60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c06aed0; to 'JaxprTracer' at 0x7ffbbd497470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49afe850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01143014830478389
Epoch 21 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022048060631527328, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02204806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0960>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c40ea0; to 'JaxprTracer' at 0x7ffbe07658a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d4e5e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010480723422341754
Epoch 21 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02251477959745053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0e70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c128860; to 'JaxprTracer' at 0x7ffc6c12aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x371ffe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010915729677447271
Epoch 21 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02128230557013814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb1c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1d00180; to 'JaxprTracer' at 0x7ffbe1d029d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x613bc330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0014937789718350281
Epoch 21 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022445605141406002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02244561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc674df0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbda26250; to 'JaxprTracer' at 0x7ffdd44b16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d78fed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008551276864448818
Epoch 21 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017292401581115134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0172924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5780>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c319e90; to 'JaxprTracer' at 0x7ffd9c6bd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d771710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006657847077165832
Epoch 21 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02164353163182875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02164353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6bec0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4123560; to 'JaxprTracer' at 0x7ffbbb2a9b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62786480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00759886807162571
Epoch 21 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02147217785524123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02147218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313620>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4619e0; to 'JaxprTracer' at 0x7ffbbaa7f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79a6c260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008475565199493567
Epoch 21 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025705601212798277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0257056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e083c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc10c950; to 'JaxprTracer' at 0x7ffbbc10f880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77af3d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01112293303833709
Epoch 21 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02190864387735974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052f3a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c2bee30; to 'JaxprTracer' at 0x7ffd3c2bca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78cba110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008763167104813698
Epoch 21 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02103343810818239, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02103344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a630>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9aa610; to 'JaxprTracer' at 0x7ffbaa9aacf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a6ae510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00848230533054749
Epoch 21 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02135697135420193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefe840>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93355a80; to 'JaxprTracer' at 0x7ffb933553f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56698180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006609440245286692
Epoch 21 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021348344722066672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb10c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb940af20; to 'JaxprTracer' at 0x7ffbb94084a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dcf1340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008047675868132733
Epoch 21 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02498684767691593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02498685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5121b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba936c0e0; to 'JaxprTracer' at 0x7ffba936fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b1b9490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009771717444426625
Epoch 21 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017816828463723997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01781683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5370>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa8e8f40; to 'JaxprTracer' at 0x7ffbaa8ea2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58e13720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005054796642899804
Epoch 21 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023320136334724042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02332014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa9487e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe18083b0; to 'JaxprTracer' at 0x7ffbe180b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x762321a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010874745655603365
Epoch 21 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026670960846537806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02667096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457ecf0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8876f0; to 'JaxprTracer' at 0x7ffbbc884310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73571930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011269593784460451
Epoch 21 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024572328664081104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02457233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253c00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d2020; to 'JaxprTracer' at 0x7ffbb96d22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f93bc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007641061660086356
Epoch 21 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023355559118026288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02335556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c659780>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c4b1c60; to 'JaxprTracer' at 0x7ffc6c4b1990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1df79530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010642920106313361
Epoch 21 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023070063637335773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bda50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9572840; to 'JaxprTracer' at 0x7ffba9571440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67785760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004812275741044903
Epoch 21 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02145399781204875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73aae0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0dd4810; to 'JaxprTracer' at 0x7ffbabb21850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ae880f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005797236772382675
Epoch 21 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024654772947730667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02465477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409b900>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaafd70b0; to 'JaxprTracer' at 0x7ffbaafd6f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fdb0ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006733001415367204
21, epoch_train_loss=0.2195375324065208
Epoch 22
Epoch 22 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0217106017471441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe264f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd81d3f0; to 'JaxprTracer' at 0x7ffbbd81fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f773610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011054808314269055
Epoch 22 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01753674257543813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01753674, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e800>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4084c20; to 'JaxprTracer' at 0x7ffdd4084360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f09e100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008773215331044375
Epoch 22 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011214034851929934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01121403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ce40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba528090; to 'JaxprTracer' at 0x7ffbba5295d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x303c19a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004032868845329058
Epoch 22 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011475752952279351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01147575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0bf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba806c00; to 'JaxprTracer' at 0x7ffbba8057b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x345909b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.0055260217283986625
Epoch 22 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01921550006280981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0192155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb2a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93a0f90; to 'JaxprTracer' at 0x7ffbb93a3f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ef02e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00875177663932158
Epoch 22 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024454950502735395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02445495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c6490>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc1e160; to 'JaxprTracer' at 0x7ffbbcc1e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc19c4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011433451785150981
Epoch 22 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022576841296673537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57c70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93560040; to 'JaxprTracer' at 0x7ffb93563380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x672cc650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010571730355055233
Epoch 22 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022519759154392246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa576f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9baa3e0; to 'JaxprTracer' at 0x7ffba9ba9080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e9fb490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011060462713889146
Epoch 22 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020180000083204527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fe220>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba932e4d0; to 'JaxprTracer' at 0x7ffbaaf43010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e359900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.001881778380859113
Epoch 22 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022847315305851837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca270>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaac6f0b0; to 'JaxprTracer' at 0x7ffbaac6fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53f32c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008528597919600705
Epoch 22 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.018430580194429138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01843058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bf610>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad86980; to 'JaxprTracer' at 0x7ffbb9c20e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53e27d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007016387224049517
Epoch 22 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022850922494385743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02285092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07db90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd960a40; to 'JaxprTracer' at 0x7ffbbd9625c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70d23500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007628944066344358
Epoch 22 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022345259045289466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefca70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8b162f0; to 'JaxprTracer' at 0x7ffbbce86610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54b6bc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008389231909173914
Epoch 22 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026429702177862297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0264297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2110>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8d7290; to 'JaxprTracer' at 0x7ffbbc8d5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d71d110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011142204264837644
Epoch 22 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021805173709129506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02180517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c7600>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe06e0270; to 'JaxprTracer' at 0x7ffbe1a54d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cfe75b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008813202336899457
Epoch 22 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020405050040665437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa54370>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c12bd80; to 'JaxprTracer' at 0x7ffd5c12b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x856ebbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008609919132703323
Epoch 22 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02095847274301472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02095847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310190>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c67d170; to 'JaxprTracer' at 0x7ffc6c67c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5be635d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006741324151676139
Epoch 22 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020699240571108977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02069924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c850>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c68f010; to 'JaxprTracer' at 0x7ffd3c7d59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8347bb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008119984408849978
Epoch 22 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025043767128697155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02504377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e34d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c2b5cb0; to 'JaxprTracer' at 0x7ffd9c2b4720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d758680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009764288328545975
Epoch 22 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018462096290420858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0184621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466fef0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c540180; to 'JaxprTracer' at 0x7ffe2c542430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79b917a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005166791934609248
Epoch 22 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02365036813446793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02365037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657370>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb996c400; to 'JaxprTracer' at 0x7ffbb996ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60142f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010936493417880491
Epoch 22 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02724406590655287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02724407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4fb00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c4fbf60; to 'JaxprTracer' at 0x7ffc6c4fab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x14e03d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011285171755696495
Epoch 22 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024698861700271236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02469886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a3f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4063e70; to 'JaxprTracer' at 0x7ffdf4062070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47e38dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007544996474045861
Epoch 22 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02415445323858924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbdc81780>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c703ba0; to 'JaxprTracer' at 0x7ffd3c701d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a6fd610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010606197019464228
Epoch 22 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021933134218695367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a870>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab487ec0; to 'JaxprTracer' at 0x7ffbab486070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34dbfe80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005398602474853679
Epoch 22 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020435064392694796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02043506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c504c70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9224d0; to 'JaxprTracer' at 0x7ffbaa922340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7998f700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006062822219040708
Epoch 22 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02432429375989854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02432429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb9300>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff78720; to 'JaxprTracer' at 0x7ffdbc6e5260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6839e310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006824179403511685
22, epoch_train_loss=0.2216654525351006
Epoch 23
Epoch 23 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02191371105747426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6710>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabae2890; to 'JaxprTracer' at 0x7ffbabae1a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x591c5200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010947303672193459
Epoch 23 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017930555588764666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01793056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fb1e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c684f0; to 'JaxprTracer' at 0x7ffbb9c6a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f3391e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009052287416118562
Epoch 23 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01086133527662107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01086134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654b50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c0ea1b0; to 'JaxprTracer' at 0x7ffd9c631b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bf02e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0035577206409299956
Epoch 23 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010499112157813094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01049911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e3de0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc34c400; to 'JaxprTracer' at 0x7ffdbc34fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x818b12c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.0059399054143488405
Epoch 23 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018298803288217428, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0182988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4cd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c3d2f70; to 'JaxprTracer' at 0x7ffe3c3d28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65a18e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008783138148196111
Epoch 23 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02479792184404562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02479792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b7b30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e9080; to 'JaxprTracer' at 0x7ffbbd1ea570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf585f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011646064641101057
Epoch 23 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02317154680896343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02317155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0b170>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe140d490; to 'JaxprTracer' at 0x7ffbe140c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x395dc850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01116361097476163
Epoch 23 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022756109278560293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5a70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9341710; to 'JaxprTracer' at 0x7ffbb9343880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bd50d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011617401110466307
Epoch 23 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022069951858321637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206995, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c68b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc882a20; to 'JaxprTracer' at 0x7ffbbc882070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3134d6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004090650955617948
Epoch 23 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021850827008867497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510690>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad86a70; to 'JaxprTracer' at 0x7ffbbad87f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f2402a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.0087884575587182
Epoch 23 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017256096642414634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0172561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7330>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbda27a60; to 'JaxprTracer' at 0x7ffbbda24360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e56dff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008295088973727549
Epoch 23 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021334151929722964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6570a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b4cc0; to 'JaxprTracer' at 0x7ffbe15b7830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2467b8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007838262701019413
Epoch 23 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02096580742889525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02096581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f280>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d6a570; to 'JaxprTracer' at 0x7ffb92d69c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66b8ce90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008715143169647081
Epoch 23 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025423467373161077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02542347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18960>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa4622a0; to 'JaxprTracer' at 0x7ffbe1ce6160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x672b3770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01135486469371348
Epoch 23 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02166558594014943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02166559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa561c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c763790; to 'JaxprTracer' at 0x7ffd3c760a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f376c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008790252454451452
Epoch 23 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020750074647711003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02075007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c56d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d465c0; to 'JaxprTracer' at 0x7ffba8d459e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x472bec00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008503296393228594
Epoch 23 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02111536376048987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02111536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052ed40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe19e00e0; to 'JaxprTracer' at 0x7ffbe19e2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67f335d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.00679669027186406
Epoch 23 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02067256707360955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02067257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb570>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87aef20; to 'JaxprTracer' at 0x7ffba87ac540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e80a5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008013693975319725
Epoch 23 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02428731877112419, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02428732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefe7e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93593f60; to 'JaxprTracer' at 0x7ffb935927a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7004fe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010106930185561585
Epoch 23 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017373700691341816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0173737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948170>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c414950; to 'JaxprTracer' at 0x7ffd5c416cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7613c100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.0059669078113261794
Epoch 23 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024165761338385102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02416576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07e280>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab17c090; to 'JaxprTracer' at 0x7ffbab17dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e2b3070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011437305391377535
Epoch 23 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02750493554023231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02750494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be430>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab727330; to 'JaxprTracer' at 0x7ffbab726980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34f3e1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011847193330336687
Epoch 23 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0257907054877902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02579071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30ee90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcf0e020; to 'JaxprTracer' at 0x7ffbe04c9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33980250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007873159904618354
Epoch 23 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02580200298630218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.025802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251f40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafcf3d0; to 'JaxprTracer' at 0x7ffbbd1856c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35aa7c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010976424273299814
Epoch 23 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023886830905596422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd820>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa411c10; to 'JaxprTracer' at 0x7ffbaa4131a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ca45340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004638300479010835
Epoch 23 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021774407060858418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795080>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe0376f0; to 'JaxprTracer' at 0x7ffbbe036e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4330ad60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.005542153958436313
Epoch 23 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024866036397193134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02486604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457d2b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfaba840; to 'JaxprTracer' at 0x7ffbbb00cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1df400a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006996250003864259
23, epoch_train_loss=0.22927845850325498
Epoch 24
Epoch 24 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023337084912733962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02333708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b150>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd81cf90; to 'JaxprTracer' at 0x7ffbbd81c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ef63880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010995093908529999
Epoch 24 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018742019915228218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01874202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4f6f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba79f060; to 'JaxprTracer' at 0x7ffbba79d170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34b75f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00880793368583879
Epoch 24 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010527121492458172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01052712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1b680>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb18040; to 'JaxprTracer' at 0x7ffbbbb1b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50354fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004203683354554888
Epoch 24 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011956752692247278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01195675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0fa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba989e750; to 'JaxprTracer' at 0x7ffbbc884d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60939930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.0053738281456467835
Epoch 24 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017782978799456447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01778298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a3b00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e26340; to 'JaxprTracer' at 0x7ffb93e24770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71744940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00880321455834623
Epoch 24 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02273530697239945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e09930>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c0b7560; to 'JaxprTracer' at 0x7ffc6c0b5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f3f0b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011644051006631524
Epoch 24 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02138742383691794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02138742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ef7e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d6ae80; to 'JaxprTracer' at 0x7ffb92d6a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a483990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010314525861477474
Epoch 24 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021914322329360848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec450>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2a2660; to 'JaxprTracer' at 0x7ffe2c2a01d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85442500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011085371854781223
Epoch 24 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019975360623925815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01997536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253f90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b5580; to 'JaxprTracer' at 0x7ffba8551c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22363b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0023426974521672367
Epoch 24 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02256640050116512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c5066b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40911c0; to 'JaxprTracer' at 0x7ffdf40910d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61865e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008563560367879343
Epoch 24 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017948180883078816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01794818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd420>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb999e250; to 'JaxprTracer' at 0x7ffbb999f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6102e9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006752402423298722
Epoch 24 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022638564384915662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1a370>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc882890; to 'JaxprTracer' at 0x7ffbbc881300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68f93760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007553637190867718
Epoch 24 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02220084853788029, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb16c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c42a20; to 'JaxprTracer' at 0x7ffbe15ce890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4afaa290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.00846764185427976
Epoch 24 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02650490547303112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02650491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0d10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92e02b10; to 'JaxprTracer' at 0x7ffb92e027f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c383de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011305588933862576
Epoch 24 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022570609158524386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e08260>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a3ab0; to 'JaxprTracer' at 0x7ffbbc0a3ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x104742b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.00908574344729387
Epoch 24 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021631226348984088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ede80>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba78c860; to 'JaxprTracer' at 0x7ffbba78fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c455950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008506140374014436
Epoch 24 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022533509201079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3126f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c67cb80; to 'JaxprTracer' at 0x7ffc6c67f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bac7090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006555891506960404
Epoch 24 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021717930788371972, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171793, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466fbc0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c4d53f0; to 'JaxprTracer' at 0x7ffd3c4d4720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fa97620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008018549672368144
Epoch 24 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02575194414102013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02575194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69c40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c274e00; to 'JaxprTracer' at 0x7ffe3c2758a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9993690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009910174069849493
Epoch 24 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018579382851922375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01857938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7df0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7411d990; to 'JaxprTracer' at 0x7ffd7411e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11679ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005434231264589044
Epoch 24 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022563526765281106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02256353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779d30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd40b5080; to 'JaxprTracer' at 0x7ffdd40b4360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e35dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010558168064155639
Epoch 24 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025500856998667464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739060>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44ce340; to 'JaxprTracer' at 0x7ffdd44cfdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b1c7bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011244701342794627
Epoch 24 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023536959450631258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353696, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6930>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb02d0d0; to 'JaxprTracer' at 0x7ffbbb02c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fb8c880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.0077358554484539665
Epoch 24 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02266425615275103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc675170>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96b6ed0; to 'JaxprTracer' at 0x7ffbb96b7600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x616e7310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01068385812348763
Epoch 24 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021692701174635582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c8f60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0ce890; to 'JaxprTracer' at 0x7ffd3c0ce570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49a0c090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005785042975601006
Epoch 24 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020382276990826304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02038228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56470>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f8d260; to 'JaxprTracer' at 0x7ffbdfabb740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6df981f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006162123595531135
Epoch 24 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0244484017071964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0244484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5116a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba952ef20; to 'JaxprTracer' at 0x7ffba952ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70bc2870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006793050014763991
24, epoch_train_loss=0.22268676049802563
Epoch 25
Epoch 25 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02181178405606349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02181178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afead0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e13f0; to 'JaxprTracer' at 0x7ffbbd1e3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x515ac290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011107480884933608
Epoch 25 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018029317438795864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01802932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c8e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7468a890; to 'JaxprTracer' at 0x7ffd746896c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x730d9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008600729570981052
Epoch 25 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011016662315225304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01101666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496bad0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7d55d0; to 'JaxprTracer' at 0x7ffbab7d5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x614582a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0038452281943936813
Epoch 25 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009902840655346329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00990284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7530>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93d8d990; to 'JaxprTracer' at 0x7ffb93d8f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce14210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.007595450742653889
Epoch 25 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018979108274934903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3117e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c12a430; to 'JaxprTracer' at 0x7ffd5c128d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x246c2440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008546444899706818
Epoch 25 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02550080165231521, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0255008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d15e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba78c180; to 'JaxprTracer' at 0x7ffd3c77cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62ca02b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011600783146004942
Epoch 25 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02247783309643899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305bb60>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb4e8680; to 'JaxprTracer' at 0x7ffbbb4eba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77ac7ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010704596557737128
Epoch 25 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023687718824942933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409bc50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbce84220; to 'JaxprTracer' at 0x7ffbbce85df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x764a1530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011403691156694233
Epoch 25 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022200534714574994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc675710>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6e6750; to 'JaxprTracer' at 0x7ffdbc6e7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5872c8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0034818357505155594
Epoch 25 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022105736988098767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02210574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc96c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98f7c40; to 'JaxprTracer' at 0x7ffba98f4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85a9eb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008270006963099633
Epoch 25 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01765640685208791, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01765641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24b60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1941d0; to 'JaxprTracer' at 0x7ffbbd1946d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4710ada0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007359482357871712
Epoch 25 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02175856461773047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a1a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b6250; to 'JaxprTracer' at 0x7ffbe15b4bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71aacfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.0075867640792258075
Epoch 25 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021406787551588275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02140679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466dfc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92aea6b0; to 'JaxprTracer' at 0x7ffbabbfa2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63ab6170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008572981209252744
Epoch 25 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02619732420211724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02619732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f5620>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1155210; to 'JaxprTracer' at 0x7ffbe11550d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a91580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01128385538469288
Epoch 25 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021983341210542018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938efc50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba95710d0; to 'JaxprTracer' at 0x7ffba9573dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35587d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008923186724805044
Epoch 25 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020721352242013304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02072135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099470>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabbaf150; to 'JaxprTracer' at 0x7ffd9c352e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42a51520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008490231264044667
Epoch 25 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021454108156795583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02145411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052f9a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba92dfc90; to 'JaxprTracer' at 0x7ffba92de7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df5a550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006537276924115804
Epoch 25 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021192780832229335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeffcf0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90040e0; to 'JaxprTracer' at 0x7ffba90056c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c0ec2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008090760045041607
Epoch 25 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02510789932026037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa949850>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dc53a0; to 'JaxprTracer' at 0x7ffb93dc6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16f39790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009785381323327322
Epoch 25 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01728833642391171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01728834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ec90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8e1210; to 'JaxprTracer' at 0x7ffbbc8e12b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5db5b070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005266366914664626
Epoch 25 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023112634730357663, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02311263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18c30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcea60c0; to 'JaxprTracer' at 0x7ffbbcea6fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x401a3880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010644801340238166
Epoch 25 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02782720297085429, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0278272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4f830>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3fc950; to 'JaxprTracer' at 0x7ffd5c3fcb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x555ce360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011458357870412031
Epoch 25 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025961928454278527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02596193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507e90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8544e50; to 'JaxprTracer' at 0x7ffba8547330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fa32d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007894477622070007
Epoch 25 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02476198684799267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02476199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510f20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb87d30; to 'JaxprTracer' at 0x7ffbbbb84c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x504552d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01064671102479485
Epoch 25 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023219292093355565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02321929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250790>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba55b290; to 'JaxprTracer' at 0x7ffbba55b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54291300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.004732624964745852
Epoch 25 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02113394023608706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cb120>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93931cb0; to 'JaxprTracer' at 0x7ffb93931b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ac95ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0056710501243952905
Epoch 25 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024468733472513302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02446873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654300>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaac709a0; to 'JaxprTracer' at 0x7ffbe1cad440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb96640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0067375272075528726
25, epoch_train_loss=0.2248380842479718
Epoch 26
Epoch 26 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021242596566396793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0212426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa55930>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe248b560; to 'JaxprTracer' at 0x7ffbe24883b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15918cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01129215557768229
Epoch 26 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017729250638193236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01772925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0ab30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0cfd0d0; to 'JaxprTracer' at 0x7ffbe0cfe840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ed70330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00867469009056476
Epoch 26 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010516850354838821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01051685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250740>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba8049a0; to 'JaxprTracer' at 0x7ffbba806a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c6edd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003942085152385889
Epoch 26 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011993026195534592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01199303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948850>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcab6a0; to 'JaxprTracer' at 0x7ffbbdca87c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73760a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.005884875045165371
Epoch 26 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017779330099248997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01777933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e7b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9ab970; to 'JaxprTracer' at 0x7ffbbbbac6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75cccc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008619990403882536
Epoch 26 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02338546073950465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02338546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f750>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa489940; to 'JaxprTracer' at 0x7ffbaa4889a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e389470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011498299444508366
Epoch 26 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021195906119395425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4370>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c310d0; to 'JaxprTracer' at 0x7ffbe1c31670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42e06890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010178613134840508
Epoch 26 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021905086271591316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b7b50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c4cb100; to 'JaxprTracer' at 0x7ffe3c4c8860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bc75810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01127131701245567
Epoch 26 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020328602695772458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0203286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512580>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c421620; to 'JaxprTracer' at 0x7ffe3c421e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf15b990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.00157735621027751
Epoch 26 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022650074004263054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795ac0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c1b4b30; to 'JaxprTracer' at 0x7ffe3c1b6980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59959150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008313861771192144
Epoch 26 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01823125116288179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01823125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c6de0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb999e480; to 'JaxprTracer' at 0x7ffbb999ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e8bdaf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006945676475316016
Epoch 26 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02318281624924342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4503920>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6e7ab0; to 'JaxprTracer' at 0x7ffdbc6e5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5282a420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007387007094742439
Epoch 26 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02267018495387737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948890>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc882110; to 'JaxprTracer' at 0x7ffbbc8811c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x172f56e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008307795025715608
Epoch 26 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026837069968075413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02683707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e120>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa922020; to 'JaxprTracer' at 0x7ffbaa9213f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50e4b060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011231242759932094
Epoch 26 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021909049512785234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058ca0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe075a570; to 'JaxprTracer' at 0x7ffbb99d3510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46453310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.00855408751543016
Epoch 26 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02016891182793529, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02016891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b78b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba932ea20; to 'JaxprTracer' at 0x7ffbbc8d6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72832e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008195961131502625
Epoch 26 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02053305229047203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02053305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b740>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09d3dd0; to 'JaxprTracer' at 0x7ffe2c0c1b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6554b5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.010408101546856376
Epoch 26 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021596959160461657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02159696, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466cb10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd433da80; to 'JaxprTracer' at 0x7ffdd433f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x519e15f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008423906924037338
Epoch 26 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.026879500953157703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0268795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e2ba0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe11b0040; to 'JaxprTracer' at 0x7ffbe11b13a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x792a37e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009990994585758667
Epoch 26 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.019790427072446166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01979043, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73add0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92a9e070; to 'JaxprTracer' at 0x7ffb92a9ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59ffc580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006168076780763342
Epoch 26 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024453615306767724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02445362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f9010>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c282890; to 'JaxprTracer' at 0x7ffd9c282750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84471df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011676876651158102
Epoch 26 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02729618866954845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02729619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24dc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c419c60; to 'JaxprTracer' at 0x7ffba958d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57c13980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012002483268734609
Epoch 26 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02434577599986204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02434578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb7e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c0bd3f0; to 'JaxprTracer' at 0x7ffd9c0bf880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2570a670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008074272491616387
Epoch 26 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.022489336988134153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02248934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac60a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c3d3a60; to 'JaxprTracer' at 0x7ffbb996cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68516190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011154314749773988
Epoch 26 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021269988728822582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02126999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca0f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c68220; to 'JaxprTracer' at 0x7ffbb9c6b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x695efec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006359535502417607
Epoch 26 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.019253580989488716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01925358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe180>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe091e610; to 'JaxprTracer' at 0x7ffbe091fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b91ed80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006860797104634372
Epoch 26 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.022473736164912085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f4ca0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17a1ad0; to 'JaxprTracer' at 0x7ffbe17f5da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c39880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007527198463400291
26, epoch_train_loss=0.230521571914745
Epoch 27
Epoch 27 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021351284376132915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c650>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c494cc0; to 'JaxprTracer' at 0x7ffe2c497e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89a3aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01139161346299357
Epoch 27 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018183357826449673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01818336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008f80>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb311800; to 'JaxprTracer' at 0x7ffbbb3123e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x251f25c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009176135929551871
Epoch 27 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010853220611234424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01085322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c93d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf44b9bc0; to 'JaxprTracer' at 0x7ffdf44b8400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31bef4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.00384839042338555
Epoch 27 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011912261454556363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01191226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7720>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe07410d0; to 'JaxprTracer' at 0x7ffbb996e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd22a250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.005623833315770638
Epoch 27 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019277530746961015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01927753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ba90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c128c70; to 'JaxprTracer' at 0x7ffbe0f57f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c19e880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009403084587552544
Epoch 27 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02407869671840774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b5e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb579a80; to 'JaxprTracer' at 0x7ffbbb578d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cdbae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011976481272633288
Epoch 27 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02128796266339524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bf730>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbca9d0; to 'JaxprTracer' at 0x7ffbbcbca340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x829ccfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010603436453077588
Epoch 27 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02120687678404914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2148810; to 'JaxprTracer' at 0x7ffbe2148e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x354f0150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011524292833978973
Epoch 27 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020165422591185977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02016542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4610>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc5f6fc0; to 'JaxprTracer' at 0x7ffb93d984f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ec820a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0023236375861274447
Epoch 27 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.020923357009083397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02092336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7bf0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad1a520; to 'JaxprTracer' at 0x7ffbbad187c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6034360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008683828517917208
Epoch 27 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01716167101940516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01716167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d680>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8af89a0; to 'JaxprTracer' at 0x7ffba8af9f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x793ea440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.006898223955236111
Epoch 27 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022904692442805977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f320>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb831a30; to 'JaxprTracer' at 0x7ffbbb831530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bad2d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007802485139734479
Epoch 27 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02322302884806015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02322303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c4720>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92ae98a0; to 'JaxprTracer' at 0x7ffb92ae9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e3c2520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008870288924398952
Epoch 27 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.027576960124824152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02757696, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779120>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1cae890; to 'JaxprTracer' at 0x7ffbe1cac900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c3e0430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011439278886498403
Epoch 27 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02346484200786365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02346484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2660>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1da930; to 'JaxprTracer' at 0x7ffd5c1d95d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42b74a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009174422385139398
Epoch 27 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021746009423145155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bef80>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7dfdd0; to 'JaxprTracer' at 0x7ffba90e96c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x536eff50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008697676969969112
Epoch 27 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02173732635176056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058440>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c111760; to 'JaxprTracer' at 0x7ffd9c113b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x423835e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.00676387280989288
Epoch 27 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02068030866002819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02068031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457cc10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e6ebb0; to 'JaxprTracer' at 0x7ffbb8e6f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x621454a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008365340995376192
Epoch 27 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024691489135525727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02469149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a0e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd554d60; to 'JaxprTracer' at 0x7ffbba57b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c28db90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009845808175277238
Epoch 27 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017923031101068545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01792303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3980>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfcc3b0; to 'JaxprTracer' at 0x7ffbbdfcce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c06a6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005196131260944867
Epoch 27 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023207628716174843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02320763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b190>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba805d00; to 'JaxprTracer' at 0x7ffbba805b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x400a1530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01098200961071492
Epoch 27 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026808217917566317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02680822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502610>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba981b330; to 'JaxprTracer' at 0x7ffba9819210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f634f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011154576254321
Epoch 27 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02510541472870081, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c45e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ca4720; to 'JaxprTracer' at 0x7ffbe1ca6fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f5e6b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007451220472802694
Epoch 27 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02414987160404538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02414987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7dd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c77240; to 'JaxprTracer' at 0x7ffbe1c754e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aa41e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010361545113409488
Epoch 27 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023031723720187292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02303172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa576c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb574540; to 'JaxprTracer' at 0x7ffba93324d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f4635c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005285674771556261
Epoch 27 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020846990589693457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02084699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512d50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1454e0; to 'JaxprTracer' at 0x7ffbbd147fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x369aefb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006123229199080458
Epoch 27 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024118246661863133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02411825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a3300>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98b67a0; to 'JaxprTracer' at 0x7ffba98b71f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47473a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006640686018930437
27, epoch_train_loss=0.22560720532627157
Epoch 28
Epoch 28 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02098701943275701, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02098702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677330>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe04c80e0; to 'JaxprTracer' at 0x7ffbe04c9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46a376b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010702555471367085
Epoch 28 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01705141309625929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01705141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052f610>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98199e0; to 'JaxprTracer' at 0x7ffba9818c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d92a420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.008946884179487786
Epoch 28 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011008575147624461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01100858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0a9f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93043150; to 'JaxprTracer' at 0x7ffb93043600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7be7bfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003499670009565306
Epoch 28 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011447574375123393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01144757, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeffa90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaf97470; to 'JaxprTracer' at 0x7ffbbaf958a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4128ab70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.0051498466048031
Epoch 28 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017996727218855056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01799673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059e00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7470a660; to 'JaxprTracer' at 0x7ffc6c2be480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61fe38d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008850696525529722
Epoch 28 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023398087727433937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02339809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc655180>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7fe5c0; to 'JaxprTracer' at 0x7ffbab7fe7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58402d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011195596610864954
Epoch 28 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022160078507501443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b4a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92aeb420; to 'JaxprTracer' at 0x7ffb92aeb100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a769390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010432150614760221
Epoch 28 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022282213521607183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02228221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6ae20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24f36f0; to 'JaxprTracer' at 0x7ffbe24f2700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55200270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011230790063418932
Epoch 28 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020603862388841643, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02060386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311860>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c51ff60; to 'JaxprTracer' at 0x7ffe2c51f100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83646a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.00132981734545588
Epoch 28 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022235746470137967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba650>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c6bf0b0; to 'JaxprTracer' at 0x7ffd9c6bfbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49e31940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00845404006770021
Epoch 28 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01733956729043167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01733957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507d30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a2ca0; to 'JaxprTracer' at 0x7ffbbc0a32e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4791e510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.007115187657511171
Epoch 28 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02295996850616895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e084c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c76f060; to 'JaxprTracer' at 0x7ffd3c76fc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x742e5270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007423203029119693
Epoch 28 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022680853315695394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefc5f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93905800; to 'JaxprTracer' at 0x7ffbe181e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d032b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008255004109470951
Epoch 28 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.027229303740230713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0272293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b7000>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4123970; to 'JaxprTracer' at 0x7ffbe0d5ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68b2a6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011719276264306522
Epoch 28 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0223186813034192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02231868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be560>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb917de90; to 'JaxprTracer' at 0x7ffbb917c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a8dd420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.008700087971701865
Epoch 28 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020944077732396937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02094408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1400>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4cea70; to 'JaxprTracer' at 0x7ffbbbb161b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x367ebad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008263768952720636
Epoch 28 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021831723484065216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02183172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73b530>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabaed0d0; to 'JaxprTracer' at 0x7ffbabaee3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x854cb6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006185604281046135
Epoch 28 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021120746092518662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02112075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f9840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8a82c00; to 'JaxprTracer' at 0x7ffba8a80540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d74fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.007596977805536066
Epoch 28 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025193404725789022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6210>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8563ce0; to 'JaxprTracer' at 0x7ffba8563470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b3da100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009477264826742854
Epoch 28 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01855448935427645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01855449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c7b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c41ae80; to 'JaxprTracer' at 0x7ffd5c41bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96586d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.005417955459863369
Epoch 28 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0225443009218188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8990>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40f8130; to 'JaxprTracer' at 0x7ffdf40fbf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f090d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010399413915938138
Epoch 28 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025609484745685574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02560948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008860>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c630b30; to 'JaxprTracer' at 0x7ffd9c6330b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c7ab0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011014542956512179
Epoch 28 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02455831624849677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02455832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4c870>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7458ea70; to 'JaxprTracer' at 0x7ffd7458cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eca2b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00714545580189846
Epoch 28 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02196582006779219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c95f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb63dd0; to 'JaxprTracer' at 0x7ffbbbb600e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64e592f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.009647363688493216
Epoch 28 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022343512746646386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2360>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17f6f20; to 'JaxprTracer' at 0x7ffbe17f4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x342db360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.00845819235341735
Epoch 28 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02047735684442981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02047736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77abf0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6a2cf0; to 'JaxprTracer' at 0x7ffc6c6a25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x709062c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.010602717910905104
Epoch 28 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023307559269406603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02330756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a780>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1467dd0; to 'JaxprTracer' at 0x7ffbe1467f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cf9dee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.015579695795991291
28, epoch_train_loss=0.23279376027412824
Epoch 29
Epoch 29 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01680211895595189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01680212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94bac0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c089260; to 'JaxprTracer' at 0x7ffe2c08a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b96a220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.024415827953172018
Epoch 29 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.021860488209223743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02186049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac57f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46b0810; to 'JaxprTracer' at 0x7ffdf46b2d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30a49550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.013561031894216348
Epoch 29 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.012675611414615403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01267561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000ac00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc34da30; to 'JaxprTracer' at 0x7ffdbc34f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cdc1d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.005652840335702397
Epoch 29 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.016241221813945612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01624122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67fde0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd46887c0; to 'JaxprTracer' at 0x7ffdd4688c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1517af10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.011063903606282297
Epoch 29 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02561632476966344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02561632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739af0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8db56c0; to 'JaxprTracer' at 0x7ffba8db71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69405000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.014844240115738002
Epoch 29 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.026271836320394218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02627184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc676fb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe096b6a0; to 'JaxprTracer' at 0x7ffbe0968180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x570004f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.020035965435102672
Epoch 29 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.029564516675041983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02956452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6bf70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb2e9990; to 'JaxprTracer' at 0x7ffbbb2ea480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x883e7d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.015175775916356368
Epoch 29 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.029477586945106868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02947759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6bef0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd53d030; to 'JaxprTracer' at 0x7ffbbd53e7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x432247f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.014728420037550077
Epoch 29 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.027437762917551806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02743776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a19b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0735a80; to 'JaxprTracer' at 0x7ffbe11a83b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7025c4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.00862932978555042
Epoch 29 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02949743762102508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02949744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938edff0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa945300; to 'JaxprTracer' at 0x7ffdd44f89f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x334ac7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.015202262886582017
Epoch 29 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.025078979936662842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02507898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1e10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4d7b0; to 'JaxprTracer' at 0x7ffbe1a4c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19f6c2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.013427779139301608
Epoch 29 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02833955061911745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02833955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07c900>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17c4310; to 'JaxprTracer' at 0x7ffbaac6c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d28ee60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.013359215870249016
Epoch 29 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.028278108120750902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02827811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe270f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0fcbd0; to 'JaxprTracer' at 0x7ffbbc0ff290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x630168e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.013759920405448127
Epoch 29 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.031099487517800662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03109949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739a50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93bd91c0; to 'JaxprTracer' at 0x7ffb93bda520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dcd1770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.013544986340158051
Epoch 29 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.028459166877972425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02845917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd890>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f75990; to 'JaxprTracer' at 0x7ffbe0f76e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2543dec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.01470692022907307
Epoch 29 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.027029972971727424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02702997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bdad0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd149da0; to 'JaxprTracer' at 0x7ffbbd14bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x503a0c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.013770765959397751
Epoch 29 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.026624662754451557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02662466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2130>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c30b150; to 'JaxprTracer' at 0x7ffb93e66750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22427ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.010628320607916603
Epoch 29 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.026300880078858325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02630088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5270>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9047ce0; to 'JaxprTracer' at 0x7ffba9047c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72e43b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.012854800913638498
Epoch 29 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.028295796014943364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0282958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f340>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaf945e0; to 'JaxprTracer' at 0x7ffbbaf96610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f7b4760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011375533523556483
Epoch 29 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.020197897864291336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0201979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409be90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93357330; to 'JaxprTracer' at 0x7ffb93356340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x654e6070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.0098447170809297
Epoch 29 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024903643326268692, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02490364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457cc10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd54ae0; to 'JaxprTracer' at 0x7ffbbbd56520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c5792d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012090193084637343
Epoch 29 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.029914367856456275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02991437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5000>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d08f40; to 'JaxprTracer' at 0x7ffba8d09df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x821e3a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.013093644422039993
Epoch 29 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.027421552301258072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02742155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa55e00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c115170; to 'JaxprTracer' at 0x7ffbdfa76340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x821c08b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00930644432376141
Epoch 29 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02827871133664325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02827871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba794aa0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba85450d0; to 'JaxprTracer' at 0x7ffba85459e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7abde390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.012036562555407245
Epoch 29 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02487016793669929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02487017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8940>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d3f10; to 'JaxprTracer' at 0x7ffbb96d2480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x229d7f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.008229389702750325
Epoch 29 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.023514894055324143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02351489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c312350>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc86200; to 'JaxprTracer' at 0x7ffbbdc84900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84be6a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.009017154901539228
Epoch 29 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.026512451554623333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02651245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513430>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba853d080; to 'JaxprTracer' at 0x7ffbb96d0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x607cf3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.008383593076195246
29, epoch_train_loss=0.34273954010225227
Epoch 30
Epoch 30 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022304397735381943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0223044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f4440>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe04ca7a0; to 'JaxprTracer' at 0x7ffbe04c9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x375d1ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01410260831840717
Epoch 30 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018357124216501503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01835712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4e470>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9170310; to 'JaxprTracer' at 0x7ffbb9172430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x611a1ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.012036984394289432
Epoch 30 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010991360865100577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01099136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa55410>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb187c0; to 'JaxprTracer' at 0x7ffbbbb19580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd20a3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0032969205113250067
Epoch 30 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013767961411056445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01376796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305b160>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaffbce0; to 'JaxprTracer' at 0x7ffbbaff8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6348d4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008744106337960786
Epoch 30 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.022903201783864544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6572d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc14c590; to 'JaxprTracer' at 0x7ffbab462200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e1f77c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010699575339906717
Epoch 30 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.029063933341951113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02906393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc190>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff7bba0; to 'JaxprTracer' at 0x7ffbdff7aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16de7480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.014442066931186342
Epoch 30 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02212644587121732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253ae0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c330450; to 'JaxprTracer' at 0x7ffe2c332070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59ae55b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012872660986519667
Epoch 30 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023945081978611213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2252bf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd0f7880; to 'JaxprTracer' at 0x7ffbbd0f7510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x284071b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01191816351432305
Epoch 30 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02021341337726091, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02021341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba794220>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2a31a0; to 'JaxprTracer' at 0x7ffbbafb45e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7544bf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.005748578013537118
Epoch 30 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022803470567086107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02280347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052ca20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9397fdd0; to 'JaxprTracer' at 0x7ffb9397f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f088b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.01191168198484336
Epoch 30 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01901167935704167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01901168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e085a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad187c0; to 'JaxprTracer' at 0x7ffbbad1bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42e3e350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.011392298520560961
Epoch 30 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.025632476873639093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02563248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bddd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd472dee0; to 'JaxprTracer' at 0x7ffdd472f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b55cb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.010536463229600633
Epoch 30 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02614180136324771, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0261418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30d7d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc7dbc0; to 'JaxprTracer' at 0x7ffbbdc7d620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86e9a870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.010676816970350098
Epoch 30 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02994109742578414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0299411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657150>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb575d50; to 'JaxprTracer' at 0x7ffbbb577420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32c94a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012821509659757192
Epoch 30 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024578261975183095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02457826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afdfa0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe02e9b20; to 'JaxprTracer' at 0x7ffbbd46a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d2b370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010006586339544652
Epoch 30 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022584384487822934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251240>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0968c20; to 'JaxprTracer' at 0x7ffba8b16f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78cd89f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00966003541564774
Epoch 30 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02070296508513551, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02070297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466d340>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42bafc0; to 'JaxprTracer' at 0x7ffbab4cfa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6992d9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.012960812312217882
Epoch 30 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023871453938345586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02387145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a140>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46fe340; to 'JaxprTracer' at 0x7ffdf46ff1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x572a4e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008958757428945743
Epoch 30 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.027040636009886158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02704064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f9bb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c0a25c0; to 'JaxprTracer' at 0x7ffe3c0a2340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65eae0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.012096867905567335
Epoch 30 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.019258772735554226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01925877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25b00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c123010; to 'JaxprTracer' at 0x7ffe2c1218a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75d56660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.008042453020069507
Epoch 30 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.025658174207015716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02565817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07e100>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73fb00; to 'JaxprTracer' at 0x7ffdbc73e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf6e4dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012120101636574263
Epoch 30 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027329047408779075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02732905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3730>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92ddb380; to 'JaxprTracer' at 0x7ffb92ddb6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b4b6410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011960103047076192
Epoch 30 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024897446948398343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02489745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eff70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c2a4270; to 'JaxprTracer' at 0x7ffc6c2a6020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63c68800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008943197576086945
Epoch 30 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025958967771645178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02595897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510120>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c0bff10; to 'JaxprTracer' at 0x7ffd9c0bdc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74f42720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011770584877623865
Epoch 30 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023891624395883493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02389162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fdde0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9864d60; to 'JaxprTracer' at 0x7ffba9865210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e96e0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.007459636328784183
Epoch 30 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02462386177672694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779590>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb201d0; to 'JaxprTracer' at 0x7ffc6c620180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64d69760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007651841463748439
Epoch 30 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.029251298924202623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0292513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cc80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd55aac0; to 'JaxprTracer' at 0x7ffbbd55af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fc748a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.010692935846296657
30, epoch_train_loss=0.28352434791075093
Epoch 31
Epoch 31 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0238401406632701, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02384014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8810>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e39850; to 'JaxprTracer' at 0x7ffd9c52e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a0b4050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01490584205782278
Epoch 31 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020243248195442664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02024325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3131a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74569120; to 'JaxprTracer' at 0x7ffd745689f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a779e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010240105002966609
Epoch 31 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009344177415719853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00934418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0140>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe259f80; to 'JaxprTracer' at 0x7ffbbe25aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e3520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.002469791398821181
Epoch 31 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01083707147954859, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01083707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c4ea0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd756480; to 'JaxprTracer' at 0x7ffbbd755cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd46c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.01024101686629187
Epoch 31 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01865056111552777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01865056, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466d6e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1cc4270; to 'JaxprTracer' at 0x7ffbe1cc58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ac8b640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.01093759113379757
Epoch 31 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024349342385139153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02434934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348ea0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe28a200; to 'JaxprTracer' at 0x7ffbbe28b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39af9ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012136550611340764
Epoch 31 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.024688081569490393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02468808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a860>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c129990; to 'JaxprTracer' at 0x7ffc6c129d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x505ecda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012367309069515019
Epoch 31 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.025504946066828967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92aff190>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba52bfb0; to 'JaxprTracer' at 0x7ffbba528630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bb82e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012339533481062044
Epoch 31 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02136547572663776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513ad0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a09a0; to 'JaxprTracer' at 0x7ffbbc0a26b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7028ba20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0035329230363209388
Epoch 31 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.025151681491208566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02515168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6d80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa07cea0; to 'JaxprTracer' at 0x7ffbaa07fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4da6e890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009842131747866328
Epoch 31 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019714130836177023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971413, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c4420>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc8e390; to 'JaxprTracer' at 0x7ffbbdc8cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b17100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009264530210266443
Epoch 31 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.025336453667707544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02533645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1670>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd0f4a40; to 'JaxprTracer' at 0x7ffbbd0f6480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50253d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008606829505809186
Epoch 31 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.025002466010607016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02500247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5af0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd40868e0; to 'JaxprTracer' at 0x7ffdd4084d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72eb8930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009556348771242252
Epoch 31 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02916722812959499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02916723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677b90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90b06d0; to 'JaxprTracer' at 0x7ffba90b3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b18f910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.013438117830369068
Epoch 31 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022542639715428376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253a00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaf0d620; to 'JaxprTracer' at 0x7ffbe0d649a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83e5b3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.011031875909238419
Epoch 31 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021085081330028177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02108508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affbe0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e71e40; to 'JaxprTracer' at 0x7ffbb8e71030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e99f4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.010741229035427402
Epoch 31 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023180524718025092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bece0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1d92b0; to 'JaxprTracer' at 0x7ffd5c1d90d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70cd8350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007811265953708035
Epoch 31 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023698413146019157, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02369841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4750>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9307b650; to 'JaxprTracer' at 0x7ffd5c2b1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34f21ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00947436086012855
Epoch 31 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.028214780530711747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02821478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305aa30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd184770; to 'JaxprTracer' at 0x7ffbbd184860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bcb2bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011351107085075664
Epoch 31 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.019552225548441046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01955223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e6a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba936d990; to 'JaxprTracer' at 0x7ffba936d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41d67490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007814742131377915
Epoch 31 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0239782063501725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bd9e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba989c310; to 'JaxprTracer' at 0x7ffba989fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x615cdad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011263545253407831
Epoch 31 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027847947112215624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02784795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0b640>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c0bb010; to 'JaxprTracer' at 0x7ffd5c415990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x595663c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011999014394104229
Epoch 31 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02480228595793579, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02480229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4db90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90070b0; to 'JaxprTracer' at 0x7ffba9007600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dd4d250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.0086058297797822
Epoch 31 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.0235115046454586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0235115, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa577f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938d1f30; to 'JaxprTracer' at 0x7ffb938d36f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ae7510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011628044816025532
Epoch 31 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022745358236565157, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02274536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18e70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ca6f20; to 'JaxprTracer' at 0x7ffbbdcbb380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7339a8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.007378802902486945
Epoch 31 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022046250707447836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02204625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc655fc0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe272be20; to 'JaxprTracer' at 0x7ffbe272bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fe41880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.00773272567397131
Epoch 31 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.026624613785843288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02662461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c630>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4f0a40; to 'JaxprTracer' at 0x7ffbba4f0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49ca2b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007836675519151196
31, epoch_train_loss=0.26454784003737725
Epoch 32
Epoch 32 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021903417841427453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778930>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dbdfd0; to 'JaxprTracer' at 0x7ffb93dbc130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24a2c610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012439662658761142
Epoch 32 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020637366948936968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02063737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18f60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc659490; to 'JaxprTracer' at 0x7ffbbc65b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24f66f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.01022423743719951
Epoch 32 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011602987181292289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01160299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e082f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87e2ca0; to 'JaxprTracer' at 0x7ffba87e3600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83d6cb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004115765607370018
Epoch 32 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012640346988552844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01264035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e080>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba92dd1c0; to 'JaxprTracer' at 0x7ffba92df240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x209e1a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008413199408687256
Epoch 32 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.021566985155134655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02156699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2030>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab2204f0; to 'JaxprTracer' at 0x7ffbab2209f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ecf1780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009952009183402291
Epoch 32 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02719338592040767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02719339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69990>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaacf9990; to 'JaxprTracer' at 0x7ffbaacf9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f929730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012954567425595014
Epoch 32 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023282391661250672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02328239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348f40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc0ca1b0; to 'JaxprTracer' at 0x7ffdbc0cb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b424e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011732482803662247
Epoch 32 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02213880778658522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7a5e40; to 'JaxprTracer' at 0x7ffbab7a5b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e021b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012054627362770501
Epoch 32 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.016636283336038876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01663628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67eb40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd194ae0; to 'JaxprTracer' at 0x7ffbbd1951c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x138fd990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.009837073621188958
Epoch 32 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.020437022207939717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02043702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26d20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd79c4f0; to 'JaxprTracer' at 0x7ffbbd79e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x323a35b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.011235650716595243
Epoch 32 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017961646207401278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01796165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefd2c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7468b060; to 'JaxprTracer' at 0x7ffd7468af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5df7eed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009384650100041705
Epoch 32 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02550753321220781, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02550753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c504280>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6e7650; to 'JaxprTracer' at 0x7ffdbc6e4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x646704c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008571739563403243
Epoch 32 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02729828887703226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02729829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409be60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17f6610; to 'JaxprTracer' at 0x7ffbe1584a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x344d35b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.010541737366066173
Epoch 32 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.03224968543663359, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03224969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d09d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b1580; to 'JaxprTracer' at 0x7ffd3c0b0a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x232bc140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.015451012025440863
Epoch 32 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.025746534841268365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02574653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a060>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4856c0; to 'JaxprTracer' at 0x7ffbab484130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63407080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010519542292950181
Epoch 32 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021626630235093303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02162663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb933494d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a01530; to 'JaxprTracer' at 0x7ffbe1a02bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x662d1b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.010401097391869245
Epoch 32 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02217466803409925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217467, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466de50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb17600; to 'JaxprTracer' at 0x7ffbbbb179c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x757b72d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007996657255001273
Epoch 32 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02178393179898453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02178393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1a30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd51bfb0; to 'JaxprTracer' at 0x7ffbbd51b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x505de280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009816410760701529
Epoch 32 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.026035797721591147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0260358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07c4c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c778b80; to 'JaxprTracer' at 0x7ffd3c779df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c9c4ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010440278718628853
Epoch 32 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017756115555842375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01775612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2020>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd746d6200; to 'JaxprTracer' at 0x7ffd746d5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c7479a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.00744007916749968
Epoch 32 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022577506136542556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45008c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1184360; to 'JaxprTracer' at 0x7ffd9c2b59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67e696b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01072796433460059
Epoch 32 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.028327830773072313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02832783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac60a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd740f6200; to 'JaxprTracer' at 0x7ffd740f6bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x654d3e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012265710130582239
Epoch 32 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02644671140598174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02644671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510650>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0cfb50; to 'JaxprTracer' at 0x7ffd3c0ccc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c275470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008562531894291528
Epoch 32 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02320684254965192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02320684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ef2f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4c0c20; to 'JaxprTracer' at 0x7ffbba4c0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e4df30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011720734555222196
Epoch 32 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02258522355127364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc674090>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb237e0; to 'JaxprTracer' at 0x7ffbbbb218f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b651bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.007301240911399159
Epoch 32 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02106045945980329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02106046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c190>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09d3100; to 'JaxprTracer' at 0x7ffbe09d3790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77c45d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.00803429914325914
Epoch 32 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024967420319871394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02496742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afeae0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9bfe660; to 'JaxprTracer' at 0x7ffba9bfe4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57fe8170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007495668704711669
32, epoch_train_loss=0.2696306305409014
Epoch 33
Epoch 33 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021342639827478447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305bc50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa420ea0; to 'JaxprTracer' at 0x7ffbaa421620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36dc4130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012634297163634864
Epoch 33 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017608315435043057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01760832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94a040>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44ccf90; to 'JaxprTracer' at 0x7ffdd44cf100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70b4ff50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010401024098580375
Epoch 33 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011049390050626723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01104939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511090>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe11b38d0; to 'JaxprTracer' at 0x7ffbe11b2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c6269b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004721290539837587
Epoch 33 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013101648455004928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01310165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3190>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe075b060; to 'JaxprTracer' at 0x7ffbe075a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3851aa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008526694133000902
Epoch 33 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.023832803457966335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0238328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e06c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c91440; to 'JaxprTracer' at 0x7ffbe1c90c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a855770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.01110353026235098
Epoch 33 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.030453220341292497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03045322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a020>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0d5eb10; to 'JaxprTracer' at 0x7ffbe0d5c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50dd6390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.014865930371556537
Epoch 33 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.024114627620368794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02411463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93349fb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf44fac50; to 'JaxprTracer' at 0x7ffbdffa9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71fdd750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012272575461382601
Epoch 33 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023576268114365657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02357627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cbc50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd960ef0; to 'JaxprTracer' at 0x7ffbbd960720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57900370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012553786102010349
Epoch 33 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020256873120329127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02025687, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ed330>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c128950; to 'JaxprTracer' at 0x7ffc6c129080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5673c320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004097649921349705
Epoch 33 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02083874884554568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02083875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc655540>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba85522f0; to 'JaxprTracer' at 0x7ffba8553790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a8b180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.011254050009430364
Epoch 33 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01630094119837873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01630094, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7980>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd47117b0; to 'JaxprTracer' at 0x7ffdd47119e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e153e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.01079474884852212
Epoch 33 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022601998789877852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4ce0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb865c0; to 'JaxprTracer' at 0x7ffbbbb874c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7358dbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.009465634944729929
Epoch 33 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023692723485168137, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02369272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccbf60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c566e30; to 'JaxprTracer' at 0x7ffe2c2a2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x108226c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009844150900932668
Epoch 33 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.029166011805784438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02916601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466ca60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c99fd0; to 'JaxprTracer' at 0x7ffbe1c98a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x492eb570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.013054841294698005
Epoch 33 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.026124054089540688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02612405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f8a10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba558ef0; to 'JaxprTracer' at 0x7ffd3c3028e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52287ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010892304559111199
Epoch 33 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.024856034381878875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02485603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c96d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff7ac50; to 'JaxprTracer' at 0x7ffbdff78a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x749e6020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.01003325279933327
Epoch 33 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.024952602298852804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69800>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab798860; to 'JaxprTracer' at 0x7ffbab799670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6accff10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007802184733222662
Epoch 33 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023427220205351575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02342722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe00091e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe14889f0; to 'JaxprTracer' at 0x7ffbe1488a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a126430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009375661364245655
Epoch 33 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02616360055560619, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0261636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bd340>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c37d990; to 'JaxprTracer' at 0x7ffc6c37ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9d6670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011001477922431606
Epoch 33 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017720726136542495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01772073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4098200>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad21940; to 'JaxprTracer' at 0x7ffbbad23f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f904ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007579964761400652
Epoch 33 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0219300630354151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b44d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe22e48b0; to 'JaxprTracer' at 0x7ffba87e2610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52be6920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011112366548357601
Epoch 33 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02529396532642625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c504960>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa12430; to 'JaxprTracer' at 0x7ffbdfa11b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45002bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012192804108741257
Epoch 33 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024943544390119005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02494354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bcc60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe250fbf0; to 'JaxprTracer' at 0x7ffbe250d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x174aebb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.009223424729347408
Epoch 33 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02319381146667352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02319381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afeb30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9172390; to 'JaxprTracer' at 0x7ffbb9171a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5da38720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.012384562152254532
Epoch 33 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024817068172625745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02481707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cd90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3c79c0; to 'JaxprTracer' at 0x7ffbbc3c6520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36185ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006933207830869989
Epoch 33 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.023257965109528177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02325797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052fa30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9093560; to 'JaxprTracer' at 0x7ffba90925c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82c67610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007710179292802473
Epoch 33 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.026732583775902798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02673258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb89e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc88fdd0; to 'JaxprTracer' at 0x7ffba9b2b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d0f48b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.008115279185605182
33, epoch_train_loss=0.26994687403974044
Epoch 34
Epoch 34 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023849782198703085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02384978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4dbb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafcd3f0; to 'JaxprTracer' at 0x7ffbbafcd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4806d470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011918772368467397
Epoch 34 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.02059555517173059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02059556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25240>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe04f6a0; to 'JaxprTracer' at 0x7ffbbe04cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fab5be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010039911043426593
Epoch 34 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010656899228791704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0106569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795d70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc92e480; to 'JaxprTracer' at 0x7ffbbc92ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34b483c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0035718725841588795
Epoch 34 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012348041775656217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01234804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457cbc0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1157ba0; to 'JaxprTracer' at 0x7ffbe1154040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c55a010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.007811876064802628
Epoch 34 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020587298046039038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0205873, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000ad60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09baca0; to 'JaxprTracer' at 0x7ffbe09baf20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36052b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010247376537435925
Epoch 34 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.026714558781462745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02671456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f9b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c7f71a0; to 'JaxprTracer' at 0x7ffbbe28ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x471a16e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01432747342748613
Epoch 34 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023398123898102315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02339812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa579e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c566ac0; to 'JaxprTracer' at 0x7ffd3c566cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73ee78d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012290988661555475
Epoch 34 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023330568180822908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02333057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa545c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74524130; to 'JaxprTracer' at 0x7ffd74527100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34416a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012633898934055835
Epoch 34 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020487684144813983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02048768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0ad00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4090d10; to 'JaxprTracer' at 0x7ffdf4093380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7edce700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0044476155784807575
Epoch 34 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021253382057302577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7680>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73de90; to 'JaxprTracer' at 0x7ffdbc73fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5067f600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.01067591645035917
Epoch 34 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01706972111364493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01706972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5d90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a0e50; to 'JaxprTracer' at 0x7ffd7468b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69bdafe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009922299190997933
Epoch 34 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.023156239353505158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02315624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bcec0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74742890; to 'JaxprTracer' at 0x7ffd74740bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cbd9470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008862732123237495
Epoch 34 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.024408236865159957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02440824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099460>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17f67f0; to 'JaxprTracer' at 0x7ffbe17f6ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43b5c0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009605868877977278
Epoch 34 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.029973449059027345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02997345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009770>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe10071f0; to 'JaxprTracer' at 0x7ffbe1004cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2edf6520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.013118913822155347
Epoch 34 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.025657449747635487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02565745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c480>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0da5030; to 'JaxprTracer' at 0x7ffbe0da6fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b6cfc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010587474128861345
Epoch 34 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023096308209165615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02309631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa54b50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c91760; to 'JaxprTracer' at 0x7ffb93930220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cb3a3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.010376896510023624
Epoch 34 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.024516751618492382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02451675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466ec50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa920270; to 'JaxprTracer' at 0x7ffbaa920360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e5f2920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.008131002234340793
Epoch 34 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023805971142009292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e3920>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe07596c0; to 'JaxprTracer' at 0x7ffbe075b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bbe6540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009358856469466643
Epoch 34 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02745682808664373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02745683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8dd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd757e20; to 'JaxprTracer' at 0x7ffbbd755800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58ac2cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011691489643430053
Epoch 34 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01810957747279043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01810958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3bb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8560040; to 'JaxprTracer' at 0x7ffba85617b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ad770c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.00666167940570115
Epoch 34 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02177236080321271, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310110>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab234ef0; to 'JaxprTracer' at 0x7ffbab235210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ec86bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011046660999786568
Epoch 34 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026446878737787137, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02644688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6770>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd42f67f0; to 'JaxprTracer' at 0x7ffdd42f44a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5063f770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012669562327065675
Epoch 34 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02480435420334913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02480435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa9496a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff78540; to 'JaxprTracer' at 0x7ffe2c0ea610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d806b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008748200829269564
Epoch 34 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023231683097887947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02323168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb91b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f8d2b0; to 'JaxprTracer' at 0x7ffbe0f8e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x406054a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01125843822140816
Epoch 34 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023310081095529265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02331008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657b40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ca7e70; to 'JaxprTracer' at 0x7ffbe1ca45e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77019490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.007187714131313185
Epoch 34 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021716626694735033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b7970>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc88f060; to 'JaxprTracer' at 0x7ffbaba997b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ff7320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007990114235866111
Epoch 34 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.025407562006075468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02540756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fb2e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c360d10; to 'JaxprTracer' at 0x7ffd5c360e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74c959e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007483653569423768
34, epoch_train_loss=0.2626672583705535
Epoch 35
Epoch 35 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02195214416782829, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02195214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ef010>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe026fce0; to 'JaxprTracer' at 0x7ffbba79f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x490b1d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011711628479734944
Epoch 35 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.019860499726622273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0198605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1a480>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c3d0310; to 'JaxprTracer' at 0x7ffe3c3d1440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a7b560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.01025478334543061
Epoch 35 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010629904331320885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0106299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7c30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c357f60; to 'JaxprTracer' at 0x7ffe3c354ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x626f6cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004513571122681149
Epoch 35 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.013263237739497257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01326324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1b80>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8db45e0; to 'JaxprTracer' at 0x7ffba8db4450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65c7cec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008837682739662778
Epoch 35 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.022045488391030467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02204549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ac50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd150400; to 'JaxprTracer' at 0x7ffbbd150310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e37d800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010062024451484889
Epoch 35 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.028715165459184393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02871517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a670>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b0220; to 'JaxprTracer' at 0x7ffd3c056bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b6d4db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.013848928562983658
Epoch 35 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.024246041920147874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02424604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22517f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15bad40; to 'JaxprTracer' at 0x7ffbe15b8f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ae1f580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01202724885664083
Epoch 35 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02487578782309073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02487579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6bbe0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17f50d0; to 'JaxprTracer' at 0x7ffbe17f69d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a643e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01242264470834138
Epoch 35 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021932826056347107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193283, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8140>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe11a91c0; to 'JaxprTracer' at 0x7ffbe11ab4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5eb68240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0030838071795837242
Epoch 35 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.020938918245992092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02093892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4503ec0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a03b0; to 'JaxprTracer' at 0x7ffbbc0a3ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aeede20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010646830307545745
Epoch 35 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01647284312347773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01647284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd030>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c259620; to 'JaxprTracer' at 0x7ffe3c259b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45390f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.010284788921675326
Epoch 35 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02100899287446676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02100899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7a90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd743d6110; to 'JaxprTracer' at 0x7ffd743d7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x823a4770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.009597660575409889
Epoch 35 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02190824956355403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07c880>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafb7ce0; to 'JaxprTracer' at 0x7ffbbafb5670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e78dc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009993475665478896
Epoch 35 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02813948724257775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02813949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe6c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabacf600; to 'JaxprTracer' at 0x7ffbaac6dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35968df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012346789684520748
Epoch 35 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.024842360414322372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02484236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c8330>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d2250; to 'JaxprTracer' at 0x7ffbb96d2b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b16b6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010462336185591274
Epoch 35 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.024178128417823914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02417813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68900>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e8f420; to 'JaxprTracer' at 0x7ffbb9e8f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b13ceb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009778167872911615
Epoch 35 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.024358399926826882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0243584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008990>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2060ef0; to 'JaxprTracer' at 0x7ffbe2060220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7749fc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007424220821452205
Epoch 35 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023436235769503117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02343624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a270>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5bdee0; to 'JaxprTracer' at 0x7ffbbb5bed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59c15d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009052024570741148
Epoch 35 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025902360614953844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02590236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bd5f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93956570; to 'JaxprTracer' at 0x7ffb939572e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x478ee9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011095218492153181
Epoch 35 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017002037899139445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01700204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bc350>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1862a0; to 'JaxprTracer' at 0x7ffbbd186700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b864050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006437650965674722
Epoch 35 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019714156480933283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01971416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c505170>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba92dd080; to 'JaxprTracer' at 0x7ffba92dfdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75b30640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010745821671470946
Epoch 35 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025063554393246593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02506355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24d00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93bf7650; to 'JaxprTracer' at 0x7ffba989e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5433ef80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.013286634552493116
Epoch 35 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02425255922911318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f43c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa138d0; to 'JaxprTracer' at 0x7ffbdfa10450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75d3d3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008627064593441992
Epoch 35 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02342992657343744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02342993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7952b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3fcb80; to 'JaxprTracer' at 0x7ffd5c3fcef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62adfb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010716186196595047
Epoch 35 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023933437631375103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02393344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0ac40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe26dacf0; to 'JaxprTracer' at 0x7ffbe26d88b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aad8690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.00633336970040209
Epoch 35 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02374556640620547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d0c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0536bb0; to 'JaxprTracer' at 0x7ffbe0534540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ca3520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006995416096512325
Epoch 35 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02774433831836234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02774434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2370>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb89e700; to 'JaxprTracer' at 0x7ffbbb89e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51181450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007829672918792907
35, epoch_train_loss=0.2584156492394071
Epoch 36
Epoch 36 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023089078004626697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02308908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacca9d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafcd8a0; to 'JaxprTracer' at 0x7ffbbafcce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b03520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011351573801287443
Epoch 36 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01993864101791714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01993864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5be0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9975fd0; to 'JaxprTracer' at 0x7ffbb9974f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cd9d180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009730756892661696
Epoch 36 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011126028774506688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01112603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27e30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaf96c00; to 'JaxprTracer' at 0x7ffbbaf97880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e57c650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004259067721835621
Epoch 36 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.012533711297762987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01253371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c9e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7470b970; to 'JaxprTracer' at 0x7ffd7470b5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f54b0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009258585097302032
Epoch 36 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.021434612878813555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02143461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d3480>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9ba8400; to 'JaxprTracer' at 0x7ffba9bab650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e0072d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010419042281595708
Epoch 36 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.027607592428641244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02760759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ecaf0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9532390; to 'JaxprTracer' at 0x7ffba9533830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72f622c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012457685876392953
Epoch 36 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021966033899013984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22517c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24f2890; to 'JaxprTracer' at 0x7ffbe24f2bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73a7d9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011153105254502691
Epoch 36 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0238417290247807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02384173, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250760>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7a76a0; to 'JaxprTracer' at 0x7ffbab7a7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x472636f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011602454789597245
Epoch 36 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020910150556930483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02091015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f9e30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c31b9c0; to 'JaxprTracer' at 0x7ffd9c31b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1500e250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004003970158151356
Epoch 36 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02057543093517978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02057543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94bf60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd744d78d0; to 'JaxprTracer' at 0x7ffd744d5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b5d0f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010739776713253142
Epoch 36 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01661266641826553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01661267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d590>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab808db0; to 'JaxprTracer' at 0x7ffbab808860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b181680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009815732776532367
Epoch 36 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022206946679490268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c66e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe07342c0; to 'JaxprTracer' at 0x7ffbe0735d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65c4f640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008613092470209657
Epoch 36 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02360570305320185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0236057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f4b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ca5bc0; to 'JaxprTracer' at 0x7ffbe1ca49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x747b83f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009480764237770922
Epoch 36 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.029539469146303614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02953947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a290>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ee0fe0; to 'JaxprTracer' at 0x7ffbe1ee04f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x317d7ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.0137631300901524
Epoch 36 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.025678838959083454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02567884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ee720>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b8180; to 'JaxprTracer' at 0x7ffbbd7c59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x699e9360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010971455797391115
Epoch 36 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.024006813586211147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22507d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b10d0; to 'JaxprTracer' at 0x7ffd3c0b0360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c89ee80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009950978212994498
Epoch 36 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023628516843938175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30d290>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1cc7a10; to 'JaxprTracer' at 0x7ffbe1cc69d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78586cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007427711611227297
Epoch 36 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022162884620163106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa55350>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46fc720; to 'JaxprTracer' at 0x7ffdf46fff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12e593a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.0092855973088263
Epoch 36 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025293598230202323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0252936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778a60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf412e200; to 'JaxprTracer' at 0x7ffdf412ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xeff8370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010553173785831642
Epoch 36 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016718751394200895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01671875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e13e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4688e00; to 'JaxprTracer' at 0x7ffdd468a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf01bd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007251543997798154
Epoch 36 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019651815111440776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01965182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3150>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4753e70; to 'JaxprTracer' at 0x7ffdf4750ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4546f570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010943551517565554
Epoch 36 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025793888588246855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02579389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3114e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15e14e0; to 'JaxprTracer' at 0x7ffbe15e09a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c809a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011896452813146885
Epoch 36 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02511021270293694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02511021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fcbb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c487330; to 'JaxprTracer' at 0x7ffe3c277fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c687af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008226506097159357
Epoch 36 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02447753813704809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02447754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058b20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7458d260; to 'JaxprTracer' at 0x7ffd7458e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41a03880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011113661525278899
Epoch 36 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023927915995184405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebbaa0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4f8a90; to 'JaxprTracer' at 0x7ffd3c7157b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d99add0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006324653211128415
Epoch 36 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022755215138836386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4770>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3b4ef0; to 'JaxprTracer' at 0x7ffd5c3b7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64b1ad00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0071321200659608935
Epoch 36 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.026614567424508594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02661457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677370>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb50b6a0; to 'JaxprTracer' at 0x7ffbbb50bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x387eff10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007751030852320625
36, epoch_train_loss=0.25547717495787486
Epoch 37
Epoch 37 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022861333106255946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0a40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9332930; to 'JaxprTracer' at 0x7ffba93331a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c603dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011947408339587092
Epoch 37 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.02239354332112379, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02239354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afefb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13e8f40; to 'JaxprTracer' at 0x7ffbe13ea480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f059090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.011465832598653386
Epoch 37 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010977810995430876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01097781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6680>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93d8c770; to 'JaxprTracer' at 0x7ffb93d8db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3573a1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004187728485730744
Epoch 37 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.014072050660538392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01407205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5800>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe06e07c0; to 'JaxprTracer' at 0x7ffbe06e2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fbec650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009444787642896095
Epoch 37 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.02531054053836554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02531054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779e50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2778630; to 'JaxprTracer' at 0x7ffbe1c93bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e547320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.014047104958461974
Epoch 37 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.031216755203421383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03121676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2caee0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2146200; to 'JaxprTracer' at 0x7ffbe2147970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6350ad60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01530111476562082
Epoch 37 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.028828417459365437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02882842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2252730>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09d1e40; to 'JaxprTracer' at 0x7ffbe09d26b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e6be990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.015663931619374686
Epoch 37 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.026245944146811057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02624594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ca5850; to 'JaxprTracer' at 0x7ffbe1ca6160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73a92ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01271635140164183
Epoch 37 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01770287144180864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01770287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930af430>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0740810; to 'JaxprTracer' at 0x7ffbe0742bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65987f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0072566947326098375
Epoch 37 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02178332514342031, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02178333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657860>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa946110; to 'JaxprTracer' at 0x7ffbaa947f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x282fcaf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.011350973352627766
Epoch 37 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016375294420488306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01637529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1a080>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4e250; to 'JaxprTracer' at 0x7ffbe1a4da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x570cb3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.010388297755957687
Epoch 37 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02277490518972566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02277491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebac10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d099e0; to 'JaxprTracer' at 0x7ffbb917c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43f9a5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.009523874670943271
Epoch 37 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0236803445556181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4b10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4091530; to 'JaxprTracer' at 0x7ffdf40902c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50876150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009947015178319526
Epoch 37 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.028907238384386094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02890724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a580>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab79abb0; to 'JaxprTracer' at 0x7ffbab798d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65dd0500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.013286590308632853
Epoch 37 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.025228582843220132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02522858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cb260>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9361710; to 'JaxprTracer' at 0x7ffbb9363f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a0746d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010644340090767927
Epoch 37 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.024175871420003107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02417587, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251040>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93ba1120; to 'JaxprTracer' at 0x7ffb93ba11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x396d4ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009941360008785207
Epoch 37 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.024308042503091678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02430804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510a30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c9a700; to 'JaxprTracer' at 0x7ffbe1c9b830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66b89ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007896299279206235
Epoch 37 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023183384728388715, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b1c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93bdb100; to 'JaxprTracer' at 0x7ffd3c302ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a206f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009603098600422475
Epoch 37 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02610679113710327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02610679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68e10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5bf470; to 'JaxprTracer' at 0x7ffbbb5bfa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6991e1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011623948948898502
Epoch 37 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01868702340486817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01868702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d3ba0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c30b830; to 'JaxprTracer' at 0x7ffe3c30a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69007030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.009201146421938235
Epoch 37 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.025716266138425984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02571627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457d480>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1156200; to 'JaxprTracer' at 0x7ffbe1157060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fcc3b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.013888687289837116
Epoch 37 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02703625400313154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02703625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c504910>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcba13f0; to 'JaxprTracer' at 0x7ffbbcba0ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3be49c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012763101141024696
Epoch 37 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025528588646605836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02552859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052cda0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba936c1d0; to 'JaxprTracer' at 0x7ffba936cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fec6700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008932961683960674
Epoch 37 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.026022805641952834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02602281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc830>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0daf70; to 'JaxprTracer' at 0x7ffbbc0d87c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xedf5010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011590053245861685
Epoch 37 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021100788371054526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02110079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f94e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8871f0; to 'JaxprTracer' at 0x7ffbbc886f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78160d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.00873315084266181
Epoch 37 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021914385009951333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4cab0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9819f80; to 'JaxprTracer' at 0x7ffba981b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30c4a8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.008145611333207535
Epoch 37 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.026517272327278543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02651727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0a450>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24a3ce0; to 'JaxprTracer' at 0x7ffbbcbaab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59132160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.008608707467126733
37, epoch_train_loss=0.28810017216475636
Epoch 38
Epoch 38 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02644847997756336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02644848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc9d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfcf5b0; to 'JaxprTracer' at 0x7ffbbdfccdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x322168f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01287065259392425
Epoch 38 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.02136909246251388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bc300>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcba29d0; to 'JaxprTracer' at 0x7ffbbcba26b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2858d240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.011068128172540163
Epoch 38 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011478186262154607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01147819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fa370>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd136f0; to 'JaxprTracer' at 0x7ffbbdd11260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25555660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003884914714504335
Epoch 38 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01253672572085362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01253673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c49e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b07510; to 'JaxprTracer' at 0x7ffbe0b053f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8319efc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008584564454324057
Epoch 38 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01972687942690348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01972688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d27e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92e12110; to 'JaxprTracer' at 0x7ffb92e120c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66a35170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010078765473636305
Epoch 38 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025573623590015845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02557362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73b990>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafb4810; to 'JaxprTracer' at 0x7ffbbafb6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c3ec20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012631718968864612
Epoch 38 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.025000848102161858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02500085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795390>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40dc450; to 'JaxprTracer' at 0x7ffdf40de9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a1cb120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01247821582270919
Epoch 38 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023726876416767816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc9490>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa8dd760; to 'JaxprTracer' at 0x7ffbaa8dda80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x817c6990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012075185534492477
Epoch 38 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02121596844605144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27bb0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f370b0; to 'JaxprTracer' at 0x7ffbe0f368e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ba92ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003788627651745834
Epoch 38 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02149131659265228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02149132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4500b40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c46e700; to 'JaxprTracer' at 0x7ffe3c46e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ec52c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010565466010436179
Epoch 38 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01743544023797434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01743544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bf490>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd79f830; to 'JaxprTracer' at 0x7ffbe1587600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50687d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00944345561399215
Epoch 38 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022686941769057483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268694, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b69e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0743100; to 'JaxprTracer' at 0x7ffbe07431f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3631eb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008685142006900856
Epoch 38 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02329333286622244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02329333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f430>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd960270; to 'JaxprTracer' at 0x7ffbbd963f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d494af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009705087467500248
Epoch 38 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02893017519138058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02893018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec180>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb7d800; to 'JaxprTracer' at 0x7ffbbbb7e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x369463e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.013529036905203915
Epoch 38 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.025262851439494288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02526285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058350>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe214a160; to 'JaxprTracer' at 0x7ffdf42eb1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85b155e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010640066575304672
Epoch 38 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02417020090111468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0241702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8f10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93907830; to 'JaxprTracer' at 0x7ffb93906110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bd16e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00986554902301457
Epoch 38 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02493262038167354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02493262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cbcb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe3058a0; to 'JaxprTracer' at 0x7ffbbe3071a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2730baf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0076935365925183555
Epoch 38 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023838912771440582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02383891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30eae0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb16480; to 'JaxprTracer' at 0x7ffbbd152700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81304670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00948065238861127
Epoch 38 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02727192336511818, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02727192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77aaf0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c67ea70; to 'JaxprTracer' at 0x7ffc6c67c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66c17540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01090823228567927
Epoch 38 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.019612422301456184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01961242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4180>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9ca8540; to 'JaxprTracer' at 0x7ffbb9cab510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98928b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.009031574488180292
Epoch 38 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02620866903825271, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02620867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff380>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4689990; to 'JaxprTracer' at 0x7ffdd468ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x648b0040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.013162889532870856
Epoch 38 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027138475703194036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02713848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18a60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e0d800; to 'JaxprTracer' at 0x7ffbb8e0ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8356a210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011797233690804265
Epoch 38 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.026239323643652595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02623932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afff00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13eb060; to 'JaxprTracer' at 0x7ffbe13e8590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b303240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00824743568755274
Epoch 38 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024987095656135716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008f80>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf46b0540; to 'JaxprTracer' at 0x7ffdf46b0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fed1010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011134972455845446
Epoch 38 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023816948406498714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02381695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aca40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e0950; to 'JaxprTracer' at 0x7ffbbd1e35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f320e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.007077870226403387
Epoch 38 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021691334316830565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466fd00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad22b60; to 'JaxprTracer' at 0x7ffbbad23100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53255390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.008072746725039362
Epoch 38 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024723515844951593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02472352, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c5073e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c582570; to 'JaxprTracer' at 0x7ffd3c5826b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8321e640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007474704436533375
38, epoch_train_loss=0.26397642549913236
Epoch 39
Epoch 39 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022466978572090037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b9f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb89c860; to 'JaxprTracer' at 0x7ffbbb89ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5feafaf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011549201636952085
Epoch 39 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020090703727451368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0200907, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2000>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb935d58a0; to 'JaxprTracer' at 0x7ffb935d5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29c3c970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010869193373085744
Epoch 39 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009823460759058848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00982346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657dc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4cd300; to 'JaxprTracer' at 0x7ffbab4ccd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65711bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003894036586923147
Epoch 39 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01248870212740473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0124887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefd140>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe075a020; to 'JaxprTracer' at 0x7ffbe0759530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ee58450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.00804268487441604
Epoch 39 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020303974855917478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02030397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56080>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b1f30; to 'JaxprTracer' at 0x7ffd3c0b1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e91e5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010003480228632828
Epoch 39 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02700967574502935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02700968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccbe20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42e8d60; to 'JaxprTracer' at 0x7ffdf42ea7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de27200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.013808387082180297
Epoch 39 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02577557268700109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02577557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251550>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd9609a0; to 'JaxprTracer' at 0x7ffbbd961350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cb113a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012652888205798213
Epoch 39 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.024755647234276642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02475565, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250ae0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17f5670; to 'JaxprTracer' at 0x7ffbe17f4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72575170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.013312475613692119
Epoch 39 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02267226102044805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02267226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000ad90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c704f40; to 'JaxprTracer' at 0x7ffe2c706b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7eab85f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0029210123615856184
Epoch 39 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021026520165590343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02102652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6a90>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8552d40; to 'JaxprTracer' at 0x7ffba85520c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c1b7b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010719821193055328
Epoch 39 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017249214486962254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01724921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ffa50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73d9e0; to 'JaxprTracer' at 0x7ffdbc73c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f4aaa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009575029496137456
Epoch 39 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021470827543682576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02147083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc120>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98f7d30; to 'JaxprTracer' at 0x7ffba98f5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfc05d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.009156405847107453
Epoch 39 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.017934897054329848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0179349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07c280>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa10c70; to 'JaxprTracer' at 0x7ffbdfa13a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50c06810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.019730775449567223
Epoch 39 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.018298511000819397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01829851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c9160>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd743d7a60; to 'JaxprTracer' at 0x7ffd743d7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x366597c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.02506018369161039
Epoch 39 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.015090159127029431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01509016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacca920>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe02862f0; to 'JaxprTracer' at 0x7ffbaa8e9f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x282715b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.024862574012251115
Epoch 39 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.018895172697159495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01889517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22507c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d2520; to 'JaxprTracer' at 0x7ffbb96d1b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57da7650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.01853418333502142
Epoch 39 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021911021215416014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02191102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ecfa0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcf0cd10; to 'JaxprTracer' at 0x7ffbbcf0e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55c9d9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.015223673572766909
Epoch 39 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.01885828887484781, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01885829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d0f40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe2891c0; to 'JaxprTracer' at 0x7ffbbe28a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80bf2bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.018349655085650222
Epoch 39 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02225025933169152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f680>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0531800; to 'JaxprTracer' at 0x7ffbe0530270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x763092b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.014710819155242964
Epoch 39 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017633928324820223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01763393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4b00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d6b6a0; to 'JaxprTracer' at 0x7ffb92d6b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x615d4710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.009886666538847655
Epoch 39 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.019888528227881463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01988853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e480>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd12c00; to 'JaxprTracer' at 0x7ffbbdd12340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x14e9ca40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01935049692955182
Epoch 39 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.023106215905685228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02310622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45020e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa37a60; to 'JaxprTracer' at 0x7ffbdfa37740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c0fb220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.017096668939716567
Epoch 39 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02372815402478287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372815, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93349c00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba5003b0; to 'JaxprTracer' at 0x7ffbba502250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34c251e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.011742659466745516
Epoch 39 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.021893440864015474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c5078a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfcd0d0; to 'JaxprTracer' at 0x7ffbbb00cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75d43d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01619868769554104
Epoch 39 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.021833536347621477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02183354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e096e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe214dfd0; to 'JaxprTracer' at 0x7ffbe214c630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81ce3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.014588469677852245
Epoch 39 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.016927751434421243, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01692775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac75e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb932ee80; to 'JaxprTracer' at 0x7ffbb932c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7632d150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.018212040288773976
Epoch 39 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.020126846867429632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02012685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c4930>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c2cd8f0; to 'JaxprTracer' at 0x7ffc6c2ce520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77ad2fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.01648387931923477
39, epoch_train_loss=0.37653604965794024
Epoch 40
Epoch 40 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.012777986342273845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01277799, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ac270>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd5f290; to 'JaxprTracer' at 0x7ffbba9b58f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x230aa920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.02580491765401807
Epoch 40 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.010572201294705898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0105722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779da0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd30400; to 'JaxprTracer' at 0x7ffbbdd330b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24a70100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.026122129543016435
Epoch 40 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009261599323340874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0092616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25b40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab177420; to 'JaxprTracer' at 0x7ffbab1762f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3472dc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003969284808713814
Epoch 40 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.00931083713031276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00931084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c7b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c303600; to 'JaxprTracer' at 0x7ffd3c3001d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48972f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008421126869910332
Epoch 40 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.009378267706286914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00937827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2650>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb928b31f0; to 'JaxprTracer' at 0x7ffb928b0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a9f3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.026387820169703317
Epoch 40 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.01525974030039949, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01525974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739380>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8582570; to 'JaxprTracer' at 0x7ffbbbb87b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35da0d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.0255245185589052
Epoch 40 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.014899775363911818, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01489978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f78f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0536980; to 'JaxprTracer' at 0x7ffbe0535850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59976f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.025566865161444626
Epoch 40 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01502794110272765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01502794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253130>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93561a80; to 'JaxprTracer' at 0x7ffb935621b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x797b7610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.025102342737510386
Epoch 40 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02269341442131593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02269341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507840>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8af8d10; to 'JaxprTracer' at 0x7ffba8afb790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x809f0450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0032587655347433913
Epoch 40 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.01476503951943659, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01476504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f42e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd744d78d0; to 'JaxprTracer' at 0x7ffd744d49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f279650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.026115236743198187
Epoch 40 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.013060102610905252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0130601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778d70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f8e480; to 'JaxprTracer' at 0x7ffbe0f8e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6463a7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.019076525549234464
Epoch 40 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.015378571141105659, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01537857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26330>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dc5df0; to 'JaxprTracer' at 0x7ffbbb05a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a1d2b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.023285196209592872
Epoch 40 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.01345295465820034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01345295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a080>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0740cc0; to 'JaxprTracer' at 0x7ffbabbd2bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a2bd620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.025909940280218743
Epoch 40 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.016639116417462286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01663912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513a50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2b3290; to 'JaxprTracer' at 0x7ffd5c2b2e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5efeeb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.025381273508347152
Epoch 40 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.013945581103912507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01394558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa949cb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20d24d0; to 'JaxprTracer' at 0x7ffbe20d14e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2874d1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.026006410724445594
Epoch 40 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.013497947126210927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01349795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22535c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2147f60; to 'JaxprTracer' at 0x7ffbe2145fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75834a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.02590997030058091
Epoch 40 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.017812029539910457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01781203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059830>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe10059e0; to 'JaxprTracer' at 0x7ffbe1007650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37bc1e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.020801086749089714
Epoch 40 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.014696989516295155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01469699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8270>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd150e50; to 'JaxprTracer' at 0x7ffbbd152340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69414f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.02559997958336093
Epoch 40 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02006395520916179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02006396, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca8a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb99d3470; to 'JaxprTracer' at 0x7ffbb99d3100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86bf30b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.021525749200770817
Epoch 40 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.019005083846515152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01900508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30eed0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f569d0; to 'JaxprTracer' at 0x7ffbe0f57e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34df5230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.00648393133971183
Epoch 40 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.01585183720182881, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01585184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefd4c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe25bc40; to 'JaxprTracer' at 0x7ffbbe2598a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x576c36d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.0274757540115007
Epoch 40 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.017436930654532633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01743693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba400>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab236250; to 'JaxprTracer' at 0x7ffbab237f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c528a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.025450963427480613
Epoch 40 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.020565652588590548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02056565, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc655510>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc12a890; to 'JaxprTracer' at 0x7ffbbc12b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3718e9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.017563524750452825
Epoch 40 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.014688881654854795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01468888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c76d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7d8db0; to 'JaxprTracer' at 0x7ffbbd7d9440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c21d550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.02528045710214557
Epoch 40 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02065335796887459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02065336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68b20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc1cfe0; to 'JaxprTracer' at 0x7ffbbcc1e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb22b3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.015201926671663223
Epoch 40 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022985931850591244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02298593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5350>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0daac0; to 'JaxprTracer' at 0x7ffbbc0db790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10ab1720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007777914182434729
Epoch 40 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.020055352451182774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02005535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6600>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9b1d1c0; to 'JaxprTracer' at 0x7ffd5c2a3290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x823e3740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.016193680066035582
40, epoch_train_loss=0.5511972914382299
Epoch 41
Epoch 41 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.012003384752865305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01200338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1720>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c22ebb0; to 'JaxprTracer' at 0x7ffe3c22de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfb87120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.025930522281385194
Epoch 41 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01020752803763932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01020753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b6c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c502340; to 'JaxprTracer' at 0x7ffe2c500720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43b40710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.025826918060130176
Epoch 41 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009139979654533973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00913998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb9ca0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7d7f10; to 'JaxprTracer' at 0x7ffd3c7d6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cd528d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003894194989661601
Epoch 41 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010473539399358939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01047354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677940>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c331990; to 'JaxprTracer' at 0x7ffc6c333d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53a310d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.007510372408117212
Epoch 41 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017572452286350546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01757245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305bfa0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc2e0f40; to 'JaxprTracer' at 0x7ffdbc2e2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f7bc0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010893021435071886
Epoch 41 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02407159592013542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0240716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930af670>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7d3f60; to 'JaxprTracer' at 0x7ffd3c7d1210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7abd2c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.014657463650636303
Epoch 41 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021292248899442052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02129225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4ce0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabae33d0; to 'JaxprTracer' at 0x7ffbabae1170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x353913a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012230464370996284
Epoch 41 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021560214372709073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02156021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6690>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17f7600; to 'JaxprTracer' at 0x7ffbe17f7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ba47a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012578296761964878
Epoch 41 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.01994420149882926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0199442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c43d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab4b69d0; to 'JaxprTracer' at 0x7ffd3c047100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7181a190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0028872475168056837
Epoch 41 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023080003997156873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57100>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba85539c0; to 'JaxprTracer' at 0x7ffdd46bd8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72ef9d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.01036806760870829
Epoch 41 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0198216553712804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01982166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e2cc0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4dcb0; to 'JaxprTracer' at 0x7ffbe1a4ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77ea68b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.010345772438822164
Epoch 41 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021158977737162996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba780>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73cfe0; to 'JaxprTracer' at 0x7ffe3c0a2570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3701f3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.009170441392114035
Epoch 41 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020020412214367997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02002041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cbc40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe04db20; to 'JaxprTracer' at 0x7ffbbe04e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39760fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.010574080641042698
Epoch 41 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025447910582014982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02544791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305acd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad1bdd0; to 'JaxprTracer' at 0x7ffbbad188b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52851000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011971704187667617
Epoch 41 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022711746787384822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02271175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aec20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2a3e20; to 'JaxprTracer' at 0x7ffe2c2a28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a60a440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010427509610292788
Epoch 41 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022204233588939467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02220423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6410>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcea7bf0; to 'JaxprTracer' at 0x7ffbbcea72e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f0a76c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009733679486091015
Epoch 41 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.024143491035475886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02414349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d580>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9583c90; to 'JaxprTracer' at 0x7ffba9583600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x575c4e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.008065974887885987
Epoch 41 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023664179930014632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5135e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2060540; to 'JaxprTracer' at 0x7ffbe2062840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37add8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009636825174985082
Epoch 41 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.027686168434565013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02768617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eea60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c4b3e20; to 'JaxprTracer' at 0x7ffc6c4b0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c1b9dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01190747803514054
Epoch 41 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018678989209405764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01867899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4098a70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0ba4040; to 'JaxprTracer' at 0x7ffb92dd9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x401e6b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007699082455872337
Epoch 41 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02555623318601736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02555623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457d440>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd186bb0; to 'JaxprTracer' at 0x7ffbbd184b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d4ca490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012756921663333068
Epoch 41 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02709704126866112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02709704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334aaf0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaf4cea0; to 'JaxprTracer' at 0x7ffbaaf4ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1337a570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011842053332595082
Epoch 41 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024440125372285244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02444013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bedf0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c48eed0; to 'JaxprTracer' at 0x7ffe3c48df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45a590d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008435740607483564
Epoch 41 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.021538929175449105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5f00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd57010; to 'JaxprTracer' at 0x7ffbbbd54a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20e66050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011220936655006009
Epoch 41 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023007452220713594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02300745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ba30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa47c180; to 'JaxprTracer' at 0x7ffbbb00efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b3fda10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006854840024417162
Epoch 41 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022155792801227776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf199d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93589530; to 'JaxprTracer' at 0x7ffb9358b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x823a5e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007089670782791431
Epoch 41 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02595083356619407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02595083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4500530>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8aab1a0; to 'JaxprTracer' at 0x7ffba8ae0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49debb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007921933422496048
41, epoch_train_loss=0.29243121388151416
Epoch 42
Epoch 42 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020594984885833355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02059498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4e110>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c31e570; to 'JaxprTracer' at 0x7ffd5c31c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x116e9880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012761948173501892
Epoch 42 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01776238075674242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01776238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ffc30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7ffd30; to 'JaxprTracer' at 0x7ffbab7ff880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c3696b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010032906425319154
Epoch 42 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010683278929426037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01068328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457ee50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb910ad40; to 'JaxprTracer' at 0x7ffbb910bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2439c950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0038638361605856236
Epoch 42 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010177213170242424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01017721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511640>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabbfa980; to 'JaxprTracer' at 0x7ffbabbf8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58689930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008157344553361643
Epoch 42 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018639985066738085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01863999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b510>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c0bd80; to 'JaxprTracer' at 0x7ffb93c0ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x502c98f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010051692616625878
Epoch 42 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02490572345223003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02490572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466cda0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8dd1da0; to 'JaxprTracer' at 0x7ffbe15b83b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a005340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.013820413476504777
Epoch 42 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02190288783637935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fb9f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e34630; to 'JaxprTracer' at 0x7ffb93e345e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x497448e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011729259630883438
Epoch 42 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02124802532944966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930adbd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad85c10; to 'JaxprTracer' at 0x7ffbbad855d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80654910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012203393595704016
Epoch 42 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0213394041960642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0213394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b7e40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc5631f0; to 'JaxprTracer' at 0x7ffba901bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f0e3a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.001985976886804564
Epoch 42 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02080980324659238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0208098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0d50>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafce160; to 'JaxprTracer' at 0x7ffe3c46ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x297ae740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.011085642474650157
Epoch 42 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.015728102603454665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0157281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5d60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c274130; to 'JaxprTracer' at 0x7ffe3c2779c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2723e370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.010644795396128276
Epoch 42 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021012811151277698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02101281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457ef10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b88400; to 'JaxprTracer' at 0x7ffbe0b8b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x629152a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.010025817686702493
Epoch 42 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021741781343348927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a900>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b29e90; to 'JaxprTracer' at 0x7ffbe0b29850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36c34d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.01027021961022899
Epoch 42 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.027051105465733194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02705111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1060>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc5f4040; to 'JaxprTracer' at 0x7ffbb91732e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ce3b1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012098306330725847
Epoch 42 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02456740974856888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02456741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f42b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc6b6a0; to 'JaxprTracer' at 0x7ffbbcc69c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x747a05b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010419433283187996
Epoch 42 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.023073246094416824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02307325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ac7a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb298e50; to 'JaxprTracer' at 0x7ffd9c4f60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x451bb510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009697136746988355
Epoch 42 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023330319414475317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02333032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22536f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4090270; to 'JaxprTracer' at 0x7ffdf4093b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x461576e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007362285751460134
Epoch 42 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022796524024061685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02279652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059810>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbca250; to 'JaxprTracer' at 0x7ffbbcbcaca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f257e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009345254714758803
Epoch 42 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02607266831944494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02607267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccba80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c332cf0; to 'JaxprTracer' at 0x7ffbe09b9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43a16390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011725224279846024
Epoch 42 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01669541579891219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01669542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30cc10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9ca9ee0; to 'JaxprTracer' at 0x7ffbb9ca8c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b4d3c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006919026456397528
Epoch 42 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024402318869887446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02440232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affe40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe06e0f40; to 'JaxprTracer' at 0x7ffbb99d0e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d722490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012600282630891035
Epoch 42 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026840337505365092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02684034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e0850>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc50cd60; to 'JaxprTracer' at 0x7ffe3c2111c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d827040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01246081052603463
Epoch 42 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023618005375517, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7bf0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb89dc10; to 'JaxprTracer' at 0x7ffbbb89ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58aea270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008484684077264748
Epoch 42 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023357710922913433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02335771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4501e50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd40b67a0; to 'JaxprTracer' at 0x7ffdd40b5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c7dcf70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011265700585839353
Epoch 42 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02174862796080355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c68e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8b0c0e0; to 'JaxprTracer' at 0x7ffbe20ad120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80a3ecf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.00657769121627415
Epoch 42 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02069158086047697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02069158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bfc80>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8534220; to 'JaxprTracer' at 0x7ffba8535710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b53e670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.00737428857343778
Epoch 42 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024587473287797038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02458747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6000>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c39c270; to 'JaxprTracer' at 0x7ffc6c39c2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e733ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007186327671017673
42, epoch_train_loss=0.260149699531125
Epoch 43
Epoch 43 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020761318795185262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02076132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d490>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c22fab0; to 'JaxprTracer' at 0x7ffe3c22cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd8b46e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011845252174111077
Epoch 43 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018199313805508145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01819931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a694a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87c10d0; to 'JaxprTracer' at 0x7ffba87c11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65941660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.01068023200713711
Epoch 43 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010117281148259607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01011728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bdf40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba78e520; to 'JaxprTracer' at 0x7ffbba78cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35435c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0037656185234776146
Epoch 43 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011058003951197432, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.011058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affc00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98955d0; to 'JaxprTracer' at 0x7ffbbcc37bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67191230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008965943704808514
Epoch 43 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020039682612801042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02003968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930586f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b16c0; to 'JaxprTracer' at 0x7ffd3c0b18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7346a6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010081245608147245
Epoch 43 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025691484047700785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02569148, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefc8d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc6bc40; to 'JaxprTracer' at 0x7ffbbcc68040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x488a2270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012483792102541243
Epoch 43 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02301416402680749, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02301416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f5260>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2a2fc0; to 'JaxprTracer' at 0x7ffd5c2a15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43dbcf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011644556507889937
Epoch 43 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022654420368957297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7e40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b29b70; to 'JaxprTracer' at 0x7ffbe0b2a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c1ed9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012404572854943844
Epoch 43 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022640664221383115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6576d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44f9120; to 'JaxprTracer' at 0x7ffdd44fbec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x379e2160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004536970382160124
Epoch 43 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021154764509309584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02115476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099830>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09d1fd0; to 'JaxprTracer' at 0x7ffbe09d06d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b7567c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00944319379361468
Epoch 43 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.015615831405591573, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01561583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c84e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98cf1f0; to 'JaxprTracer' at 0x7ffba98ce2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a4895d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008979247263027994
Epoch 43 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021261863598892913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02126186, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bff70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c1b76a0; to 'JaxprTracer' at 0x7ffe3c1b7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64978e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008636624576000018
Epoch 43 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021430903015997923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0214309, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c200>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8dc2020; to 'JaxprTracer' at 0x7ffdd4084d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5073efd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009459146639719706
Epoch 43 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026288209007474736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02628821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253a10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb930431a0; to 'JaxprTracer' at 0x7ffb930416c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771c14b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012227303337043832
Epoch 43 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02355094712120458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff000>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9397d6c0; to 'JaxprTracer' at 0x7ffba9865a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73b2a0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010125756498620972
Epoch 43 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02246374149316131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f49d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe2706d0; to 'JaxprTracer' at 0x7ffbbe273bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x767aaca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009600326707281216
Epoch 43 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023272396427858423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0232724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466ed50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c543290; to 'JaxprTracer' at 0x7ffe2c541ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d491c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007350049488469316
Epoch 43 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02207485950840658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d9a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e58180; to 'JaxprTracer' at 0x7ffbb8e59760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3499e440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00903473636190664
Epoch 43 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02558557714404242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02558558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67e0f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93ba1800; to 'JaxprTracer' at 0x7ffb93ba3ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b847a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010602466297000533
Epoch 43 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01688608628219076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01688609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eec70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7470b8d0; to 'JaxprTracer' at 0x7ffd7470bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82f3da30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006888423961580125
Epoch 43 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02275386805925721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d1330>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7468a1b0; to 'JaxprTracer' at 0x7ffd7468b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bbefc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01132385474703503
Epoch 43 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025396342904838075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02539634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f6d10>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfca7a0; to 'JaxprTracer' at 0x7ffbbdfc9d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a247c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011941660416820326
Epoch 43 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023818193919076643, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02381819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18070>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabc37830; to 'JaxprTracer' at 0x7ffd5c1db100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e135790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008504581792791496
Epoch 43 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.021954189588622806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02195419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c66b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc711760; to 'JaxprTracer' at 0x7ffdbc713ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a25aea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011403752851972029
Epoch 43 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0225337436427565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4def0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba9b4d60; to 'JaxprTracer' at 0x7ffbba9b43b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a8cb740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006503170652617515
Epoch 43 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02069113987611985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02069114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aeac0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb968fba0; to 'JaxprTracer' at 0x7ffbb968d0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41c26480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007221940804565973
Epoch 43 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024245971435126575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02424597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacca1d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa6b5b20; to 'JaxprTracer' at 0x7ffbaa6b5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x14d8fdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007378383984254591
43, epoch_train_loss=0.2530328040395387
Epoch 44
Epoch 44 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.019926424051834955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01992642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5250>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb996eca0; to 'JaxprTracer' at 0x7ffbb996fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67d014a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011992559774830283
Epoch 44 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018187168076164016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01818717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a090>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0484900; to 'JaxprTracer' at 0x7ffbe04871f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a308960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010080499500115556
Epoch 44 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010826164010209435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01082616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4f5f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e70770; to 'JaxprTracer' at 0x7ffbb8e72430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x678fe4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.00425185245678726
Epoch 44 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011131377852608912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01113138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2130>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17b31f0; to 'JaxprTracer' at 0x7ffbe17b2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b07bb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009435299811723577
Epoch 44 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.020795683501416744, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c110>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15bb290; to 'JaxprTracer' at 0x7ffbe15bad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67ab0970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.01042539280165005
Epoch 44 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025789926065685927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02578993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466f8b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e37b00; to 'JaxprTracer' at 0x7ffb93e35df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x341ef8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.013149484338845075
Epoch 44 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023359845140559273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02335985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45027b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24a2250; to 'JaxprTracer' at 0x7ffbe24a3330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x416fdaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011805577837702514
Epoch 44 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0233806692720596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02338067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4800>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4e340; to 'JaxprTracer' at 0x7ffbe1a4cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d425d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012349386169560215
Epoch 44 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022687753957400414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c4400>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98f7d30; to 'JaxprTracer' at 0x7ffba98f6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b1afc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0034585976466700065
Epoch 44 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.020857916332335247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02085792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94aef0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73e930; to 'JaxprTracer' at 0x7ffdbc73f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d69ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010174260155228123
Epoch 44 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.015886248274078384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01588625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77b1d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e2570; to 'JaxprTracer' at 0x7ffbbd1e0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x832dcba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009593780867686242
Epoch 44 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02009832088768318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02009832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fe620>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabae2e30; to 'JaxprTracer' at 0x7ffbabae3790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bc78390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.009356323709538504
Epoch 44 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020099367910127196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02009937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ed2e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9395de40; to 'JaxprTracer' at 0x7ffb9395d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5978d2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.010302443952588246
Epoch 44 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.023958757208750632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d520>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c4761b0; to 'JaxprTracer' at 0x7ffd5c4753f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57057530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012690962095222164
Epoch 44 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02206724607523819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3123a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1f2ca90; to 'JaxprTracer' at 0x7ffbe1f2f4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x576e7da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010066922416544987
Epoch 44 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021231587791895115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123159, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4070>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7d2e30; to 'JaxprTracer' at 0x7ffd3c7d3880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x519678e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009922285710921255
Epoch 44 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022506975137489883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fb830>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc4ffb0; to 'JaxprTracer' at 0x7ffbbcc4f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36951e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0074195293754398955
Epoch 44 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021965733361951685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff830>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4550860; to 'JaxprTracer' at 0x7ffbaacc3ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x367a9f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009265307402282883
Epoch 44 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025380228621503523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02538023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7974d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c3322a0; to 'JaxprTracer' at 0x7ffbe0d5c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a1cbbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011530825172356986
Epoch 44 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016923388566530147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01692339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059300>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb90d3fb0; to 'JaxprTracer' at 0x7ffbb90d30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e945f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.00575579260658286
Epoch 44 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.018708683104506723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01870868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc676550>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c485260; to 'JaxprTracer' at 0x7ffd9c484040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e207280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012698266737410398
Epoch 44 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026071798755617423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0260718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e0bc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0034ef0; to 'JaxprTracer' at 0x7ffbe0034310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fe57460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.013071997325975112
Epoch 44 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025414716561731554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02541472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb90e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87c3830; to 'JaxprTracer' at 0x7ffba87c3920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x356f2dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008711619123785075
Epoch 44 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023705347258674063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb9c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0d9670; to 'JaxprTracer' at 0x7ffba8db7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83771c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011610585915419452
Epoch 44 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023674923019470755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009060>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc356fc0; to 'JaxprTracer' at 0x7ffbbc354040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58893260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005985058451985564
Epoch 44 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02115030455484691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0211503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc655870>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d692b0; to 'JaxprTracer' at 0x7ffb92d689a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78cd6e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006990865644560069
Epoch 44 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024001918070904103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02400192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26ea0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9aa020; to 'JaxprTracer' at 0x7ffbbcbfdb70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78efda00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007191947232799793
44, epoch_train_loss=0.25928742423421214
Epoch 45
Epoch 45 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.018142303345273742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0181423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30ce30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c77ac00; to 'JaxprTracer' at 0x7ffd3c778590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cffbcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012604358193571455
Epoch 45 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017139776508612255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01713978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507b10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c129300; to 'JaxprTracer' at 0x7ffd5c129e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b83c5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010631392576820676
Epoch 45 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010544557799647811, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01054456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b980>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c937e0; to 'JaxprTracer' at 0x7ffbe1c938d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c9e54f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004163122954219278
Epoch 45 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01024294695283324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01024295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe5c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe075a020; to 'JaxprTracer' at 0x7ffdf42558a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x658cc6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009991070159588932
Epoch 45 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01990244411578751, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01990244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250360>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc4de90; to 'JaxprTracer' at 0x7ffbbcc4d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34b218b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010746798039304992
Epoch 45 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023816140835305002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02381614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7d60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1f2dfd0; to 'JaxprTracer' at 0x7ffbe1f2eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x738e5a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012250397482363673
Epoch 45 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022842609857648175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311870>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcab560; to 'JaxprTracer' at 0x7ffbbdcabf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41bdc200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011236972547365828
Epoch 45 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022673196628164055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0226732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310b10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c7044a0; to 'JaxprTracer' at 0x7ffe2c704bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e4bf020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011738149632081021
Epoch 45 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021727380270714938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc9b50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44faa70; to 'JaxprTracer' at 0x7ffdd44fb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e61fc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0029234168035810314
Epoch 45 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021160972557205785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02116097, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19880>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb999d8f0; to 'JaxprTracer' at 0x7ffbbcc68680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63dab80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010026886982401713
Epoch 45 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.015925972605219826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01592597, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0b60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe207ff60; to 'JaxprTracer' at 0x7ffd9c68ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47544eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009300441449694245
Epoch 45 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.020671242971210386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02067124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000ae90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf429e5c0; to 'JaxprTracer' at 0x7ffdf429f4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73141ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00873161354918942
Epoch 45 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021007531458935667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02100753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92aff570>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87e0900; to 'JaxprTracer' at 0x7ffba87e1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c484c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009550001617728713
Epoch 45 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02525263511279482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02525264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd830>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcd3c90; to 'JaxprTracer' at 0x7ffbbdcd3240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a206f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01264098435028582
Epoch 45 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023415351792301677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02341535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6c50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93355850; to 'JaxprTracer' at 0x7ffb93355a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bf964b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010266292423089497
Epoch 45 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022139519115103156, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310730>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3fc4f0; to 'JaxprTracer' at 0x7ffd5c3fd3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b904490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009748638359964838
Epoch 45 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02278295727376843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ce60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7a4090; to 'JaxprTracer' at 0x7ffbab7a4e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40b37940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007213600322273069
Epoch 45 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02204190376773705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67e050>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdff3790; to 'JaxprTracer' at 0x7ffbbdff2ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59f14ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009124908127170366
Epoch 45 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025110988252974864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02511099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511f40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e5b510; to 'JaxprTracer' at 0x7ffbb8e5ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55ff3100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011274640867758845
Epoch 45 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016779680156086482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01677968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7610>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe22e6890; to 'JaxprTracer' at 0x7ffbe22e5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x153c5610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006418111357363061
Epoch 45 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022267655603987208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e1a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba55bb50; to 'JaxprTracer' at 0x7ffbba55b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x304a3710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011546290021746466
Epoch 45 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025857386647957458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02585739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779b70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba55a390; to 'JaxprTracer' at 0x7ffbba55b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x730c1630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01260230837279474
Epoch 45 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024628563020642348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73aea0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc858a0; to 'JaxprTracer' at 0x7ffbbdc84d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6741b120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008322081986710155
Epoch 45 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02367509046296667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26f20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c111ad0; to 'JaxprTracer' at 0x7ffd9c1118a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f876980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011256974285435721
Epoch 45 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022912536704385634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291254, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c66c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7fc810; to 'JaxprTracer' at 0x7ffbab7fd1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a5638e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006024468037940391
Epoch 45 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020918567303882633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02091857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930acda0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd44ceb60; to 'JaxprTracer' at 0x7ffbbc8e12b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67f26950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0070864614691083525
Epoch 45 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02397538781228795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466d9d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7946d0; to 'JaxprTracer' at 0x7ffbbd794540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x361c3e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007191124331419038
45, epoch_train_loss=0.25461150630097135
Epoch 46
Epoch 46 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02039393165284312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02039393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefe080>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93a0c70; to 'JaxprTracer' at 0x7ffbb93a08b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x727b0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011287924756440434
Epoch 46 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017439520027265308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01743952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f54d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0ba6520; to 'JaxprTracer' at 0x7ffbe0ba5f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x835065e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010460588942793284
Epoch 46 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010300239073600163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01030024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a970>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2062070; to 'JaxprTracer' at 0x7ffbe2063240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24dec9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0033570870560472557
Epoch 46 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.00926377182559999, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00926377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f62c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c31800; to 'JaxprTracer' at 0x7ffbe1c314e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6848be60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009722028713361086
Epoch 46 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01834260726814582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01834261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d2d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2eade0; to 'JaxprTracer' at 0x7ffd5c2eb330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a31afc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010007346499012595
Epoch 46 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.0233974435216577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02339744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7be960>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd413cea0; to 'JaxprTracer' at 0x7ffdd413e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43bdfb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011926353327543972
Epoch 46 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022345778329975547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0a050>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40dd620; to 'JaxprTracer' at 0x7ffdf40dc2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bb967d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011293591453159934
Epoch 46 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022367247073882976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250cd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7458c6d0; to 'JaxprTracer' at 0x7ffd7458fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b541460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011683069690060544
Epoch 46 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022289185476156975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02228919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe240c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8fbb00; to 'JaxprTracer' at 0x7ffbbc8f9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32d157b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.00296201007663785
Epoch 46 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022570128166930995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa564b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa07eca0; to 'JaxprTracer' at 0x7ffbaa07c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dea2920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009339490974296314
Epoch 46 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017098637495337805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01709864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6e90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c2a7920; to 'JaxprTracer' at 0x7ffc6c2a43b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x205e1ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009010105748474696
Epoch 46 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021979382962596564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02197938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a710>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc5366b0; to 'JaxprTracer' at 0x7ffdbc536e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3af711c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00832737509691902
Epoch 46 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02215302744402099, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d3240>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17f53f0; to 'JaxprTracer' at 0x7ffbe17f6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x755c3f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009369630666058656
Epoch 46 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02561875340375464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02561875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052cba0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1850540; to 'JaxprTracer' at 0x7ffbe1853c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ed51480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011977784655024174
Epoch 46 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022968644897900667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4501c40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93932de0; to 'JaxprTracer' at 0x7ffbbd962160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x365fe6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009735558031388106
Epoch 46 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02157816508623415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02157817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250990>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba93339c0; to 'JaxprTracer' at 0x7ffba9330450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc52720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009402893117072477
Epoch 46 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021331541297854122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677620>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1007560; to 'JaxprTracer' at 0x7ffbe1006430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e44ab70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007258123616371546
Epoch 46 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021332087276139035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe0e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b15d0; to 'JaxprTracer' at 0x7ffd3c0b09f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3215cee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008906430332144518
Epoch 46 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02447842380278093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02447842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8da0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa412390; to 'JaxprTracer' at 0x7ffbaa410b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72239920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010600445999024434
Epoch 46 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016690923386899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01669092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008280>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd147740; to 'JaxprTracer' at 0x7ffdd44b0d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7825d810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006505426746386769
Epoch 46 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02319708975774612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02319709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5dd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdffa9710; to 'JaxprTracer' at 0x7ffbdffabba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f4ceed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01148503941068451
Epoch 46 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02784305916839357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02784306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30fa80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba78c4a0; to 'JaxprTracer' at 0x7ffbba78ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d8520e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01242009596039387
Epoch 46 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025033655767497102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02503366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507740>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6729d0; to 'JaxprTracer' at 0x7ffdbc672200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x401f2880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008283107478993893
Epoch 46 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024493472703024415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02449347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466ea80>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb89ff10; to 'JaxprTracer' at 0x7ffbbb89f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x835615a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01137766559808572
Epoch 46 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022709891916415457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02270989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb3b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2eebb0; to 'JaxprTracer' at 0x7ffe2c2ef1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5add6ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.0058342448620626545
Epoch 46 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020790206348930775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02079021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c9bb0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc713fb0; to 'JaxprTracer' at 0x7ffdbc711e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ff3f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006718449168397603
Epoch 46 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023777816543350542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02377782, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3136d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1805a30; to 'JaxprTracer' at 0x7ffbe1805b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b349ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007231686625050102
46, epoch_train_loss=0.24648355460188606
Epoch 47
Epoch 47 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02051819871899025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0205182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ed980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c21850; to 'JaxprTracer' at 0x7ffbb9c23ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd73f0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011470983836714483
Epoch 47 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017075476534738007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01707548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cbe50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7d7420; to 'JaxprTracer' at 0x7ffbab7d79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f2c2e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009978585791049311
Epoch 47 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009920633954314112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00992063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a3470>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabaec1d0; to 'JaxprTracer' at 0x7ffbabaef510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d396ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003244285795292701
Epoch 47 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009759488540416753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00975949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afebc0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c1611c0; to 'JaxprTracer' at 0x7ffe3c162980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f488440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009101308198195456
Epoch 47 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018750434771430808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01875043, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253770>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7d2d90; to 'JaxprTracer' at 0x7ffd3c0b1c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e861ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009541725831298661
Epoch 47 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024948694767645264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02494869, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c4590>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c475800; to 'JaxprTracer' at 0x7ffd5c475580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60056030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011975315467846913
Epoch 47 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022147049919002123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02214705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6ac20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba84b0b80; to 'JaxprTracer' at 0x7ffba84b2520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x728d2ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011260546954098834
Epoch 47 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0224798809354632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a220>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87e2fc0; to 'JaxprTracer' at 0x7ffba87e04f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48ac90d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011639088658882362
Epoch 47 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02185289447172439, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02185289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466cf30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d2250; to 'JaxprTracer' at 0x7ffbb96d0f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a284be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0029112982323875164
Epoch 47 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02221978502002685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02221979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b370>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c275030; to 'JaxprTracer' at 0x7ffe3c274db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x857b4c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009168650971865398
Epoch 47 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0164729531418826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01647295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb550>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa07e020; to 'JaxprTracer' at 0x7ffe3c1e3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a468310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008724636620954643
Epoch 47 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02186869738401085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218687, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac72b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd744d5b20; to 'JaxprTracer' at 0x7ffd744d6250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfb62d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008213881290090189
Epoch 47 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021710330264597053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afd290>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1489e90; to 'JaxprTracer' at 0x7ffbab809df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40e17680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009124998402099
Epoch 47 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02519480701207435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02519481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251570>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c232200; to 'JaxprTracer' at 0x7ffd5c231710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29efe770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011779619069211943
Epoch 47 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02265483284904272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c40e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd5e980; to 'JaxprTracer' at 0x7ffbe11b1940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x881ca30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009364385108825797
Epoch 47 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02168388435098285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68de0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dbd3a0; to 'JaxprTracer' at 0x7ffb93dbe660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x701a7ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00893760035385552
Epoch 47 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022192356086698867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d0b30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa12750; to 'JaxprTracer' at 0x7ffbdfa13970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34e33600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006804897263526533
Epoch 47 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021681726430056475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168173, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f6350>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd757290; to 'JaxprTracer' at 0x7ffd743d66b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16c5cbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00848385054001229
Epoch 47 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02482503225500377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02482503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fe7d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c4170b0; to 'JaxprTracer' at 0x7ffd5c4168e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6be65ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010485288454459474
Epoch 47 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016878963486439278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01687896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779d50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9bab010; to 'JaxprTracer' at 0x7ffba9baad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71787310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006420735699199031
Epoch 47 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023163188808324443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02316319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b68c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9582340; to 'JaxprTracer' at 0x7ffbdfdae7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e08da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011886296348664678
Epoch 47 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02715103537731631, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02715104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f49b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7019e0; to 'JaxprTracer' at 0x7ffd3c7006d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47d85b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012286171525135569
Epoch 47 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025290227924924753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa54af0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7b5e90; to 'JaxprTracer' at 0x7ffbab7b6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb79450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007967824331673416
Epoch 47 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024442201347963946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0244422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c312900>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c353010; to 'JaxprTracer' at 0x7ffd9c351e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fe9f470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011054890668162228
Epoch 47 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02315574509636675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02315575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe26fd0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcb8810; to 'JaxprTracer' at 0x7ffbbdcb8130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d490d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.0052947566233056366
Epoch 47 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021321334643646724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02132133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657220>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2ec2c0; to 'JaxprTracer' at 0x7ffbbc884090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54149ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006338201920542683
Epoch 47 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024307680365961953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02430768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f110>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0facf0; to 'JaxprTracer' at 0x7ffbbc0fb1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d36bac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006922117253106316
47, epoch_train_loss=0.2403819412104566
Epoch 48
Epoch 48 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02099989442315975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02099989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6745d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e6e4d0; to 'JaxprTracer' at 0x7ffbb8e6eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43144020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011170680924186658
Epoch 48 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017296956240069546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01729696, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a930>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbacd6c50; to 'JaxprTracer' at 0x7ffbb932f880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11853810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009747393752145105
Epoch 48 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009639116111415843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00963912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefe400>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3c61b0; to 'JaxprTracer' at 0x7ffbbc3c6250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2556a9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003171204303757183
Epoch 48 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009693268567973708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00969327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c9f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb928b2070; to 'JaxprTracer' at 0x7ffb928b2b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5548e920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008911129323501538
Epoch 48 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018285508890061766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01828551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2e00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7a7ec0; to 'JaxprTracer' at 0x7ffd3c7a6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x655e80f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009288038848894634
Epoch 48 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024251672591400833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02425167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5e40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1155fd0; to 'JaxprTracer' at 0x7ffbe1155e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29738a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011401070508670378
Epoch 48 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02168410873574993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02168411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d1a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbdb1f0; to 'JaxprTracer' at 0x7ffbbbd56160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c5e30b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01076760273290213
Epoch 48 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022614664752882433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052fab0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab80b380; to 'JaxprTracer' at 0x7ffbab80b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57d59160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011362228551877664
Epoch 48 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021158203930935295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0211582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a5e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafcd4e0; to 'JaxprTracer' at 0x7ffd744d6f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d8e5f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0023084388050804653
Epoch 48 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02242063707462604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f88c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c68c130; to 'JaxprTracer' at 0x7ffd9c68f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f29e530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008825012469480134
Epoch 48 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017012484477571446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01701248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502600>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c277150; to 'JaxprTracer' at 0x7ffe3c277bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5863e3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00845925615189129
Epoch 48 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02263069434818988, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6a70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc535e90; to 'JaxprTracer' at 0x7ffdbc5376f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33029070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007918941286126233
Epoch 48 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02259481036708162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496bd00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8806d0; to 'JaxprTracer' at 0x7ffbbc882890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbeddff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008874942440686024
Epoch 48 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026510348691950923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02651035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ddf0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b89fd0; to 'JaxprTracer' at 0x7ffbe0b8bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bc2acd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011356082496978042
Epoch 48 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02282181506907346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02282182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5136d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c2fc40; to 'JaxprTracer' at 0x7ffb93c2f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771c2050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009295086228187581
Epoch 48 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02105714207917294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02105714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bd510>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd960ea0; to 'JaxprTracer' at 0x7ffbbd969d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74231640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008880046792257876
Epoch 48 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021071565593334392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02107157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c65a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa43a890; to 'JaxprTracer' at 0x7ffbaa439b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3525b7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006876652651542198
Epoch 48 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020709911518607484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02070991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4def0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0ba6930; to 'JaxprTracer' at 0x7ffbbd469a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d6c6fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008466126443452649
Epoch 48 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02449933246190789, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02449933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2252b00>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba981a070; to 'JaxprTracer' at 0x7ffb93647c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2876d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01020639204630976
Epoch 48 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01646193028177543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01646193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7969a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa412d40; to 'JaxprTracer' at 0x7ffbaa410130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53bed740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006404967185435199
Epoch 48 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02287436428930205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02287436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe2e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87b1760; to 'JaxprTracer' at 0x7ffba87b2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d71840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010923850770038462
Epoch 48 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.028057531343572997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02805753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb9f70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0770950; to 'JaxprTracer' at 0x7ffbe07709a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f53d280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011970077703873825
Epoch 48 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025993666686385617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02599367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5fb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c715e40; to 'JaxprTracer' at 0x7ffd3c714810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84212e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007925507808312016
Epoch 48 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024792556965583943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02479256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd5d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1185530; to 'JaxprTracer' at 0x7ffbe1187e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b49be00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01090472448536759
Epoch 48 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02308881230663585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02308881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0820>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe11a9b70; to 'JaxprTracer' at 0x7ffd3c779c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61a26190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005430338480711992
Epoch 48 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020761659670147283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02076166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334bcc0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7fce00; to 'JaxprTracer' at 0x7ffbab7fd850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b3fd7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006422600408113487
Epoch 48 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02350479443295834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02350479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b2b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c4eb830; to 'JaxprTracer' at 0x7ffba9580720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x258c0de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006907168658011463
48, epoch_train_loss=0.2341755622577916
Epoch 49
Epoch 49 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02017659617520345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0201766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ffc00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c67eb60; to 'JaxprTracer' at 0x7ffc6c67c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2c4770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011147778533265568
Epoch 49 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01656345582883716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01656346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27390>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f55580; to 'JaxprTracer' at 0x7ffbe0f55b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a59ce80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009643521085708463
Epoch 49 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009942722160350784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00994272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466ce50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c0e98f0; to 'JaxprTracer' at 0x7ffe3c0eb330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x370756e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0028620237934285984
Epoch 49 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009894243638102125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00989424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebbd50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9895cb0; to 'JaxprTracer' at 0x7ffba9896f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e848820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.00859331476931756
Epoch 49 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01858148276079626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01858148, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305b130>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaacea7f0; to 'JaxprTracer' at 0x7ffbaaceb150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x750268a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009179722395867266
Epoch 49 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024892043323396222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02489204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6c20>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8535b20; to 'JaxprTracer' at 0x7ffba85369d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3935cc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011487805851033144
Epoch 49 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02245893083326863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02245893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c830>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1d03f10; to 'JaxprTracer' at 0x7ffbe1d01670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ae4d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010756906528326662
Epoch 49 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02344608078400774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02344608, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052ce30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0daf20; to 'JaxprTracer' at 0x7ffbaa0db150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x785f65a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011300013375255028
Epoch 49 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02174534762699767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2b30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74743650; to 'JaxprTracer' at 0x7ffd74741df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d28110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0023887763552042024
Epoch 49 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02250766514641986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa54eb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c4eb740; to 'JaxprTracer' at 0x7ffd3c0469d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52ecca10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008929805716668333
Epoch 49 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016898744598712545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01689874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e2b90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98cf6f0; to 'JaxprTracer' at 0x7ffbb999f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a289130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008558748056852703
Epoch 49 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02193568062165694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc9b60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcb96700; to 'JaxprTracer' at 0x7ffbbcb95df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x450a50c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008007169836697407
Epoch 49 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021819814880346247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02181981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92aff380>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd743387c0; to 'JaxprTracer' at 0x7ffd74339850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40ddb9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008922922836009413
Epoch 49 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02585051149329282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02585051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22505f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc884450; to 'JaxprTracer' at 0x7ffbbc8841d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39301140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011285888312905987
Epoch 49 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022541289114266096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc676df0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c52ee80; to 'JaxprTracer' at 0x7ffd3c52d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b3a110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009227579072800045
Epoch 49 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02162394517598257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02162395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510300>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd0f5a30; to 'JaxprTracer' at 0x7ffbbd0f75b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67819730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008809420132663039
Epoch 49 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021832703114707305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0218327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69e40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa076c50; to 'JaxprTracer' at 0x7ffbaa074810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bfd21e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006748111809382475
Epoch 49 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021313010347087748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938efb00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2a2ac0; to 'JaxprTracer' at 0x7ffe2c2a3ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7de46d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008449886831797607
Epoch 49 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024839028497207954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02483903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d00c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb928b2e80; to 'JaxprTracer' at 0x7ffbe15b93a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ee5aac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010099828001303011
Epoch 49 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.0164049386139336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01640494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457ed20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf446a7a0; to 'JaxprTracer' at 0x7ffdf446a750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e26a340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006351501354291444
Epoch 49 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02254885695692754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7940>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c494ea0; to 'JaxprTracer' at 0x7ffe2c497060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d0f5c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010769944616338213
Epoch 49 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027114407499315568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02711441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefced0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c058b80; to 'JaxprTracer' at 0x7ffe2c05a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12e7abe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01179970642792958
Epoch 49 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024918140307702445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02491814, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930acff0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe04921b0; to 'JaxprTracer' at 0x7ffd7468ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32b6e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007838288224465261
Epoch 49 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023671435358848143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02367144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5a50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15cae80; to 'JaxprTracer' at 0x7ffbe15cb650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c4aed50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010887031604144838
Epoch 49 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022783135499058214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02278314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fbd00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b164d0; to 'JaxprTracer' at 0x7ffbe0b15e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df64900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005603576367686372
Epoch 49 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020939023160515664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02093902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c738910>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09ba110; to 'JaxprTracer' at 0x7ffbaa959760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x768996c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006517403582889193
Epoch 49 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02394333760371555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02394334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93349fd0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd9e9f30; to 'JaxprTracer' at 0x7ffbbd9ea070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x610a9830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006908125753956467
49, epoch_train_loss=0.2330748012261879
Epoch 50
Epoch 50 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02033315452448357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02033315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a450>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd453f0; to 'JaxprTracer' at 0x7ffbbdd45530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x460ebb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011256242567861176
Epoch 50 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016995209306789466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01699521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7be730>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9580c70; to 'JaxprTracer' at 0x7ffba9581e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f4ccc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009777818274822719
Epoch 50 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00988590858146932, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00988591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a930>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20607c0; to 'JaxprTracer' at 0x7ffbe2061170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e08b7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0028356811429850063
Epoch 50 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010349080975706956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01034908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d0800>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c541ad0; to 'JaxprTracer' at 0x7ffe2c540db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e9d31c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008853212089979566
Epoch 50 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018649999247310166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b730>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff49df0; to 'JaxprTracer' at 0x7ffbdff49c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15c484d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009019484228161035
Epoch 50 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025100836977383446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30fc60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c52eb10; to 'JaxprTracer' at 0x7ffd3c52f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa284e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01153320859491888
Epoch 50 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02219506839861296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3110f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab1c6340; to 'JaxprTracer' at 0x7ffbab1c7560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a454250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01063311379180431
Epoch 50 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023637106865451427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5590>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4751760; to 'JaxprTracer' at 0x7ffdf47518f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34c0b4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01139830287430609
Epoch 50 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022428928537505447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948590>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b5710; to 'JaxprTracer' at 0x7ffbe15b77e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x589c33f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0029564251412801403
Epoch 50 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022193405461460276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02219341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2a60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73d440; to 'JaxprTracer' at 0x7ffdbc73d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a0be2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009261645535154522
Epoch 50 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017040204410834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0170402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5720>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93931f80; to 'JaxprTracer' at 0x7ffdd472f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48e51c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008865344000204665
Epoch 50 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02166547271526093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02166547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6450>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcc6020; to 'JaxprTracer' at 0x7ffbaaef2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66fec640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008120730498167332
Epoch 50 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021610780327419973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ee370>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7ddee0; to 'JaxprTracer' at 0x7ffd3c7dcf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fe20b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.00888397798143615
Epoch 50 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02674466880012529, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02674467, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5115c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe25b290; to 'JaxprTracer' at 0x7ffbbe2587c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3461c080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011189858086521027
Epoch 50 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022848743806826464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c1e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaf97b00; to 'JaxprTracer' at 0x7ffbbaf95300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x353af860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009230428396816173
Epoch 50 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021776920827948194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5990>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15e1d50; to 'JaxprTracer' at 0x7ffb9395f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69eeb530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008859989753052928
Epoch 50 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022538821057850957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22539e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc5f7290; to 'JaxprTracer' at 0x7ffd9c2b4090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37a88060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006891915218827614
Epoch 50 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02157010911108308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02157011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058e90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9172200; to 'JaxprTracer' at 0x7ffbb9171710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4adf7830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008593706236081895
Epoch 50 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02510812889103895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02510813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afce50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb90d31a0; to 'JaxprTracer' at 0x7ffbe0564f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x433fa0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009855165176547005
Epoch 50 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016358514185968225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01635851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb790>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0d5ede0; to 'JaxprTracer' at 0x7ffbe2729c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x737e73c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006354637257482565
Epoch 50 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02147149379598365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02147149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc9c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd42a8860; to 'JaxprTracer' at 0x7ffdd42ab380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eb45340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010338713277599249
Epoch 50 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02616600954852668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02616601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4eb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a03b00; to 'JaxprTracer' at 0x7ffbe1a03a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75651a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011557643724424901
Epoch 50 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024898657977753216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02489866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cad60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c0c2e80; to 'JaxprTracer' at 0x7ffe2c0c2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6198e1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007660241274151281
Epoch 50 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023513376204900436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02351338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334bda0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb995b380; to 'JaxprTracer' at 0x7ffd5c12a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6740cec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.0108204479488446
Epoch 50 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023269116469940076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02326912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eba9d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc1c540; to 'JaxprTracer' at 0x7ffdf471eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3590fca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005437585547625272
Epoch 50 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021215472828634417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02121547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45009d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5bc770; to 'JaxprTracer' at 0x7ffbbb5bff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5787c340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006355648930201581
Epoch 50 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023970323832415756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02397032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1640>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1825c0; to 'JaxprTracer' at 0x7ffd5c182cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e5874d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006810886858870286
50, epoch_train_loss=0.23335205440812792
Epoch 51
Epoch 51 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01999486499181227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01999486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ae5b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c355850; to 'JaxprTracer' at 0x7ffe3c357790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f896810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011428836447446874
Epoch 51 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016328652097286112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01632865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd7789f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe181e2a0; to 'JaxprTracer' at 0x7ffbe181f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11e48f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009676698004296833
Epoch 51 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010070866152038262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01007087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466c760>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c5a430; to 'JaxprTracer' at 0x7ffb93c58720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12f8a790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0028941802254167826
Epoch 51 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010440765190849553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01044077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc670>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb3122a0; to 'JaxprTracer' at 0x7ffbbb310540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5027c8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008335612744647345
Epoch 51 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018697278140453282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01869728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251560>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40f89f0; to 'JaxprTracer' at 0x7ffdf40fa610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59d3b200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00896765791359635
Epoch 51 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025435819807401963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313d10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd746d51c0; to 'JaxprTracer' at 0x7ffd746d69d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51ff0c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011829293112994521
Epoch 51 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021937684659055066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e590>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa14a110; to 'JaxprTracer' at 0x7ffbaa14be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6928a320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010830084108848457
Epoch 51 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023092867099592053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02309287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30c200>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdff0f90; to 'JaxprTracer' at 0x7ffbbdff0720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bb4fc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011451499747609865
Epoch 51 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021284279888991463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334ad00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3ea700; to 'JaxprTracer' at 0x7ffbbc3eb560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2ba080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0019078847107425083
Epoch 51 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02187919456499753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a5b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e1f30; to 'JaxprTracer' at 0x7ffbbd1e2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46318450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008738987382241133
Epoch 51 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016600654864181132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01660065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502420>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0a28e0; to 'JaxprTracer' at 0x7ffbbc0a0900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88e33d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008443914393718225
Epoch 51 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021899932621030085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bdb60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93a2b10; to 'JaxprTracer' at 0x7ffbb93a15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x880a7860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00801793210208906
Epoch 51 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02204670297173788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220467, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059410>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93e8220; to 'JaxprTracer' at 0x7ffbb93e8770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f06d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.0089629846956901
Epoch 51 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026693429558618184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02669343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5810>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1489990; to 'JaxprTracer' at 0x7ffbe14881d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x753bac10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011207670775923504
Epoch 51 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022866631287076365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052f5f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba79f380; to 'JaxprTracer' at 0x7ffbba79dda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59724fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009231370877390257
Epoch 51 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021708796887919237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0217088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512c10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd413cdb0; to 'JaxprTracer' at 0x7ffdd413e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88be9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008758141749760584
Epoch 51 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021948471613192515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69270>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c318e00; to 'JaxprTracer' at 0x7ffbdff4b4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16d18c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006698436668858091
Epoch 51 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021459333317904162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02145933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ecef0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3b5030; to 'JaxprTracer' at 0x7ffd5c3b7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eb6fe50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008384273096368071
Epoch 51 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025197619806691766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02519762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d0d20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c706250; to 'JaxprTracer' at 0x7ffe2c706a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x396d0740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010168717364805516
Epoch 51 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016482230034065605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01648223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c360>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0cfe660; to 'JaxprTracer' at 0x7ffbe0cfcbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b66fa70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.0063390270722429665
Epoch 51 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022321347949285503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7f10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17b0cc0; to 'JaxprTracer' at 0x7ffbbcea5f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e022570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010851913206328402
Epoch 51 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02725430277918123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0272543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb1530>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9362d90; to 'JaxprTracer' at 0x7ffbb9362840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ac92a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01181012452885538
Epoch 51 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02488721058806575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02488721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f4750>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9babc40; to 'JaxprTracer' at 0x7ffbe26b9300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f8759a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007746655662582499
Epoch 51 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02398635632272349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02398636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1c20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93914e50; to 'JaxprTracer' at 0x7ffb93915710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac33bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010677474056806285
Epoch 51 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02277189053930971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02277189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d6e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9974db0; to 'JaxprTracer' at 0x7ffbb9975ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65db7eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005378677839727755
Epoch 51 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021329934964848463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02132993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f87d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e398a0; to 'JaxprTracer' at 0x7ffbb9e3a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de75740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006363771081699077
Epoch 51 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024607658515552057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02460766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6450>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc36ca90; to 'JaxprTracer' at 0x7ffbbc36d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8264c9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006792049716782287
51, epoch_train_loss=0.23189386928746872
Epoch 52
Epoch 52 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020829603978178488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0208296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a3150>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbacd6ed0; to 'JaxprTracer' at 0x7ffbbacd7f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a8def60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011056394868020819
Epoch 52 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01782317036067433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01782317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacca300>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c47b600; to 'JaxprTracer' at 0x7ffe2c47bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62937df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00992407664709906
Epoch 52 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010293549954141112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01029355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3330>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c3327f0; to 'JaxprTracer' at 0x7ffe2c331580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x572457b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0030604267197473943
Epoch 52 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010786143452308876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01078614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e8a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c61ab10; to 'JaxprTracer' at 0x7ffc6c6182c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a833280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008589828480857117
Epoch 52 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0192769453515186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01927695, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ffec0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb939558f0; to 'JaxprTracer' at 0x7ffbbb830a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b0b68b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009169904003919978
Epoch 52 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.0245902326256123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02459023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1bb70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc92ea70; to 'JaxprTracer' at 0x7ffbbc92ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e076590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011376378194566016
Epoch 52 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02135836885124527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02135837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677e60>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c25bbf0; to 'JaxprTracer' at 0x7ffe3c259530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cd4b720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010571979300302329
Epoch 52 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021770087156531354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6765d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c332c00; to 'JaxprTracer' at 0x7ffc6c332d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee76400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011304777976298445
Epoch 52 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020676975879570965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02067698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e06d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd43173d0; to 'JaxprTracer' at 0x7ffdd4314810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a60e9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002960925292053698
Epoch 52 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021442499402466876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0214425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c45a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe09d0450; to 'JaxprTracer' at 0x7ffbe09d2b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8169e830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008753197474318181
Epoch 52 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016766114440674065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01676611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07d1b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c2103b0; to 'JaxprTracer' at 0x7ffe3c213240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a13420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008337886784866225
Epoch 52 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02318580713672303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496bba0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe091f920; to 'JaxprTracer' at 0x7ffbe091eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc8bcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007914515406808759
Epoch 52 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023437514684399433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02343751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d06c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13e9b70; to 'JaxprTracer' at 0x7ffbe13e9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fd132d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008929173724053262
Epoch 52 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.027803046551073452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02780305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511380>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcba250; to 'JaxprTracer' at 0x7ffbbdcba570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37ddf910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011457665409248387
Epoch 52 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023658173378067724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02365817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e440>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c477010; to 'JaxprTracer' at 0x7ffd5c477560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71536560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009228180906735455
Epoch 52 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021755276065278818, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175528, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311080>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c3d0b30; to 'JaxprTracer' at 0x7ffbbc8e3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83a176e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.0087384498142625
Epoch 52 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021525331616743415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5350>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8b29a80; to 'JaxprTracer' at 0x7ffba8b28400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13067320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0067318814624293
Epoch 52 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020134421336003114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02013442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22527d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc4c2520; to 'JaxprTracer' at 0x7ffd740f5490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d951530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008570501672234668
Epoch 52 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02376113680254751, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e09390>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb7dee0; to 'JaxprTracer' at 0x7ffbbbb7d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b09a2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01003026559425306
Epoch 52 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.015948560884710455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01594856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc740>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4550d60; to 'JaxprTracer' at 0x7ffdd4550c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f82a220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006295308827778634
Epoch 52 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.021843329524075077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02184333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7948f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c18bbf0; to 'JaxprTracer' at 0x7ffd5c188ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b7af040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010516292139217663
Epoch 52 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027485253868673076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02748525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb90c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa4126b0; to 'JaxprTracer' at 0x7ffd3c567830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x304a1340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011682848264539204
Epoch 52 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.026238315793670954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02623832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779a70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e8a90; to 'JaxprTracer' at 0x7ffbbd1ea570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc2dbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007826266343894876
Epoch 52 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02499186517325044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02499187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5460>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87b0220; to 'JaxprTracer' at 0x7ffba87b2ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42c20740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010793082136551762
Epoch 52 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0236272216944566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02362722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ad150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7d71a0; to 'JaxprTracer' at 0x7ffd3c715800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x369f4570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005315392814027266
Epoch 52 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021256236737256327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4c890>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab436b10; to 'JaxprTracer' at 0x7ffbab437c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x784d17d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006250484502347228
Epoch 52 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024060520719964777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ff30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c33e840; to 'JaxprTracer' at 0x7ffc6c33e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x713445d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006745196032317746
52, epoch_train_loss=0.23213128079274903
Epoch 53
Epoch 53 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02007433291613789, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02007433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a430>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7177e0; to 'JaxprTracer' at 0x7ffbe0034220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d97e350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011175623664330307
Epoch 53 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01638487410852419, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01638487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466c870>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe3052b0; to 'JaxprTracer' at 0x7ffbbe3065c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7779a140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009681973643006185
Epoch 53 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009680834105205207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00968083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba796160>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8547290; to 'JaxprTracer' at 0x7ffbbbbae8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38035700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0026027999984313856
Epoch 53 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009956614062293936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00995661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0bb00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc34d440; to 'JaxprTracer' at 0x7ffdbc34cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52e74a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008411790799338566
Epoch 53 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017682610373468046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01768261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac70e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaf4f650; to 'JaxprTracer' at 0x7ffbaaf4d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a7b830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009039695901851955
Epoch 53 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024413057627108634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cbde0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dc4360; to 'JaxprTracer' at 0x7ffb93dc65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9c31e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011484934329593922
Epoch 53 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021529602938078412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0215296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f8d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf471e8e0; to 'JaxprTracer' at 0x7ffdf471c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3857ac70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010612238643572454
Epoch 53 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022910221154501604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93426b0; to 'JaxprTracer' at 0x7ffbb9343ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dc236d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011214006898617752
Epoch 53 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021773450907294996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02177345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4640>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd42250; to 'JaxprTracer' at 0x7ffbbdd43d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x718a8e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0019709715024885262
Epoch 53 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022570089567421826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058eb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb149f0; to 'JaxprTracer' at 0x7ffbbbb17dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x485b4470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008660217891051656
Epoch 53 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016620410972047917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01662041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefcc60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c23a10; to 'JaxprTracer' at 0x7ffbb9c208b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32adcb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008266301527393554
Epoch 53 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021620686170516556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02162069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7970a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe214ef70; to 'JaxprTracer' at 0x7ffe3c25bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fc2bfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008019744321561485
Epoch 53 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0217123282308214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2252330>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93a22a0; to 'JaxprTracer' at 0x7ffbb93a1e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x454bab20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.00877622077288404
Epoch 53 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025872902143720032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0258729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311a40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7433b330; to 'JaxprTracer' at 0x7ffd743399e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c885970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011326665964099656
Epoch 53 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022472716285482884, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02247272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099460>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab809990; to 'JaxprTracer' at 0x7ffbbbd540e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x552ad200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009117385318405027
Epoch 53 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021750565434813074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02175057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052e520>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2ed760; to 'JaxprTracer' at 0x7ffbbb2cd580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81a9cd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008676327868436026
Epoch 53 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02228909954882828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0222891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19040>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e34ae0; to 'JaxprTracer' at 0x7ffbe04cb6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x599dc7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006631395318109242
Epoch 53 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022002227212678322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27490>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c4bcef0; to 'JaxprTracer' at 0x7ffbbad19e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32b31d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008320459614815574
Epoch 53 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025278538619938392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02527854, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fec10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9336d530; to 'JaxprTracer' at 0x7ffb9336e7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ecdcc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010117247095900835
Epoch 53 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.0164390274997327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01643903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457d9c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe27794e0; to 'JaxprTracer' at 0x7ffbe277bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x348bda30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006298143953158814
Epoch 53 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022116676220944948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6b00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc0c9c10; to 'JaxprTracer' at 0x7ffdbc0c9490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84b41660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010766309480152425
Epoch 53 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026742720485969037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02674272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008ca0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafb65c0; to 'JaxprTracer' at 0x7ffc6c37fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e411ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011737202656257113
Epoch 53 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024784539311698668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02478454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07dfd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e5a9d0; to 'JaxprTracer' at 0x7ffbb8e5ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84bf9790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007690819448457511
Epoch 53 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024169030370371956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02416903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ccc0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad95ad0; to 'JaxprTracer' at 0x7ffbbad96430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x682ef220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010621480751983476
Epoch 53 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02318713699203937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e0860>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9bab1f0; to 'JaxprTracer' at 0x7ffd3c3031a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eecc540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005289664445717058
Epoch 53 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02167187208024933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02167187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948e10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1804e00; to 'JaxprTracer' at 0x7ffbe1805df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c19c080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006260387442712229
Epoch 53 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024744827523166313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02474483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779a80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba84fb330; to 'JaxprTracer' at 0x7ffba84fbb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b25dbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006695194047520468
53, epoch_train_loss=0.2294652032998472
Epoch 54
Epoch 54 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021067338942944557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02106734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c77f60; to 'JaxprTracer' at 0x7ffbe1c757b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x248b7ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010860829754447125
Epoch 54 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01748474772565079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01748475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739060>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c6bd170; to 'JaxprTracer' at 0x7ffbe20634c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78d982b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.0096066715139954
Epoch 54 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009426280106259472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00942628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7130>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8582340; to 'JaxprTracer' at 0x7ffba85827f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20b3ea70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0030170088190407747
Epoch 54 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009369754200597592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00936975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec4f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcd78d0; to 'JaxprTracer' at 0x7ffbbdcd5a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53415c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008955112311225854
Epoch 54 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.016433553522391564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01643355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513540>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba92dd210; to 'JaxprTracer' at 0x7ffba92de1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5df364e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009656260827856684
Epoch 54 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023125434239367297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02312543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56400>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8af92b0; to 'JaxprTracer' at 0x7ffba8af88b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45310c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011649517299675425
Epoch 54 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020784040223498387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02078404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c8b90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1db4c0; to 'JaxprTracer' at 0x7ffd5c1d93a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1172d200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.0107293014544634
Epoch 54 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022827415462293565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02282742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c9300>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93a0ef0; to 'JaxprTracer' at 0x7ffbb93a15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3346ca10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011286280240368467
Epoch 54 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02353005247599211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67dad0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f8eac0; to 'JaxprTracer' at 0x7ffbe0f8ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64183200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003949666780030055
Epoch 54 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023353383988825773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02335338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ac640>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c371260; to 'JaxprTracer' at 0x7ffc6c370f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74455720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00886108489232895
Epoch 54 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017278433408254544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01727843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948fb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c211800; to 'JaxprTracer' at 0x7ffbbd79d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4069b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008412551024260353
Epoch 54 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02235364389109444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02235364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bd580>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd436f0; to 'JaxprTracer' at 0x7ffdf4519030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e747470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007812919739657592
Epoch 54 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021509814159566588, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938edb50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd792930; to 'JaxprTracer' at 0x7ffbbd7913a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c9811d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008753843486232059
Epoch 54 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025741692739151466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02574169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19ae0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13ea7a0; to 'JaxprTracer' at 0x7ffbe13ea160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27479600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01126195064290677
Epoch 54 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022018009148381455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa569d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa14b1f0; to 'JaxprTracer' at 0x7ffbaa14a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81c67d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009255357220043224
Epoch 54 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021118699733379324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0211187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c9310>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9395f560; to 'JaxprTracer' at 0x7ffb9395efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dcc41e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008837628194953616
Epoch 54 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022521067756273144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a1fb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8e3bf0; to 'JaxprTracer' at 0x7ffbbc8e3ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79947100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006706496322760744
Epoch 54 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021943438345482534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2252220>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa47d8a0; to 'JaxprTracer' at 0x7ffbaa47da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65ba50e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00835590551494149
Epoch 54 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.026013903315066852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0260139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654130>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2149940; to 'JaxprTracer' at 0x7ffbe214ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e222700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010025118984970277
Epoch 54 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017508176781807615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01750818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afd220>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c357e70; to 'JaxprTracer' at 0x7ffbe1584fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f550310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.00646951403362499
Epoch 54 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022903844810416872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02290384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be250>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8dc1030; to 'JaxprTracer' at 0x7ffdf40925c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e3cb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01081496329551321
Epoch 54 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027576760825841245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02757676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb80c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13ea160; to 'JaxprTracer' at 0x7ffbbcc36f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59d17570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011526475179909075
Epoch 54 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025894724268118095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02589472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930585a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c188040; to 'JaxprTracer' at 0x7ffdf4693060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7861ade0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007579988629451151
Epoch 54 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02396833562044861, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02396834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a950>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba9a4b30; to 'JaxprTracer' at 0x7ffbba9a6de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fcdb070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010434445550256743
Epoch 54 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02308969280444422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02308969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f6280>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87c0770; to 'JaxprTracer' at 0x7ffba87c1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c001d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005281695837864932
Epoch 54 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02086969020079234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02086969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4d4d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd7567a0; to 'JaxprTracer' at 0x7ffbbd754900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63afedd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0063212377640459085
Epoch 54 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023913375167771346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f5b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba93a9210; to 'JaxprTracer' at 0x7ffba93a9300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82f63b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006658764203222637
54, epoch_train_loss=0.23308058951804692
Epoch 55
Epoch 55 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.019986669243906165, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01998667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07e380>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba79b510; to 'JaxprTracer' at 0x7ffbba79a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a5ea640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010990677154522059
Epoch 55 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01701129234085366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01701129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a610>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd42aaed0; to 'JaxprTracer' at 0x7ffdd42ab010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x21046560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009689784425034403
Epoch 55 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.00997751445773675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00997751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4ee80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe05668e0; to 'JaxprTracer' at 0x7ffbe0dd6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61bd9390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.002851837291480846
Epoch 55 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010042449071110588, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01004245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bf3e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0db790; to 'JaxprTracer' at 0x7ffbbc0da2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b7aa380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.00851425503518905
Epoch 55 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018973023200088993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc655620>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe2582c0; to 'JaxprTracer' at 0x7ffbbe258950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53a274e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.008997508668314936
Epoch 55 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024716747484940918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02471675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310670>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c346b60; to 'JaxprTracer' at 0x7ffbbdcb93a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x341e79e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011418296595909613
Epoch 55 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0217221392821354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cb2c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc883830; to 'JaxprTracer' at 0x7ffbbc880fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74940cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010484865188222251
Epoch 55 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02281847409152237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02281847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c82b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3e86d0; to 'JaxprTracer' at 0x7ffbbc3eaca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d83f130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011127709890811526
Epoch 55 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02131276823511541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4503650>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabae0680; to 'JaxprTracer' at 0x7ffbabae2e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38b5ba20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0018954776133835814
Epoch 55 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02259118499471722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02259118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c970>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73c180; to 'JaxprTracer' at 0x7ffdbc73e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10da40a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008586834021813063
Epoch 55 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016786140342883886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01678614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466d890>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa07e700; to 'JaxprTracer' at 0x7ffd9c68d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3da07c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008222828903177439
Epoch 55 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022288998029240496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.022289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348410>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7d6070; to 'JaxprTracer' at 0x7ffbbcb949a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6432dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007717723317993809
Epoch 55 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02189086562930626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affce0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd413ef20; to 'JaxprTracer' at 0x7ffdd413ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63b00930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008660346909262723
Epoch 55 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025959500413456654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0259595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7400>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdffa9990; to 'JaxprTracer' at 0x7ffbe22324d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29cc91a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011256069719054948
Epoch 55 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022254305517992453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507500>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba559440; to 'JaxprTracer' at 0x7ffbb995a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2725ef60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009162019969621358
Epoch 55 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02148054154704479, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02148054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f960>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7026b0; to 'JaxprTracer' at 0x7ffd3c7016c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37de0500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008771125767687434
Epoch 55 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022172778789037416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677710>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c0c2930; to 'JaxprTracer' at 0x7ffc6c0c1030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58e23170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006595410470889128
Epoch 55 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02199126145932376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1bb60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93955350; to 'JaxprTracer' at 0x7ffb93955cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ae67f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008279674663770501
Epoch 55 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025696976831087154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02569698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fab20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c4b1cb0; to 'JaxprTracer' at 0x7ffd5c4b3240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e6eec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01005096374775274
Epoch 55 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016987269588500352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01698727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fea90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa138b80; to 'JaxprTracer' at 0x7ffbaa138630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x868f42b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006217057779909317
Epoch 55 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022688744471548346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe278e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24f0180; to 'JaxprTracer' at 0x7ffd7411c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x858f6ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.0108233988235946
Epoch 55 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02741350187843107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0274135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f57c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc2e0680; to 'JaxprTracer' at 0x7ffdbc2e0220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c4a7b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011636432740169686
Epoch 55 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025011456747240157, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02501146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bc590>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3f5490; to 'JaxprTracer' at 0x7ffd5c3f6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65a3f660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007629924998367945
Epoch 55 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023716260483325653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02371626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ade10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9ca8c20; to 'JaxprTracer' at 0x7ffbb9ca82c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x587e5110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01061195541191117
Epoch 55 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022528914694180672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc86a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92e122f0; to 'JaxprTracer' at 0x7ffb92e101d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x332c4c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005489647764799428
Epoch 55 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021131447692129567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f1d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6eb560; to 'JaxprTracer' at 0x7ffc6c6e8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79f8b120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.0061778711482819845
Epoch 55 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024925915528690362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02492592, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6df0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c28a340; to 'JaxprTracer' at 0x7ffd3c28a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x728061c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006667006083426528
55, epoch_train_loss=0.22852670410435205
Epoch 56
Epoch 56 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021348657389858104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f70d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1844a0; to 'JaxprTracer' at 0x7ffbbd186700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a55cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010867796283506077
Epoch 56 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017968290777906817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01796829, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cdf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9580f90; to 'JaxprTracer' at 0x7ffba9581d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68a09610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009464945663514393
Epoch 56 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010332274553178127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01033227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5180>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa958ef0; to 'JaxprTracer' at 0x7ffbaa958860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20cb01e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.002942218863350448
Epoch 56 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009819697981746959, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0098197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513b70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdff4ab10; to 'JaxprTracer' at 0x7ffbdff49760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7084d6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008816735666529001
Epoch 56 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01806132193048584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01806132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6775a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba79f8d0; to 'JaxprTracer' at 0x7ffbba79e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8035d770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009097389786895243
Epoch 56 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02463344483185353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02463344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca070>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab1744f0; to 'JaxprTracer' at 0x7ffbab1742c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87b0120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011309798765462196
Epoch 56 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021586542379847928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313fa0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd744d4770; to 'JaxprTracer' at 0x7ffd744d5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af3ebb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010408145580339447
Epoch 56 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02273200596567711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313950>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40fad40; to 'JaxprTracer' at 0x7ffdf40f9580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ac9b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01103551560454724
Epoch 56 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021887228211426364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02188723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457cbd0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaf96840; to 'JaxprTracer' at 0x7ffbbaf973d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2604e900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0025821755206431605
Epoch 56 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021976636523804775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02197664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739df0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd53d210; to 'JaxprTracer' at 0x7ffbbd53d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cf2a750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008680803384589028
Epoch 56 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016300359521718953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01630036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67fcc0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1e6e020; to 'JaxprTracer' at 0x7ffbe1e6fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c185860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008306280293855661
Epoch 56 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0220949072860713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02209491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7beaf0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd33970; to 'JaxprTracer' at 0x7ffbbdd43330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10538520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007803271069733434
Epoch 56 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0220883138494201, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208831, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1b770>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87e2250; to 'JaxprTracer' at 0x7ffdd42f4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4694350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008750224300897428
Epoch 56 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026060818613315422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02606082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ded0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe207fa60; to 'JaxprTracer' at 0x7ffbe207e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38e66fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011324648072343641
Epoch 56 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02263125001869819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507710>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b8b4c0; to 'JaxprTracer' at 0x7ffbe0b89d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58400280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009127608745508435
Epoch 56 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021746206513155727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7910>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90ebd30; to 'JaxprTracer' at 0x7ffba90ea200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e0e4440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008713728335200297
Epoch 56 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022637633986178265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02263763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a1070>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe2597b0; to 'JaxprTracer' at 0x7ffbbe258e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30208610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0065300610517868415
Epoch 56 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021937625903011036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193763, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92aff820>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0cde90; to 'JaxprTracer' at 0x7ffd3c0cf9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cfc3b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008260792767525612
Epoch 56 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025305917567620462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530592, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0a0c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4713380; to 'JaxprTracer' at 0x7ffdd4710220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68c5bf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010052288002232212
Epoch 56 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016827830495029852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01682783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348ba0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb3114e0; to 'JaxprTracer' at 0x7ffbbbb1a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58363ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006190844256578617
Epoch 56 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022288297077325905, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0222883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7976f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c0e8450; to 'JaxprTracer' at 0x7ffe2c0eaac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b247ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010783664393256322
Epoch 56 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026740861974866963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02674086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a940>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba955ef70; to 'JaxprTracer' at 0x7ffba955d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4891fa20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011711597100223292
Epoch 56 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025289049754486523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02528905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409af20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4091df0; to 'JaxprTracer' at 0x7ffdf40922a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x710c1ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007666179234784427
Epoch 56 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024469252559879976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02446925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6fb0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd495bc0; to 'JaxprTracer' at 0x7ffbbd497e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54159900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010597062138308579
Epoch 56 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023458908864669146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02345891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058530>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4f0810; to 'JaxprTracer' at 0x7ffbba4f36f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x654c9a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005125719068561179
Epoch 56 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021610912025433745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8ae0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb928de070; to 'JaxprTracer' at 0x7ffba8a81580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5295ad20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006122987995391408
Epoch 56 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024636564187303825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02463656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fa1e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9706430; to 'JaxprTracer' at 0x7ffbb9706fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x649108b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006661211859012637
56, epoch_train_loss=0.22893369380457623
Epoch 57
Epoch 57 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020767390573025606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02076739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7b90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87c0540; to 'JaxprTracer' at 0x7ffba87c03b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e7505d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010842026491844022
Epoch 57 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017389281183629472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01738928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ee7c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9a92b0; to 'JaxprTracer' at 0x7ffbaa9aa750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1216b300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009434399315650963
Epoch 57 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009963537114585919, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00996354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7960b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9330270; to 'JaxprTracer' at 0x7ffba93317b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a8648a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0030678020449604842
Epoch 57 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010273903607791405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0102739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2430>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e46430; to 'JaxprTracer' at 0x7ffbb8e47c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x331bf8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008491080650808613
Epoch 57 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018325802311670098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0183258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ac600>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d08ae0; to 'JaxprTracer' at 0x7ffba8d0b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e6f5560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009024504354088901
Epoch 57 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024467177209868997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02446718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507f00>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4257fb0; to 'JaxprTracer' at 0x7ffdf4257c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22613970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011169564350010422
Epoch 57 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021636784028553183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07fb00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa3ac5e0; to 'JaxprTracer' at 0x7ffbaa3adee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32ec1990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010354440344864595
Epoch 57 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022572405240468784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07da30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1584090; to 'JaxprTracer' at 0x7ffbe15841d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75873eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010983638350416838
Epoch 57 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021503001192662657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b7870>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb744f0; to 'JaxprTracer' at 0x7ffbabb76570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x533ed340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002302747873889954
Epoch 57 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02181371473325543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02181371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4c040>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c277d30; to 'JaxprTracer' at 0x7ffbbe304400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7834adf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008627312134244504
Epoch 57 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016494612668597634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01649461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305a860>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15cf830; to 'JaxprTracer' at 0x7ffbe15cf790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b8b50b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008269153767542147
Epoch 57 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02250339143556416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7976f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaf953f0; to 'JaxprTracer' at 0x7ffbbaf95df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a4d3290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007760320807208276
Epoch 57 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022429564699044696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7890>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40f96c0; to 'JaxprTracer' at 0x7ffdf40f89f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771c8280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.00871151462561599
Epoch 57 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026326542348590946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02632654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c4ed0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a00040; to 'JaxprTracer' at 0x7ffbe1a016c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x242d14f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011209414236469378
Epoch 57 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022574098105007382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0225741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3060>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc672b10; to 'JaxprTracer' at 0x7ffdbc6709f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6726a2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009196743798540689
Epoch 57 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021740910090496456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778650>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba558ae0; to 'JaxprTracer' at 0x7ffbba558590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ceb500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008745776254714724
Epoch 57 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022736162162964035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02273616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc676820>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c701120; to 'JaxprTracer' at 0x7ffbbad22930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e6c6390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006512326161676949
Epoch 57 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022150214805823975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa547b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd0f68e0; to 'JaxprTracer' at 0x7ffbbd0f6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a456da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008275297914451172
Epoch 57 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025149912697261217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02514991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab513a20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb939562f0; to 'JaxprTracer' at 0x7ffbbda24270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c914e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009980940358400017
Epoch 57 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01676263434096265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01676263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe276c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe24a31a0; to 'JaxprTracer' at 0x7ffbe24a27a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f902170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006239747490257596
Epoch 57 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.021889025508809085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02188903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc91d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c618720; to 'JaxprTracer' at 0x7ffe2c2a16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x599eb360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.0107402667637961
Epoch 57 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026064829023133642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02606483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2252730>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe04e2f0; to 'JaxprTracer' at 0x7ffbbe04d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d6c9940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011716837083373306
Epoch 57 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02478222347266536, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02478222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d0e70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe277a6b0; to 'JaxprTracer' at 0x7ffbe2778360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b1d0fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007661536172746563
Epoch 57 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024235450893955224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fa720>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0fdb20; to 'JaxprTracer' at 0x7ffbbc0fda30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8191fb00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010547251612456907
Epoch 57 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023539227858221275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02353923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ff890>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad3fab0; to 'JaxprTracer' at 0x7ffbbad3e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7746cb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005161966034079634
Epoch 57 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021898621472174522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a695b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe28be20; to 'JaxprTracer' at 0x7ffbbe2898a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x817f3180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006166228581352612
Epoch 57 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024948096070400678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0249481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bd060>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb588d10; to 'JaxprTracer' at 0x7ffbbb588e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c846070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006682523460167122
57, epoch_train_loss=0.22787536103362852
Epoch 58
Epoch 58 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020923304159009785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0209233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c31d580; to 'JaxprTracer' at 0x7ffd5c31fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc322f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010874577355176735
Epoch 58 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01719508237850451, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01719508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45027b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa8ebc40; to 'JaxprTracer' at 0x7ffbaa8eb6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61e5b610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00943606963785799
Epoch 58 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01008806553755801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01008807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253d70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc14d7b0; to 'JaxprTracer' at 0x7ffbbc14ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d767cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0028739547049508843
Epoch 58 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009359885666962423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00935989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25280>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe250df80; to 'JaxprTracer' at 0x7ffbe250c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d046a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008950821073709274
Epoch 58 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01768169673054423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0176817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa567a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd322a0; to 'JaxprTracer' at 0x7ffbbdd31a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40340290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009115962831170514
Epoch 58 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024417984952450608, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a8b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2233740; to 'JaxprTracer' at 0x7ffbe22319e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x340d4120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01117507345569026
Epoch 58 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021904646860498495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000ba50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7cc770; to 'JaxprTracer' at 0x7ffd5c5b8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x637dfbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010310971690131105
Epoch 58 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023174425841172366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02317443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b490>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c521b70; to 'JaxprTracer' at 0x7ffd3c523ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x435b2930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010899472780342577
Epoch 58 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021638345826562173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02163835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f9600>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c68ff60; to 'JaxprTracer' at 0x7ffbe0f8ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48298f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.001678743321874864
Epoch 58 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022342101503961546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0223421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c070>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8551350; to 'JaxprTracer' at 0x7ffba85522f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40dee930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.008731190561489001
Epoch 58 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01637236542388809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01637237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6be50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcc49a0; to 'JaxprTracer' at 0x7ffbbdcc4130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66b56540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008277640820868864
Epoch 58 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0215705698993219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02157057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22530b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd42200; to 'JaxprTracer' at 0x7ffbbdd42bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c60e6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007775985385224699
Epoch 58 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021415090519296572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02141509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24780>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1587a60; to 'JaxprTracer' at 0x7ffbe15843b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cc49ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008722220342300753
Epoch 58 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02585556301716487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02585556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57220>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c0e8450; to 'JaxprTracer' at 0x7ffe3c0ea0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b3908f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011154745918176858
Epoch 58 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022951743700797795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02295174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778340>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9974400; to 'JaxprTracer' at 0x7ffbb9976610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fa4c990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009105058857173894
Epoch 58 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02233650244582066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0223365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b780>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba958e930; to 'JaxprTracer' at 0x7ffba958dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60ee34f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008701008904906354
Epoch 58 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022847360818447217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c80d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd466b1a0; to 'JaxprTracer' at 0x7ffdd466a5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc528d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0066163467248636825
Epoch 58 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02218707340870362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02218707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c59b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87ac090; to 'JaxprTracer' at 0x7ffba87ad3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b353ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00829643802484407
Epoch 58 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024974327905868995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02497433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c312cc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6a27a0; to 'JaxprTracer' at 0x7ffbba4f9c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447dd730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009929486104009391
Epoch 58 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01659348067556521, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01659348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f65f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0d8e00; to 'JaxprTracer' at 0x7ffbbc0d8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ee1e040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006271828919490102
Epoch 58 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022980913898825475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02298091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a13c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd149df0; to 'JaxprTracer' at 0x7ffbbd148400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9f3e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.010853890401078377
Epoch 58 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02747138974704221, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02747139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93349080>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4551df0; to 'JaxprTracer' at 0x7ffdd4552250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x150b2800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01168540789679696
Epoch 58 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02512593768452343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02512594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba797a70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb0593a0; to 'JaxprTracer' at 0x7ffbbb059350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12e5dff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007724094842738029
Epoch 58 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024589178983776487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02458918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be480>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4f2c00; to 'JaxprTracer' at 0x7ffbba4f0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e59d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01061617951513358
Epoch 58 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02237214938674067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02237215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94a0d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c18a750; to 'JaxprTracer' at 0x7ffd5c18a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1051c3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.00555566436461302
Epoch 58 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020881907056942053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02088191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4cb30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92e13e20; to 'JaxprTracer' at 0x7ffb92e13600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x310e85d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006189616892176887
Epoch 58 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024460142526130067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02446014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8b80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9125990; to 'JaxprTracer' at 0x7ffbb9125ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e4fe5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.0066757047347190315
58, epoch_train_loss=0.22819815606150778
Epoch 59
Epoch 59 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021503114647314473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ed330>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4691440; to 'JaxprTracer' at 0x7ffdf46912b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11060370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010892942610288973
Epoch 59 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018033023579700123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01803302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a930>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa43a7f0; to 'JaxprTracer' at 0x7ffbaa4389a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ea4780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009272065559883937
Epoch 59 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010666187944172656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01066619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b6f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaf4e2a0; to 'JaxprTracer' at 0x7ffbaaf4ff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22b23310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0032820716768120115
Epoch 59 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011898454160629292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01189845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5040>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c282e80; to 'JaxprTracer' at 0x7ffd9c283ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x600f23f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008721447977605667
Epoch 59 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.023705372452551412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c7f00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938f5cb0; to 'JaxprTracer' at 0x7ffb938f6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33caa20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.012078124803993694
Epoch 59 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.029688365340298263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02968837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0f70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42559e0; to 'JaxprTracer' at 0x7ffdf4257f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bcee9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.013752019192614044
Epoch 59 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.027832102092358042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0278321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b3d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb935601d0; to 'JaxprTracer' at 0x7ffb935611c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x497bdc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.014456853362689067
Epoch 59 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.025226826803042193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02522683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009bb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6e5f80; to 'JaxprTracer' at 0x7ffdbc6e58f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x400526e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012187332099220911
Epoch 59 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019531809655139936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01953181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be540>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3ea660; to 'JaxprTracer' at 0x7ffbbc3e8900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75631520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003707506748439047
Epoch 59 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.013793837534523963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01379384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac68b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcc4400; to 'JaxprTracer' at 0x7ffbbdcc5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x257c9aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.017564833118695698
Epoch 59 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.014712595307966855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0147126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e19f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c3731a0; to 'JaxprTracer' at 0x7ffc6c371b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x544bc610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009579808677894269
Epoch 59 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.023800317356619118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334bd90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9307a480; to 'JaxprTracer' at 0x7ffb93079580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57aae840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00983288355482605
Epoch 59 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.025354553528543596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02535455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aedd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb99f1850; to 'JaxprTracer' at 0x7ffbb99f1080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e2d4fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.011244950372516063
Epoch 59 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.029295602632512935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0292956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c505e10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c13c5e0; to 'JaxprTracer' at 0x7ffd3c13ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a6e5c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012935802753488292
Epoch 59 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02709010768698161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02709011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457d850>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd79db70; to 'JaxprTracer' at 0x7ffbbd79cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4360a440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.011895437230120012
Epoch 59 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.025024539717064823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02502454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466e7e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e267a0; to 'JaxprTracer' at 0x7ffbe0b16840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x860a1e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.010524894972748389
Epoch 59 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02352021685159391, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02352022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc676080>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8b0d210; to 'JaxprTracer' at 0x7ffba8b0d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c68e380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007948717253915374
Epoch 59 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02134027446586847, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02134027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa546a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad87470; to 'JaxprTracer' at 0x7ffbbad85df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfa13910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009231515541900347
Epoch 59 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.022402806078070856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510450>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba92ddad0; to 'JaxprTracer' at 0x7ffba92dec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fb4b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011206810773473321
Epoch 59 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.015257213764589512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01525721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67ef90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c233e20; to 'JaxprTracer' at 0x7ffd5c230860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55eb6540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.009441827981191465
Epoch 59 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022768254602162915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02276825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccadc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc8d710; to 'JaxprTracer' at 0x7ffbbdc8e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25e9e200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.013568746007998622
Epoch 59 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.023178003843019806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.023178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b1e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9336cea0; to 'JaxprTracer' at 0x7ffb9336c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b5454f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.013713614256582712
Epoch 59 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.022060171621297902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02206017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f050>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd40d2d90; to 'JaxprTracer' at 0x7ffdd40d0f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ae035a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.009658626412892824
Epoch 59 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024234046665064193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02423405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8250>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6c83b0; to 'JaxprTracer' at 0x7ffdbc6c89a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x859c0de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01229242020153882
Epoch 59 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022872837836586994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02287284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92aff7f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c37ede0; to 'JaxprTracer' at 0x7ffc6c37d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3142c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006346365305453672
Epoch 59 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02257212130235634, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02257212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7be500>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9363830; to 'JaxprTracer' at 0x7ffbb9362fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5367c0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.00711045316434913
Epoch 59 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02530555873797422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f9610>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbe1ffb0; to 'JaxprTracer' at 0x7ffbbbe1fe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7779ba60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.008163730205541338
59, epoch_train_loss=0.2806118018166738
Epoch 60
Epoch 60 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.024065718680949783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02406572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4cd00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c30c70; to 'JaxprTracer' at 0x7ffbe1c322f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25b686e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012928121666450918
Epoch 60 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.021238452813933138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02123845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77b150>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad1a020; to 'JaxprTracer' at 0x7ffc6c2a5f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c69a360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010264508508848389
Epoch 60 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009841999326944227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.009842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45031b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbda700; to 'JaxprTracer' at 0x7ffbbcbd9990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x508dab50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004052672149091404
Epoch 60 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.011045359705382427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01104536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253760>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab809e90; to 'JaxprTracer' at 0x7ffbab809030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x450cc750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.006763200292168842
Epoch 60 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01850890584670015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01850891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57020>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8b0ccc0; to 'JaxprTracer' at 0x7ffba8b0fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b5fee90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009185008489178179
Epoch 60 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023637444859765138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4ed0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb7dbb50; to 'JaxprTracer' at 0x7ffbbb7da610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6efa2fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.013168279663091996
Epoch 60 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02380362790593209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02380363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f880>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2063470; to 'JaxprTracer' at 0x7ffbe2061530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a85150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012284973766399003
Epoch 60 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02240155174325582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457df00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb99f1b70; to 'JaxprTracer' at 0x7ffbb99f21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82914540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012647015761405438
Epoch 60 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022273440313074707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d1710>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c5b9490; to 'JaxprTracer' at 0x7ffd5c5ba200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aad2710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003778894429037307
Epoch 60 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021646308869666224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02164631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099fb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c12b6f0; to 'JaxprTracer' at 0x7ffd3c300ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4db3eaf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00880816230728334
Epoch 60 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016894035179978083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01689404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305b700>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c211da0; to 'JaxprTracer' at 0x7ffbbcc82840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41f6c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008206663157514154
Epoch 60 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022324369878713144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4500720>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa14aa20; to 'JaxprTracer' at 0x7ffbaa149e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40203900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007936390711240767
Epoch 60 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02184404669728378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02184405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc89a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e24c20; to 'JaxprTracer' at 0x7ffb93e27420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54421ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.0087868992006665
Epoch 60 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02527190958464557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02527191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56990>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9819620; to 'JaxprTracer' at 0x7ffba9819f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dc4bc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011324924864490942
Epoch 60 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.020329012779760146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02032901, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeffbb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93560720; to 'JaxprTracer' at 0x7ffba8a80680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76a69db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.012409832469507078
Epoch 60 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02032420991806967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02032421, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457de80>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba78fd30; to 'JaxprTracer' at 0x7ffbba78de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72efbba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.010844088609708247
Epoch 60 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02286246720993367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb22c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd98f740; to 'JaxprTracer' at 0x7ffbbd98e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6903d2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006425855273196992
Epoch 60 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02240227137678204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02240227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5080>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7d6b10; to 'JaxprTracer' at 0x7ffba90e98f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a5b2740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008639501022990518
Epoch 60 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025144035710094777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02514404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930afd80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc818f0; to 'JaxprTracer' at 0x7ffd7470b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a1f75f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011347557105003308
Epoch 60 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017960897111505163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0179609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7470>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e39ee0; to 'JaxprTracer' at 0x7ffb92a9ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5adba610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007457628851392527
Epoch 60 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02494371949995487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02494372, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0350>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2b0f90; to 'JaxprTracer' at 0x7ffb935ecef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x336c7570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.013646433424686159
Epoch 60 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02586234010453193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02586234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a050>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd152d40; to 'JaxprTracer' at 0x7ffbbd150310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3647e980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.013330104338547819
Epoch 60 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02468714402654548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02468714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e3920>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa439a80; to 'JaxprTracer' at 0x7ffbaa43bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x436bf220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.009244444707114089
Epoch 60 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02398570430344492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0239857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511e20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0d5fb50; to 'JaxprTracer' at 0x7ffbe0718220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x763ce330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.012567751316764339
Epoch 60 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023669708948292373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eea90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7468b8d0; to 'JaxprTracer' at 0x7ffdd42aad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc81ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005856838750121033
Epoch 60 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02205639772378245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0220564, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19330>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42e8450; to 'JaxprTracer' at 0x7ffdf42e9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67761000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006721416817589402
Epoch 60 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02475459232818261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02475459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bcdf0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaca97b0; to 'JaxprTracer' at 0x7ffbbaca96c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f4a8ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007737335800326201
60, epoch_train_loss=0.2563645034538149
Epoch 61
Epoch 61 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021611887276313593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02161189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67edc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c5004f0; to 'JaxprTracer' at 0x7ffe2c500d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b9f4100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01187111030405663
Epoch 61 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01931186527885343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01931187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc676670>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb19f80; to 'JaxprTracer' at 0x7ffbbbb189f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd681b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010170079189190875
Epoch 61 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010385564033679955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01038556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b8f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa8dca90; to 'JaxprTracer' at 0x7ffbaa8dee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79e1fc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.004225646892867236
Epoch 61 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01050051842000207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01050052, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7460>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe026dfd0; to 'JaxprTracer' at 0x7ffbe026e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d597310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008694493462196348
Epoch 61 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017256813090977808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01725681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c50e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd413c950; to 'JaxprTracer' at 0x7ffbe0b8b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64d4d5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010162657564744462
Epoch 61 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.021730051172124815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02173005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7d60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8a83880; to 'JaxprTracer' at 0x7ffba8a835b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50c619b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012575800114060618
Epoch 61 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0208282494052844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02082825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefc510>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1ea750; to 'JaxprTracer' at 0x7ffbbd1e89a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82f2aae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01138711874052192
Epoch 61 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020838563788504103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02083856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefdb00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba528180; to 'JaxprTracer' at 0x7ffbba528040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66a1a3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011967718531870997
Epoch 61 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0208746196188693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02087462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f83c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8559350; to 'JaxprTracer' at 0x7ffba855a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ac0ed00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0023771808799581025
Epoch 61 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021337164656108368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02133716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07de40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc757fb0; to 'JaxprTracer' at 0x7ffdbc757790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ab9eec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010191758298298853
Epoch 61 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01640632846108904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01640633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92affe20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c3018f0; to 'JaxprTracer' at 0x7ffd3c300310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x544e62c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00913646804825446
Epoch 61 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02199002098352201, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93349eb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa07e110; to 'JaxprTracer' at 0x7ffbaa07cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfa13f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008819233042644809
Epoch 61 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021706255862276397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02170626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310c00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8551c60; to 'JaxprTracer' at 0x7ffba8550860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x717f1490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.00963719421909456
Epoch 61 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025277743034851335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02527774, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cba80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc711990; to 'JaxprTracer' at 0x7ffbe1005e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4126f290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01250990150362077
Epoch 61 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022288413716617182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02228841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb87f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdffa94e0; to 'JaxprTracer' at 0x7ffbdffabf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c1ebd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010112397718049393
Epoch 61 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02127426031471533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02127426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009aa0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb5bdad0; to 'JaxprTracer' at 0x7ffbbb5be9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4361ed20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009683730066409275
Epoch 61 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022387589782889235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02238759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4890>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf44fa250; to 'JaxprTracer' at 0x7ffdf44f8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40088810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007576209708075493
Epoch 61 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021601270463522317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02160127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa545d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab808310; to 'JaxprTracer' at 0x7ffbab809ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c4c6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009173205629210413
Epoch 61 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025654919943747294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02565492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc9a80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e2de90; to 'JaxprTracer' at 0x7ffbb8e2c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bc05660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011256867433571384
Epoch 61 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.018364924058021887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01836492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250970>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfcabb0; to 'JaxprTracer' at 0x7ffbbdfcb100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60bf7130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007536959625169245
Epoch 61 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.025204087960785607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02520409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69a10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93956480; to 'JaxprTracer' at 0x7ffb93957ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7608bfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.013007513872590545
Epoch 61 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027632830245130902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02763283, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305b5f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c36e1b0; to 'JaxprTracer' at 0x7ffbe0b28e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58839f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012579053403503808
Epoch 61 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.027474867633290108, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02747487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bfdc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc60d10; to 'JaxprTracer' at 0x7ffbbcc618f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x825bad80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008963457129088467
Epoch 61 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025627322016616442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02562732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bd6e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3f64d0; to 'JaxprTracer' at 0x7ffd5c3f7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x864d6150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011361545407560545
Epoch 61 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.025063439201794057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02506344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e081d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c496020; to 'JaxprTracer' at 0x7ffe2c494220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x369def40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006254275384813228
Epoch 61 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022045212317800725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02204521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4f880>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe247da30; to 'JaxprTracer' at 0x7ffbe247c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82d5c9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007077693818181542
Epoch 61 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024455138511698275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02445514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30ed30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c06a5c0; to 'JaxprTracer' at 0x7ffd3c06a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15342950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007275615017289957
61, epoch_train_loss=0.25558488500489396
Epoch 62
Epoch 62 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020263277250705716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02026328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eeb90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbce84220; to 'JaxprTracer' at 0x7ffbbce87290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23351a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01150814722190681
Epoch 62 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016456143062735823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01645614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496b7b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa075440; to 'JaxprTracer' at 0x7ffbaa076e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e319940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010549718596170328
Epoch 62 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009997454867925307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00999745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4501fb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe335940; to 'JaxprTracer' at 0x7ffbbe335850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eccdfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003202833316578613
Epoch 62 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009701945649384017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00970195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc9b30>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe07716c0; to 'JaxprTracer' at 0x7ffbe07739c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76dcc290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009687812858993245
Epoch 62 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017170838151547213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01717084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b46c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2231300; to 'JaxprTracer' at 0x7ffbe2231710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54143300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010519551052278477
Epoch 62 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02143756050305296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02143756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512320>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93093560; to 'JaxprTracer' at 0x7ffb93093bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf1a6410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012185218140055132
Epoch 62 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.020402254304436762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e6e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb87f10; to 'JaxprTracer' at 0x7ffbbbb84b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60ec1b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011039757281033768
Epoch 62 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02140881379140876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02140881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7170>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20aff60; to 'JaxprTracer' at 0x7ffbe20aed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47927330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01162656170429853
Epoch 62 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020806140810250888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02080614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be200>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c5b8180; to 'JaxprTracer' at 0x7ffd5c5b8590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42047150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0022653369703770835
Epoch 62 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021366690482749407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac4ff0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c12b510; to 'JaxprTracer' at 0x7ffc6c12bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71f57280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.0100620439693094
Epoch 62 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016018815662176566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01601882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2290>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc754590; to 'JaxprTracer' at 0x7ffdbc7544a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d5a8c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008952826494816726
Epoch 62 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021312537088633992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02131254, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a9e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba855a7f0; to 'JaxprTracer' at 0x7ffba85593f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f103ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00843708330604334
Epoch 62 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021504078710050653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa54920>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd43a60; to 'JaxprTracer' at 0x7ffbbdd40130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x529155b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009419399508627831
Epoch 62 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025905936013022185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02590594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a480>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb99c09f0; to 'JaxprTracer' at 0x7ffbb99c1580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54876990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012832555091726323
Epoch 62 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023253932300473467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02325393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff120>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe28b3d0; to 'JaxprTracer' at 0x7ffbbe28a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a281b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.01026781912582987
Epoch 62 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02243595177411574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02243595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6ba0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c25bf60; to 'JaxprTracer' at 0x7ffbe207e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c452350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00971420674808171
Epoch 62 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023064863541500665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02306486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb3c80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c4b0720; to 'JaxprTracer' at 0x7ffc6c4b0ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7caa7800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007294672057979801
Epoch 62 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022611312758432697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02261131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5db0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87ae110; to 'JaxprTracer' at 0x7ffba87af7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ae53b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009228953168191674
Epoch 62 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025832727594561067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02583273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aefd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90e9a80; to 'JaxprTracer' at 0x7ffba90e89a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9c90e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011399807060020148
Epoch 62 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01797498463431906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01797498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7220>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7deac0; to 'JaxprTracer' at 0x7ffd3c7dda30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x575a5dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007241670851142289
Epoch 62 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02411852586470363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02411853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba796860>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c51de40; to 'JaxprTracer' at 0x7ffe2c51fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43f576b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012290998199714824
Epoch 62 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026582986025058854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02658299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc655b00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb1a660; to 'JaxprTracer' at 0x7ffbbbb19b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83291d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01244796613333314
Epoch 62 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025686577934619, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02568658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348470>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4713060; to 'JaxprTracer' at 0x7ffdd4711df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ca610b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008318450342354641
Epoch 62 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024357048939859502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02435705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30ced0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe181fb50; to 'JaxprTracer' at 0x7ffbe1ca7600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c69f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011169386502842929
Epoch 62 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02403631335169281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02403631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052ca20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaba85490; to 'JaxprTracer' at 0x7ffdf466f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a565870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006007681984409875
Epoch 62 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021690113996589662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02169011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bcc70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1d0e50; to 'JaxprTracer' at 0x7ffd5c1d0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x539161c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007011855061971965
Epoch 62 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02408741869936795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1b7d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab202110; to 'JaxprTracer' at 0x7ffbab203e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x552eaf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007069974413366813
62, epoch_train_loss=0.25175228716145526
Epoch 63
Epoch 63 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020576658574418507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02057666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677e60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf466c6d0; to 'JaxprTracer' at 0x7ffdf466ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a5d5cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011437721126521765
Epoch 63 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01717975777809502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01717976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07cc40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0db510; to 'JaxprTracer' at 0x7ffd3c055fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c78440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010351506764908942
Epoch 63 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010108221571908863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01010822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe8d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93dc5800; to 'JaxprTracer' at 0x7ffb93dc4090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x157a82d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0035803752973623372
Epoch 63 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009969762798932294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00996976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657b00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c91a30; to 'JaxprTracer' at 0x7ffbe13e8e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a272a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009451481824657203
Epoch 63 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01750344742585319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01750345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3110c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba78cc70; to 'JaxprTracer' at 0x7ffbba78e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74dabdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010247008342099989
Epoch 63 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02193621776064151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02193622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5cc0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d69ee0; to 'JaxprTracer' at 0x7ffb92d68ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62ca0a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01205403968483481
Epoch 63 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021031212873790964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02103121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fe6c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabae34c0; to 'JaxprTracer' at 0x7ffbabae1ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73e30b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01101146298050693
Epoch 63 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022338452464586135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02233845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ff330>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba84fa2a0; to 'JaxprTracer' at 0x7ffba84f8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x508e7e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011643772738941644
Epoch 63 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021942856552136725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0a1a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd747091c0; to 'JaxprTracer' at 0x7ffe3c274590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67195770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002308607603510918
Epoch 63 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021461221878140507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778bc0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f56480; to 'JaxprTracer' at 0x7ffbe0f542c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x505d0560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009872544476214435
Epoch 63 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016257347381313077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01625735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fa1d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7620c0; to 'JaxprTracer' at 0x7ffba98cc720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c3e6530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00908861787698088
Epoch 63 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021408461082682833, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02140846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507f70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4c09a0; to 'JaxprTracer' at 0x7ffbba4c2390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ee8c910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008615262129374775
Epoch 63 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021193008846416336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a1d70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2763790; to 'JaxprTracer' at 0x7ffbe27629d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x262b4460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009592062250906206
Epoch 63 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025267213951542727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02526721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2c10>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba79ac00; to 'JaxprTracer' at 0x7ffbba7997b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82f640a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012317244586779746
Epoch 63 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022083854767345493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5120>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b6e30; to 'JaxprTracer' at 0x7ffbe15b5300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ebbe490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009997565780686573
Epoch 63 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021366996726323802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.021367, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefe780>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd463e0; to 'JaxprTracer' at 0x7ffbbdd45a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a1a4f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009578039963813728
Epoch 63 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02221106728631628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02221107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb96c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe22e7740; to 'JaxprTracer' at 0x7ffbe22e4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a77ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007261401584535524
Epoch 63 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02194579590790375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0219458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b4a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb940bf10; to 'JaxprTracer' at 0x7ffbba558180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81932f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009096337666470593
Epoch 63 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025687588744006843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02568759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67dc20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe19c4720; to 'JaxprTracer' at 0x7ffbe19c6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84092030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011137798106324523
Epoch 63 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017898110018783386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01789811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466ebc0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c52ab10; to 'JaxprTracer' at 0x7ffbb9656890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fa35330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007221310613478937
Epoch 63 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024555328277259935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02455533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc9fc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7458ed90; to 'JaxprTracer' at 0x7ffd7458eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x411e83d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012393492723045673
Epoch 63 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027730843805967707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02773084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2250ef0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa075940; to 'JaxprTracer' at 0x7ffbaa075df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x828a130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012729343202198104
Epoch 63 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.026299515175544873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02629952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4501910>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4c5e0; to 'JaxprTracer' at 0x7ffbe1a4db70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d896760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008560100639144197
Epoch 63 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025579216646976228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02557922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1a6a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c4bd990; to 'JaxprTracer' at 0x7ffd5c4beb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fb846a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011449297016213692
Epoch 63 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023828340796557868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02382834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f5d60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbff920; to 'JaxprTracer' at 0x7ffd5c3b4b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d5189d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005859487921410675
Epoch 63 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02144787373379553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02144787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5b40>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe26ec1d0; to 'JaxprTracer' at 0x7ffbab7b6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63291c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006792063436338735
Epoch 63 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024217099121838892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0242171, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bf230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6595d0; to 'JaxprTracer' at 0x7ffc6c659440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x832a0360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007289759654607146
63, epoch_train_loss=0.25093770599186865
Epoch 64
Epoch 64 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021370976083485992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02137098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a860>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1966b0; to 'JaxprTracer' at 0x7ffbbd196610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13199700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011262345858357801
Epoch 64 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017291436192488067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01729144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ae1f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9336e8e0; to 'JaxprTracer' at 0x7ffb9336e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a093590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009910415055987293
Epoch 64 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010110893556087503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01011089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4c1b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb968f1f0; to 'JaxprTracer' at 0x7ffbb968d620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66d0e220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.00408749435780691
Epoch 64 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010152182269648202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01015218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009800>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd31260; to 'JaxprTracer' at 0x7ffbbdd319e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b3b7860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009156152641088749
Epoch 64 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018104125180891748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01810413, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff2d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c12b6a0; to 'JaxprTracer' at 0x7ffd5c128900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32086ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010028564540461058
Epoch 64 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02272149805455613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0227215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fd320>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc2e1440; to 'JaxprTracer' at 0x7ffdbc2e0d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dc7e3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012075224464785499
Epoch 64 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021249476558769773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02124948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c44c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2762520; to 'JaxprTracer' at 0x7ffbe27609f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b6df930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010933991406534276
Epoch 64 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022283703904487546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0222837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c7200>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd744d7510; to 'JaxprTracer' at 0x7ffd744d71f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34051db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011508934695320047
Epoch 64 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02120091900266554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02120092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18210>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb999f4c0; to 'JaxprTracer' at 0x7ffbe274eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x631fa4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0018750508792196288
Epoch 64 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02114039144926874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02114039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bd2c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc73e430; to 'JaxprTracer' at 0x7ffdbc73f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52e360a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009863525715841447
Epoch 64 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016262407984247027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01626241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ac720>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe3040e0; to 'JaxprTracer' at 0x7ffbbe306f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46824aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009044810289235919
Epoch 64 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021484980571643397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02148498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a68730>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d0680; to 'JaxprTracer' at 0x7ffbb96d1350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c3fbb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00860224092022364
Epoch 64 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021468764474260688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511680>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6eae80; to 'JaxprTracer' at 0x7ffc6c6e8090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3002e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.00952902639197536
Epoch 64 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02522887764958181, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02522888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27340>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8562700; to 'JaxprTracer' at 0x7ffba85625c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38f85b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012311967155626522
Epoch 64 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02266954180936111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938efb70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba9a7d30; to 'JaxprTracer' at 0x7ffbba9a7ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10a4da00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010013792803115748
Epoch 64 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021605502947827808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2eb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93561ee0; to 'JaxprTracer' at 0x7ffb93563880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43215530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009574177034957448
Epoch 64 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022515308802494638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251531, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c8e40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c149b70; to 'JaxprTracer' at 0x7ffe3c149350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c8404f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.00715513265609604
Epoch 64 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021747939150594642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c4b9440; to 'JaxprTracer' at 0x7ffd9c4b8c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c418a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008976089831344857
Epoch 64 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025334377564271114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02533438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba797870>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab46c810; to 'JaxprTracer' at 0x7ffbab46d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x382d8610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010966718857893284
Epoch 64 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017962886959944843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01796289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c505430>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc0cb1f0; to 'JaxprTracer' at 0x7ffdbc0cb9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x283fc610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006996468100439929
Epoch 64 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.024151477631843797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415148, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93348070>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7df560; to 'JaxprTracer' at 0x7ffd3c7dcb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ca5cbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012145748685704911
Epoch 64 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02679864354970436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02679864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f950>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c51e5c0; to 'JaxprTracer' at 0x7ffe2c51c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e24c1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012507123334734393
Epoch 64 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025897761778062613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02589776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ba30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e8c6d0; to 'JaxprTracer' at 0x7ffbb9e8ea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72af89d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008367004080178103
Epoch 64 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02477654525840651, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02477655, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bef70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaacc22f0; to 'JaxprTracer' at 0x7ffbaacc18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55b91800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011270445177923938
Epoch 64 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023875387487570322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02387539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0aa40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabaa60c0; to 'JaxprTracer' at 0x7ffbabaa5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x483fc0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005643203362974559
Epoch 64 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02140393505760759, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02140394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6550f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87b2070; to 'JaxprTracer' at 0x7ffba87b0090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49fe6600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006588361938864485
Epoch 64 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02395604582735319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67eea0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f72bb0; to 'JaxprTracer' at 0x7ffbe0f72a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x576d4b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007262359851337431
64, epoch_train_loss=0.2476563700880293
Epoch 65
Epoch 65 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02061499788870262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.020615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac73b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd740f5e90; to 'JaxprTracer' at 0x7ffd740f47c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b7ad860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011631527624370763
Epoch 65 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018536048253459704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01853605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4502b10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcaa3e0; to 'JaxprTracer' at 0x7ffbbdcaba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e2e4470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009838063455149027
Epoch 65 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010181784024645629, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01018178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930595d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8e2110; to 'JaxprTracer' at 0x7ffbbc8e2fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e114ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0035450688664078207
Epoch 65 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010731551099756445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01073155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c5044d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba958fe70; to 'JaxprTracer' at 0x7ffba958cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a9436f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008917063471339266
Epoch 65 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018235535106810558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01823554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0690>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20d08b0; to 'JaxprTracer' at 0x7ffbe20d3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8599510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009812184945836347
Epoch 65 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02266788571154449, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02266789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409bbc0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0da0c0; to 'JaxprTracer' at 0x7ffbaa0daed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf1a3b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011918703949791502
Epoch 65 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021876491742532568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fdbb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7abec0; to 'JaxprTracer' at 0x7ffd3c7aa570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5979bed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011182473202961982
Epoch 65 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02187980917448274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02187981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25dc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3eac00; to 'JaxprTracer' at 0x7ffbbc3ea3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b7e3cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011468197905867065
Epoch 65 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0205417647217328, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02054176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bf4a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcc80c20; to 'JaxprTracer' at 0x7ffbaaf1be70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1734bbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.001840490089104585
Epoch 65 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021729919544414736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253010>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c372b60; to 'JaxprTracer' at 0x7ffc6c370540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8627b6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009427854030665173
Epoch 65 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016539595022991738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0165396, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466f980>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4317e70; to 'JaxprTracer' at 0x7ffdd4317150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41f0f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008679318600496137
Epoch 65 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02242875852849069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02242876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779420>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4c36f0; to 'JaxprTracer' at 0x7ffbba4c3240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a2eef40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008189706730980765
Epoch 65 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.022147567369282445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02214757, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba794340>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c522930; to 'JaxprTracer' at 0x7ffb93078a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c49ae60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009226808895772516
Epoch 65 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.026020540030486053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02602054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb25c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa95b3d0; to 'JaxprTracer' at 0x7ffbbc0ff8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81a7ad50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012169855867729791
Epoch 65 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022512594065743484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02251259, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec440>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc66cbd0; to 'JaxprTracer' at 0x7ffd743d65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11b4f5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.00980814870101942
Epoch 65 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02174257029792281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25320>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd41e40; to 'JaxprTracer' at 0x7ffbbdd40310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cffb950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009468246670647228
Epoch 65 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023046256212735233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02304626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948580>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c12a700; to 'JaxprTracer' at 0x7ffbb93ebc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fac1740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006998199867582814
Epoch 65 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021900715113989083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02190072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512470>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3376f0; to 'JaxprTracer' at 0x7ffd5c3358f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7706bd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00889171035901114
Epoch 65 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02529428673302293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb9dd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba501a30; to 'JaxprTracer' at 0x7ffbba500a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d4dd9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01075980719245621
Epoch 65 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017847246336477295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01784725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6bd90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba84f9300; to 'JaxprTracer' at 0x7ffbaa68abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb23acf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007140779187568549
Epoch 65 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023593055647895572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02359306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccb550>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd40b6660; to 'JaxprTracer' at 0x7ffdd40b7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f82730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012143058178599356
Epoch 65 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02576073648960655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02576074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30dbd0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42ea200; to 'JaxprTracer' at 0x7ffdf42e9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8595ff20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012386384562249502
Epoch 65 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02512222181634706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02512222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ae570>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90062f0; to 'JaxprTracer' at 0x7ffba9004450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x659dd300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008351665788212963
Epoch 65 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023928719860947804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02392872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67db30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4fa0c0; to 'JaxprTracer' at 0x7ffbba4fa840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82ecb0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011418311971094325
Epoch 65 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024562125581594027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02456213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19470>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb0e480; to 'JaxprTracer' at 0x7ffbbad1aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x860abdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.00587796697390126
Epoch 65 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022341364567744652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d0b90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2a0e50; to 'JaxprTracer' at 0x7ffe2c2a2fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ab5ce80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006816398733388719
Epoch 65 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024711660204485793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02471166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a670>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4ac0e0; to 'JaxprTracer' at 0x7ffbba4ac590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3795c8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007255800485767281
65, epoch_train_loss=0.24516379630797153
Epoch 66
Epoch 66 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.01996108260124783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01996108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cb20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0faca0; to 'JaxprTracer' at 0x7ffbaa0fa5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30caa9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012036895642214034
Epoch 66 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017702395382253225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0177024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457da90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7458e660; to 'JaxprTracer' at 0x7ffd3c52ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6757d6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009704206790229245
Epoch 66 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.011120874546397534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01112087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a3f00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd56e80; to 'JaxprTracer' at 0x7ffb939573d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35e5c500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0039389158976986804
Epoch 66 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01089623293845571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01089623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b4c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c69f80; to 'JaxprTracer' at 0x7ffbb9c6b5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e709f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.00900435064846029
Epoch 66 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01909441695957082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01909442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94b510>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbc8950; to 'JaxprTracer' at 0x7ffbbcbcb6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32dd8460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00983594556128775
Epoch 66 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02356623434066846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02356623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc330>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c327a0; to 'JaxprTracer' at 0x7ffbe1c313f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x207d0b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011821575793970746
Epoch 66 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022005881642170405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02200588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a110>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c37e750; to 'JaxprTracer' at 0x7ffc6c37c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f386640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010991568663774369
Epoch 66 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022654552378854147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02265455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099bb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93916de0; to 'JaxprTracer' at 0x7ffb93915760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77238c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011210863690212021
Epoch 66 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02125196334350642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02125196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c2f6830>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe274c950; to 'JaxprTracer' at 0x7ffbe274c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70d75f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002290469253404917
Epoch 66 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02055138428986225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02055138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07c270>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd9612b0; to 'JaxprTracer' at 0x7ffbbd961210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x384a4fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009702329829485296
Epoch 66 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.015373230829293922, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01537323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6ab0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0743290; to 'JaxprTracer' at 0x7ffbe07411c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x379f57e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009177682634559781
Epoch 66 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02058869503802843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0205887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57ff0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d1ee0; to 'JaxprTracer' at 0x7ffbb96d2d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bb5ddf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008641745833187862
Epoch 66 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021135749082202497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009a30>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2b2d90; to 'JaxprTracer' at 0x7ffd5c2b0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aed0fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009615497283825125
Epoch 66 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025292572491231746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94a1c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c4f7d30; to 'JaxprTracer' at 0x7ffdd42f6840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35c9c2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.01175711203931556
Epoch 66 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023398750491302214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02339875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afdc40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb05b9c0; to 'JaxprTracer' at 0x7ffbbb05aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x614fe5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.010089584563724031
Epoch 66 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021981175361129885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02198118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf40985b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c188720; to 'JaxprTracer' at 0x7ffbdfdaecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43128760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009716301796170697
Epoch 66 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02172028794123065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02172029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c77f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8d52b0; to 'JaxprTracer' at 0x7ffbaaf1be70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf00b480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007288788988989056
Epoch 66 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020635096840234974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0206351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2caba0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb99752b0; to 'JaxprTracer' at 0x7ffe3c22e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x816931f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00909010874614074
Epoch 66 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.023666648944985366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3101e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b2ad40; to 'JaxprTracer' at 0x7ffbe0b2a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c45e540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01048342419063785
Epoch 66 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016435337939374964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01643534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507ac0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf471f880; to 'JaxprTracer' at 0x7ffdf471f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6056ea00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007060281336603116
Epoch 66 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023816019467561237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02381602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fb6f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf412d2b0; to 'JaxprTracer' at 0x7ffbaaef3ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76f670c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01224844545106306
Epoch 66 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026607503340799067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0266075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc657c00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8d0ae30; to 'JaxprTracer' at 0x7ffba8d08400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6572b9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01236228652116766
Epoch 66 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02552533300526044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02552533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45030d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb00e520; to 'JaxprTracer' at 0x7ffbbb00c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a8c3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00826286093737117
Epoch 66 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.025794039227831193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02579404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeffaa0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0de32e0; to 'JaxprTracer' at 0x7ffbe0de3f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fef5060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01145713628407103
Epoch 66 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024141317433801237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02414132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bdc60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2148590; to 'JaxprTracer' at 0x7ffbe214ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x323e94f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005428309913404012
Epoch 66 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022013145584894298, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77bb50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7d7010; to 'JaxprTracer' at 0x7ffbab7d7470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8688b3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006338243832974997
Epoch 66 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02461593449262821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02461593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4ed50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c2b4db0; to 'JaxprTracer' at 0x7ffc6c2b53f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x888bb6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007234381685755498
66, epoch_train_loss=0.24678931380969857
Epoch 67
Epoch 67 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02225479452634983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02225479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefef60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8d4590; to 'JaxprTracer' at 0x7ffbbc8d7380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2072f680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01135729069647006
Epoch 67 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01831923133919007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01831923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5ab0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0567e20; to 'JaxprTracer' at 0x7ffbe0565ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x562deb00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009470437940572368
Epoch 67 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010473158738146575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01047316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bf8b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb93c5b20; to 'JaxprTracer' at 0x7ffbb93c4e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dba2f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0033636225020963867
Epoch 67 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010351242858106527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01035124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466f780>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96a89a0; to 'JaxprTracer' at 0x7ffbb96a8540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x307de8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008576475585154142
Epoch 67 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017615604256330592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0176156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313420>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfb0a90; to 'JaxprTracer' at 0x7ffbbdfb3c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d53e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009725290399081871
Epoch 67 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02302249570129812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73aca0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96b5300; to 'JaxprTracer' at 0x7ffbb96b4c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c425c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01170732223573219
Epoch 67 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022544856013098514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02254486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e03c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ca6610; to 'JaxprTracer' at 0x7ffbe1ca4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x337c3f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011112405338049275
Epoch 67 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023064541883530482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02306454, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ee8b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1586d90; to 'JaxprTracer' at 0x7ffbe1587b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ee14960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011158449164158694
Epoch 67 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020746558785799583, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02074656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334a190>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa410ae0; to 'JaxprTracer' at 0x7ffbaa4103b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54eaf840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0017032785524040725
Epoch 67 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02216981765622098, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02216982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d2b40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf429d6c0; to 'JaxprTracer' at 0x7ffdf429dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50df4740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009587884905556406
Epoch 67 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016711927431119177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01671193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f270>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e72e80; to 'JaxprTracer' at 0x7ffbbd962e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e36ad20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00880001357109243
Epoch 67 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021581163416795723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158116, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bd050>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd53cc20; to 'JaxprTracer' at 0x7ffbe274f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c29a2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008332148879720698
Epoch 67 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02105495080945374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02105495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c505370>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8550630; to 'JaxprTracer' at 0x7ffba85531a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67f82840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009419102049543358
Epoch 67 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02508896865566287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02508897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca740>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb815ee0; to 'JaxprTracer' at 0x7ffbbb814810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee63980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011814170978107089
Epoch 67 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.022178413912078667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02217841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f4a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e30b0; to 'JaxprTracer' at 0x7ffbbd1e2cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645d4d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009706763732977705
Epoch 67 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022044512011829217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02204451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6b40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa74400; to 'JaxprTracer' at 0x7ffbb9195b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57003740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009363986350112031
Epoch 67 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023554838160193287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02355484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24f60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b150d0; to 'JaxprTracer' at 0x7ffbe0b15cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45b2daf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007337530262693928
Epoch 67 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022605732484717134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052c8c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c4c2200; to 'JaxprTracer' at 0x7ffd3c4c1c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x104b5c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009069698125785359
Epoch 67 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025428804352701288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0254288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512c20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd19e8e0; to 'JaxprTracer' at 0x7ffbbd19fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b5092e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010440073843264156
Epoch 67 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017425475078358333, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01742548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb92b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbad22ed0; to 'JaxprTracer' at 0x7ffbbad21350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77b67230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.0072136157060993964
Epoch 67 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022868236903125366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02286824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000bcb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c05a7f0; to 'JaxprTracer' at 0x7ffe2c059e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fd44d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011759172365748775
Epoch 67 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025623344995062584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02562334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccbac0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1ea09a0; to 'JaxprTracer' at 0x7ffbe1ea15d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x724992c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012259571961574605
Epoch 67 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025260172051969138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02526017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa55260>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1156160; to 'JaxprTracer' at 0x7ffbe1154590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x649dc7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008325182187631959
Epoch 67 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024656718177290367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02465672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4e640>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb928dc1d0; to 'JaxprTracer' at 0x7ffbe0b04fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x14e8e4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011281660162714771
Epoch 67 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024369078378472193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02436908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457ccb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd7411f600; to 'JaxprTracer' at 0x7ffd7411c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x403f3e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005560373575264795
Epoch 67 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022298035233630248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07dc30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcc77e0; to 'JaxprTracer' at 0x7ffbbdcc7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a764910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006544415813523821
Epoch 67 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02491460627314169, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02491461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409bc70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa6ec00; to 'JaxprTracer' at 0x7ffbdfa6f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89e730e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007089918805385026
67, epoch_train_loss=0.2420798556905154
Epoch 68
Epoch 68 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021450362835284828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02145036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4fc50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb0eed0; to 'JaxprTracer' at 0x7ffbabb0da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11f94810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011436243840810554
Epoch 68 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01709853242472372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01709853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7cf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf42ead90; to 'JaxprTracer' at 0x7ffdf42e8bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a374590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009671024100587542
Epoch 68 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009615205462773934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00961521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e0b8f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba55a6b0; to 'JaxprTracer' at 0x7ffbba55aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62ab0570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0031720561556759755
Epoch 68 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.008871524634578475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00887152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa56450>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4469210; to 'JaxprTracer' at 0x7ffdf446b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cb6f030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009594957574018475
Epoch 68 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.015554051866829047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01555405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebad20>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0d5cdb0; to 'JaxprTracer' at 0x7ffbe0d5d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61036ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010832007390722598
Epoch 68 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.021497612423359104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02149761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930afa50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e1760; to 'JaxprTracer' at 0x7ffbbd1e3790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a8547e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012527719189445704
Epoch 68 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.01950703974258369, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01950704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059810>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabacd9e0; to 'JaxprTracer' at 0x7ffbabacf8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7922dc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011868040320014723
Epoch 68 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02322050191562647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0232205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1460>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8dc3c90; to 'JaxprTracer' at 0x7ffba8dc2660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45953620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012118351416691667
Epoch 68 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0231223807612918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02312238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2670>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98cef70; to 'JaxprTracer' at 0x7ffba98cdee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40543c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004278476857635418
Epoch 68 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023056761312180856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77baf0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd9618f0; to 'JaxprTracer' at 0x7ffbbd9636a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64e8afd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.010270751181615512
Epoch 68 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016008681309991116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01600868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253ed0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74670e00; to 'JaxprTracer' at 0x7ffd74670040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb62da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008549699646690464
Epoch 68 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02053561230412615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02053561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457f3f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e64c70; to 'JaxprTracer' at 0x7ffb93e64360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x751f59c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008352553526597757
Epoch 68 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02051614140252626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02051614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6b420>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc756d40; to 'JaxprTracer' at 0x7ffdbc757830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d0233f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009454241435330525
Epoch 68 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02698210434506412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0269821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512140>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf466cc20; to 'JaxprTracer' at 0x7ffbbbd57b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d49bbd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.013167900143502874
Epoch 68 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02296233802298319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930af670>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c116070; to 'JaxprTracer' at 0x7ffd3c116890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a42f270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.01023384927974503
Epoch 68 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022997596679919057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0229976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e2550>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87e2980; to 'JaxprTracer' at 0x7ffba87e09a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d25e820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.010195295036621081
Epoch 68 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.024083254313226842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02408325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73baa0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe17b09a0; to 'JaxprTracer' at 0x7ffbdfdac0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71fd6f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.008226869565174974
Epoch 68 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.023040118859294443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02304012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c5b90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20d1440; to 'JaxprTracer' at 0x7ffdf46b1940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67263f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009941611327938315
Epoch 68 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02645295347889982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02645295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c5056e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbb7d850; to 'JaxprTracer' at 0x7ffbbbb7cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a565480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011499352024481397
Epoch 68 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017224317079272872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01722432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba797830>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8db5580; to 'JaxprTracer' at 0x7ffba8db5c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ed4fce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007482452042866354
Epoch 68 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022120114606793508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6576a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb932c5e0; to 'JaxprTracer' at 0x7ffbb932fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x770d6010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01193181308554809
Epoch 68 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02373919585928724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0237392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e390>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8e1490; to 'JaxprTracer' at 0x7ffbe1c920c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x654bc880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012355481844297958
Epoch 68 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.022135181756518865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fcd00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c2c950; to 'JaxprTracer' at 0x7ffb93c2e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c7ea5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008706240470242063
Epoch 68 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.021477517616538745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02147752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67cd10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93c58360; to 'JaxprTracer' at 0x7ffb93c59df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74d49170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011487916083675609
Epoch 68 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022030208648740408, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02203021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeffc50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb313920; to 'JaxprTracer' at 0x7ffbbb311f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x705b39b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006195973772452722
Epoch 68 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02201722011187155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02201722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b650>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e8ca90; to 'JaxprTracer' at 0x7ffbbd46a1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ea6200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007529401131172094
Epoch 68 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024628026519503604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052f110>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfffbdd0; to 'JaxprTracer' at 0x7ffbe225f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81e5580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007370439687456804
68, epoch_train_loss=0.25845071813101234
Epoch 69
Epoch 69 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020549737142179284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02054974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27bb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c6bf1f0; to 'JaxprTracer' at 0x7ffd9c6bde40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15d4eff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011491008669895152
Epoch 69 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016570796809357902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0165708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca290>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe06cba10; to 'JaxprTracer' at 0x7ffbe06cbce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2f0c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009540202629700062
Epoch 69 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010046103705973475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0100461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6870>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87ae9d0; to 'JaxprTracer' at 0x7ffba87ae840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82a2f2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0033164604217679767
Epoch 69 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.00935882553804839, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00935883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5970>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfdc49a0; to 'JaxprTracer' at 0x7ffbdfdc4f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1097ae70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008989961572718995
Epoch 69 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017477718385214978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01747772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba797c40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d6b790; to 'JaxprTracer' at 0x7ffb92d69530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a4e6190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009345386321580938
Epoch 69 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02284981744055366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02284982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c79a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc659e40; to 'JaxprTracer' at 0x7ffbbc65bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x362344f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011884673796146444
Epoch 69 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022121342636302853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02212134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4e480>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc3eab60; to 'JaxprTracer' at 0x7ffbbc3ebf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22660340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010870055817013124
Epoch 69 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02311579630191621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0231158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1e60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4489530; to 'JaxprTracer' at 0x7ffdf448b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x842840c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01117897009963903
Epoch 69 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022825749617997795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02282575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7cd440; to 'JaxprTracer' at 0x7ffd3c7cc9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x766afba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.003490328750772674
Epoch 69 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022509685404404473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02250969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbaccaa00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c36f70; to 'JaxprTracer' at 0x7ffbbcc68450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43e6faa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009034089970142876
Epoch 69 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01653404282068742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01653404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2c9060>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c68d2b0; to 'JaxprTracer' at 0x7ffd9c68ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x231cfd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.00838199367399327
Epoch 69 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021646314234081223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02164631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4f50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6180e0; to 'JaxprTracer' at 0x7ffba98cd670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53d501d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.00798387544896102
Epoch 69 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020998182171436702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02099818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc6555e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c37c900; to 'JaxprTracer' at 0x7ffc6c37e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41d7e590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009026876811174716
Epoch 69 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02511177147368528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02511177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c504540>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd81c770; to 'JaxprTracer' at 0x7ffbbd81cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e5220a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011631893272267251
Epoch 69 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021620295868845646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73aa80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb29b1f0; to 'JaxprTracer' at 0x7ffbbb2993a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82b9ac60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009385514729801718
Epoch 69 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021143173200463286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02114317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e1a00>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe02860c0; to 'JaxprTracer' at 0x7ffbe0287a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41afc160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009067109271059966
Epoch 69 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022354096705163695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0223541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305a020>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c478720; to 'JaxprTracer' at 0x7ffe2c478fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b3fff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006879446553914757
Epoch 69 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021550698769596546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0215507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aca70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfcfb00; to 'JaxprTracer' at 0x7ffbbdfce2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f9ec1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008648658637916874
Epoch 69 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024719923102701855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02471992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6adc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c12bf60; to 'JaxprTracer' at 0x7ffd5c128e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45e6b5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010143024178865732
Epoch 69 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01692795635249008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01692796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008fc0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c335850; to 'JaxprTracer' at 0x7ffd5c334180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62876a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006937826015417559
Epoch 69 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023289072629898332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02328907, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa579c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd33ec0; to 'JaxprTracer' at 0x7ffbbdd328e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x864f6b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011502841962692545
Epoch 69 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02575322483857731, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02575322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c6930>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0770860; to 'JaxprTracer' at 0x7ffbe07727a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b260150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011899124099774092
Epoch 69 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02483406195488264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02483406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22520c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdfc8720; to 'JaxprTracer' at 0x7ffbbdfc8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf6f8da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007914016168762233
Epoch 69 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024639698167791997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0246397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052fe10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9005f80; to 'JaxprTracer' at 0x7ffba9004900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ce13f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.01086712251588524
Epoch 69 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02326573394264943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02326573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4fbf10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0747c0; to 'JaxprTracer' at 0x7ffbaa074d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bf99460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005348706081298555
Epoch 69 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0213607292496038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02136073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa949260>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcc7dd0; to 'JaxprTracer' at 0x7ffbe0f34450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb8fd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006207162257999093
Epoch 69 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024019453828929293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512970>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbbed3f0; to 'JaxprTracer' at 0x7ffbbbbee1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x726785c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006994915487945686
69, epoch_train_loss=0.23796124521710757
Epoch 70
Epoch 70 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02150752917462402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02150753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ef00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba87c2cf0; to 'JaxprTracer' at 0x7ffba87c27a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30038a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011054979082398041
Epoch 70 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018183910188311832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01818391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d3cf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c702e30; to 'JaxprTracer' at 0x7ffd3c703240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11d54600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009220382283263343
Epoch 70 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010296767368083735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01029677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb84e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c5283b0; to 'JaxprTracer' at 0x7ffc6c52bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ee25e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.00339181820834448
Epoch 70 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010142190620805779, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01014219, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000a7a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1806430; to 'JaxprTracer' at 0x7ffbe1806070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25250aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008372559668681202
Epoch 70 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017390502080753246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0173905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93059b60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c7ddf0; to 'JaxprTracer' at 0x7ffbe1c7eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48080f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009268922043763428
Epoch 70 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022686308578306995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02268631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e0a80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c31ccc0; to 'JaxprTracer' at 0x7ffbb9195d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d72a3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011512019620261587
Epoch 70 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021966887810145868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02196689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a610>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc884770; to 'JaxprTracer' at 0x7ffbbc884540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b923d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.010635153232484285
Epoch 70 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023149473529793463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02314947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c738ae0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8dc0cc0; to 'JaxprTracer' at 0x7ffba8dc3470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ce3710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010899540615693707
Epoch 70 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02105489300951564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02105489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e09da0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab727fb0; to 'JaxprTracer' at 0x7ffbab724180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6910b6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0012496281898502657
Epoch 70 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022640693964040587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02264069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb933494e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1e6ff10; to 'JaxprTracer' at 0x7ffbe1e6d5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x510f89f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.0090416393060632
Epoch 70 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016543600305532483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0165436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ef170>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e662a0; to 'JaxprTracer' at 0x7ffb93e67240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d017e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008309556080996993
Epoch 70 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021465980242882654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146598, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457c620>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c4bd760; to 'JaxprTracer' at 0x7ffe2c4bdc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44154d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007832208415363811
Epoch 70 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.020968076124451587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02096808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6abe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc5359e0; to 'JaxprTracer' at 0x7ffbe09d0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4332bbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008897658155797312
Epoch 70 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025819761412445283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02581976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a04c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e8f7e0; to 'JaxprTracer' at 0x7ffbb9e8e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b18c200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011370018077631014
Epoch 70 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021896370558854295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02189637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e3e40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7a41d0; to 'JaxprTracer' at 0x7ffd3c115850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6981a610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009193327632811473
Epoch 70 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02174166269437376, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02174166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73b9a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9aa1b0; to 'JaxprTracer' at 0x7ffbaa9a85e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58dd9380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008851558750395512
Epoch 70 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.023179588336203285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02317959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c41a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa077920; to 'JaxprTracer' at 0x7ffd5c2a0bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x586bdd70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.00677920195685854
Epoch 70 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022117762627308336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211776, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c310380>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc670220; to 'JaxprTracer' at 0x7ffdbc673e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5207f180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008492064416340286
Epoch 70 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02510370425617778, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0251037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795c00>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b894e0; to 'JaxprTracer' at 0x7ffbe0b8a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x661314d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.009961173346843348
Epoch 70 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016660647890823343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01666065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f51e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd98e750; to 'JaxprTracer' at 0x7ffbbd98d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56f2f700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007004288116711319
Epoch 70 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023011795024000817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fca00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe091e700; to 'JaxprTracer' at 0x7ffbe091c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b9d37c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011866603429081132
Epoch 70 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.025767204586113496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0257672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6f30>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc34c7c0; to 'JaxprTracer' at 0x7ffdbc34cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83a5c9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01167515406103259
Epoch 70 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024569720041276392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02456972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0ec0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c422070; to 'JaxprTracer' at 0x7ffe3c4211c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84943b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.007686060652393314
Epoch 70 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02485653212316249, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02485653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac7fe0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c282a70; to 'JaxprTracer' at 0x7ffd9c281580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dbd7940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010646675340860803
Epoch 70 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024011042487735657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02401104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc81b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9363330; to 'JaxprTracer' at 0x7ffbb93615d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d3b50a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.0051996695794935014
Epoch 70 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02226320707708082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02226321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ae60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba4f1030; to 'JaxprTracer' at 0x7ffd7411d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67799d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.00613536352947932
Epoch 70 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.02494905915737544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02494906, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefdd10>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe19a32e0; to 'JaxprTracer' at 0x7ffbe250eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x417dea70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006776562081459483
70, epoch_train_loss=0.2313237858743533
Epoch 71
Epoch 71 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021654177173956516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02165418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6d40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab7fef20; to 'JaxprTracer' at 0x7ffbab7fcb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54535460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010724785174147928
Epoch 71 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.017984606642170314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01798461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf18ea0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe06c8040; to 'JaxprTracer' at 0x7ffbe06cb2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x611ab830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009240512227829942
Epoch 71 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010230327969243986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01023033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd778670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8596200; to 'JaxprTracer' at 0x7ffba8594220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66d28920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0029595913032368663
Epoch 71 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010267711691567214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01026771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5150>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4255490; to 'JaxprTracer' at 0x7ffdf4256160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd41eb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008476500454579039
Epoch 71 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017956770579907293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01795677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311080>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c2a3880; to 'JaxprTracer' at 0x7ffd5c2a1e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83589550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009441369035162395
Epoch 71 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.022580032564279567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02258003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052f2c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e27650; to 'JaxprTracer' at 0x7ffbab7b60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e4c2940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011343931656140682
Epoch 71 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.021049505435404636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02104951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bc770>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c046f70; to 'JaxprTracer' at 0x7ffd3c044360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22488e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01067555261315794
Epoch 71 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022321367179231284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24140>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e2f380; to 'JaxprTracer' at 0x7ffbb8e2d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x749bc7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.010733367252542892
Epoch 71 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021469737074214224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02146974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bd2f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c207c0; to 'JaxprTracer' at 0x7ffbbd128b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x133042e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0015206923164177157
Epoch 71 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022451398329432982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0224514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc656420>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0740ef0; to 'JaxprTracer' at 0x7ffbe0740090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64a8bdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009067556405236458
Epoch 71 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.016711104580859604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0167111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ae670>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74568d10; to 'JaxprTracer' at 0x7ffd7456a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ee95bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008430246716021174
Epoch 71 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02194878397644407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b48b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe20ac090; to 'JaxprTracer' at 0x7ffbe20ae5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b5ff5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007907883295156827
Epoch 71 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02119149419612963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466e390>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa07c40; to 'JaxprTracer' at 0x7ffbbc8861b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60385e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.008904862478281426
Epoch 71 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025542732206558547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02554273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c5040d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e8e50; to 'JaxprTracer' at 0x7ffd9c1105e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aabfa10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011321615367740654
Epoch 71 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021492940179081658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02149294, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c738e10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf47525c0; to 'JaxprTracer' at 0x7ffdf47509a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aa6c750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009278455893798858
Epoch 71 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021280835951286492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02128084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24480>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbafc5fd0; to 'JaxprTracer' at 0x7ffbbafc4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2eeb4a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.008874656120123964
Epoch 71 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022605328587202655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02260533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058100>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc883100; to 'JaxprTracer' at 0x7ffbbc880540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72a30aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.006698937400441258
Epoch 71 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022274188277243635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02227419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69460>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c3a6b10; to 'JaxprTracer' at 0x7ffd5c3a5530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bc94860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00851975680058588
Epoch 71 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025648932544187927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02564893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc4c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0dcd530; to 'JaxprTracer' at 0x7ffbe0dcf920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x328a1cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.0101931762917017
Epoch 71 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016524445036167738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01652445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e8c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1804900; to 'JaxprTracer' at 0x7ffbe1804400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x834e9740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006571843935026881
Epoch 71 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.022116254466052962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02211625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57dd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe13f8ae0; to 'JaxprTracer' at 0x7ffbe13f9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3645fc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011178850793047914
Epoch 71 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.026171817089034998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02617182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa949a20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb6c1452b0; to 'JaxprTracer' at 0x7ffbe22e7010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x579ab9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.011806538561104099
Epoch 71 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024419939405628956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d3b80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15b8360; to 'JaxprTracer' at 0x7ffbe15bb150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d19d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.00779641215501199
Epoch 71 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.024339567414565492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02433957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c6980>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe04ca020; to 'JaxprTracer' at 0x7ffbba9b62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88a12fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010726033484209587
Epoch 71 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023636031912221415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e097f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c321170; to 'JaxprTracer' at 0x7ffd3c3208b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5faa9290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005129540637421879
Epoch 71 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.022136354219779046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02213635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d220>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc4c13a0; to 'JaxprTracer' at 0x7ffdbc4c3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f85230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006120359398705715
Epoch 71 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024947531138884177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02494753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0cb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabaf0ae0; to 'JaxprTracer' at 0x7ffbabaf0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a66b1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006800333850078007
71, epoch_train_loss=0.23044336161690968
Epoch 72
Epoch 72 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02152473072701867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02152473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacca070>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0cfd2b0; to 'JaxprTracer' at 0x7ffbe0cff290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72caa180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.010858131157719294
Epoch 72 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.018710066191768036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01871007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b2b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c0bc5e0; to 'JaxprTracer' at 0x7ffbaa68bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a7c2ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.00910125246295175
Epoch 72 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010505058367192649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01050506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f980>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe071a020; to 'JaxprTracer' at 0x7ffbe0719f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fd571e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003960988660856645
Epoch 72 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01613067261317225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01613067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496bc20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c7dda0; to 'JaxprTracer' at 0x7ffbe1c7c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x446920d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.013779171035016158
Epoch 72 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.026170543884875316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02617054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe9f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1838540; to 'JaxprTracer' at 0x7ffbaac6e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3970cf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.015974061168814408
Epoch 72 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.03134183507375672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03134184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2f50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbd5f100; to 'JaxprTracer' at 0x7ffbbbd5d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x489fc8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01610132118048821
Epoch 72 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.028142173465572913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02814217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a0d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe270ea70; to 'JaxprTracer' at 0x7ffbe270ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52be29f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.015344807343284509
Epoch 72 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02727631816559823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02727632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c739570>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c763ab0; to 'JaxprTracer' at 0x7ffd3c762bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7073b070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.014369802992865513
Epoch 72 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.023887850627969553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02388785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff130>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c129d00; to 'JaxprTracer' at 0x7ffc6c129bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22663160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0064689164199427706
Epoch 72 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02306120417624251, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0230612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf4099fd0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c211260; to 'JaxprTracer' at 0x7ffe3c211580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48fc4b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.013681991317633643
Epoch 72 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017591955531011522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01759196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e02f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f54860; to 'JaxprTracer' at 0x7ffbbe3075b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e9cb670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.012514643748983024
Epoch 72 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02017344182417115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02017344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07e2a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c0b20c0; to 'JaxprTracer' at 0x7ffd3c0b1940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47e4b220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.011520619228437487
Epoch 72 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.01849039717740941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0184904, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa57930>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4488310; to 'JaxprTracer' at 0x7ffdf448a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53054560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.012528388083533891
Epoch 72 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0231802667572401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02318027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc890>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c74e00; to 'JaxprTracer' at 0x7ffbe1c762f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b1c3610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012542468803528382
Epoch 72 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.018978806228177058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01897881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a2580>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1f2df80; to 'JaxprTracer' at 0x7ffbe1f2ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c48dfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.012508299418561443
Epoch 72 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.018831888942975356, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01883189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73b000>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c115760; to 'JaxprTracer' at 0x7ffbabaa41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x719374c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.01234421897445324
Epoch 72 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.019981656548231284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01998166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052cd60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96b7740; to 'JaxprTracer' at 0x7ffb93e268e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x511dd6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.01034329590847507
Epoch 72 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020317281873760328, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02031728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7480>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90b3c40; to 'JaxprTracer' at 0x7ffba90b0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b8286a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.011860824380937255
Epoch 72 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024343080115368308, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02434308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466ce00>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf40906d0; to 'JaxprTracer' at 0x7ffdf4092e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x152b7320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011191344768205026
Epoch 72 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016468192834617677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01646819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ff400>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96a82c0; to 'JaxprTracer' at 0x7ffbb96aa7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x567de0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.009677336173409738
Epoch 72 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0262087030735266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0262087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b6890>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c4d7060; to 'JaxprTracer' at 0x7ffd3c4d6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x340a6d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.014167557866028425
Epoch 72 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.028825422122820365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02882542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930ae870>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c91210; to 'JaxprTracer' at 0x7ffbe1c927f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26137de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012853467712924588
Epoch 72 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.024808994396601277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02480899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf19fb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc754f40; to 'JaxprTracer' at 0x7ffbe276eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d18fca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.009328799196619506
Epoch 72 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.026942771325026454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02694277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0b20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8e0d10; to 'JaxprTracer' at 0x7ffbbc8e3060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b4f4f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.012006968489918906
Epoch 72 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.019913741199902035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01991374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac6920>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdd124d0; to 'JaxprTracer' at 0x7ffbbdd11cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a508d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.009476709075058199
Epoch 72 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020157272271088655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02015727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bf1a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb910a110; to 'JaxprTracer' at 0x7ffbe118b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x603ae5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.008571566814600183
Epoch 72 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023954454355757736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02395445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba794170>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbbc5350; to 'JaxprTracer' at 0x7ffbe0b06bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e6e4b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.008422193215693784
72, epoch_train_loss=0.311499145598941
Epoch 73
Epoch 73 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.018444221723615827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01844422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd45031d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf412fbf0; to 'JaxprTracer' at 0x7ffdf412e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c9c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01754166663315961
Epoch 73 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.021423198506379238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0214232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67c930>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb932d710; to 'JaxprTracer' at 0x7ffdd413f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x514a1ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.012770750622535356
Epoch 73 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009286389236900158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00928639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc656490>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92ddac00; to 'JaxprTracer' at 0x7ffb92ddb740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fcaeb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.002835774202298353
Epoch 73 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.010132532183363603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01013253, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e870>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1cc7f60; to 'JaxprTracer' at 0x7ffbe1cc63e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45069e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008100811494481882
Epoch 73 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.017723654459096048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01772365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f7c20>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf4329300; to 'JaxprTracer' at 0x7ffdf432af70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77fc1940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00993645676238244
Epoch 73 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024887416608766613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02488742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7c00>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba95d5850; to 'JaxprTracer' at 0x7ffba95d5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f013f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.013134119426509848
Epoch 73 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.025307745280173613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02530775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c4f30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2079d00; to 'JaxprTracer' at 0x7ffbe207a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x721870e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.013807223929853936
Epoch 73 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022912171547741018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02291217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebb160>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa410400; to 'JaxprTracer' at 0x7ffbaa4122f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x249cc740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012848920374533368
Epoch 73 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.021147659237821605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02114766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2f80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa947c90; to 'JaxprTracer' at 0x7ffbaa944f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c79cbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.004357630083673244
Epoch 73 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.022138099608230637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0221381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948ae0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93d8d210; to 'JaxprTracer' at 0x7ffb93d8d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf3bfe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009099753433086664
Epoch 73 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017171599705568277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0171716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab510d70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7d0cc0; to 'JaxprTracer' at 0x7ffd3c7d2b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80c9b120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008157923716658728
Epoch 73 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022106520261108906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02210652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654d90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbcbfde90; to 'JaxprTracer' at 0x7ffbbcbfe2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x415b03b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.007979940503306429
Epoch 73 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02160130377577095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0216013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b4ff0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe214d260; to 'JaxprTracer' at 0x7ffbe214ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67428d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009507604290719755
Epoch 73 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.027470457658165442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02747046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466e7e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba8b28a90; to 'JaxprTracer' at 0x7ffc6c333970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51fce310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012129597216343017
Epoch 73 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023665826672316183, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02366583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052ef70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1e9ee0; to 'JaxprTracer' at 0x7ffbbd1e9c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x518459b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009970948139329049
Epoch 73 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021991114566065256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02199111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8d40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcc5d00; to 'JaxprTracer' at 0x7ffbbdcc4540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b0cc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009389689460888757
Epoch 73 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022292127132720416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02229213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6be460>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9307b7e0; to 'JaxprTracer' at 0x7ffb9307b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x308d6770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007750153090306541
Epoch 73 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02148300828599995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02148301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe27320>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1838a90; to 'JaxprTracer' at 0x7ffbe1838c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4780f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009254615867337529
Epoch 73 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024962053915322344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02496205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305a210>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe252e7a0; to 'JaxprTracer' at 0x7ffbe252eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ab52bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010415312153861121
Epoch 73 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016623706810507954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01662371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc600>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0dcd350; to 'JaxprTracer' at 0x7ffbe0dcc2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73874820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.006653628862491864
Epoch 73 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02363685035590142, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000aaf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93bdade0; to 'JaxprTracer' at 0x7ffb93bdb420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x514c9670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011758476051529488
Epoch 73 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.027363785571044533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02736379, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938efd60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c4b0220; to 'JaxprTracer' at 0x7ffd5c4b2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d643be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012075358349890424
Epoch 73 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025833713208832168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02583371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07f5e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb02dd50; to 'JaxprTracer' at 0x7ffbbb02cae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4adff030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008366839813358222
Epoch 73 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02441820564295709, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02441821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795e10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa8e8c70; to 'JaxprTracer' at 0x7ffd3c323c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48ec1650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011280958693063487
Epoch 73 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023581316887132595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02358132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93349750>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa0fa2a0; to 'JaxprTracer' at 0x7ffbaa0f8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8577f490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006460093422492023
Epoch 73 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021227254065379574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02122725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc677ae0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa12fc0; to 'JaxprTracer' at 0x7ffbdfa12660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7179ae00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.007376939441223276
Epoch 73 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024229444473695395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02422944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff820>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c2b76f0; to 'JaxprTracer' at 0x7ffc6c2b7560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47fd5180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007574492513465217
73, epoch_train_loss=0.2605356785487796
Epoch 74
Epoch 74 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021196183308523894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02119618, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bfff0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9656d40; to 'JaxprTracer' at 0x7ffbb96549f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71bc33e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011247420830451675
Epoch 74 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01708537216437913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01708537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a690a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c52d620; to 'JaxprTracer' at 0x7ffd9c52fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a4bb890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010070201956179286
Epoch 74 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0096834747442784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00968347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2251d60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74688cc0; to 'JaxprTracer' at 0x7ffd7468b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35ff28d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0025316770745647797
Epoch 74 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009657509594354621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00965751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa55a20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0284950; to 'JaxprTracer' at 0x7ffbe0286070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f5be30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008731642764447572
Epoch 74 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.01774310605857384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01774311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305b130>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcd22a0; to 'JaxprTracer' at 0x7ffbbdcd2610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28541c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009806226155916854
Epoch 74 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023745036677672807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02374504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4501b80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2761530; to 'JaxprTracer' at 0x7ffbe27607c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x638c0d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.012019376956534822
Epoch 74 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022074141618937723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02207414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a8d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbaa05df0; to 'JaxprTracer' at 0x7ffbbaa04310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f627d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01116882395323895
Epoch 74 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02326005965874812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02326006, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd7793c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c520e00; to 'JaxprTracer' at 0x7ffd3c520ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57e33380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011894240394762265
Epoch 74 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.02033177432960276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02033177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cacb0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c300b80; to 'JaxprTracer' at 0x7ffd3c302a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x323c9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0035892271430716634
Epoch 74 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02368227184582081, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02368227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e420>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb89b4c0; to 'JaxprTracer' at 0x7ffd9c4bade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70691ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009776441870494718
Epoch 74 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017183355332099748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01718336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d39d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92dc5ee0; to 'JaxprTracer' at 0x7ffb92dc7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a9c5710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008795978040797917
Epoch 74 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021586882439181047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02158688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e27f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa946930; to 'JaxprTracer' at 0x7ffbaa9442c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50bcdb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008191844274144044
Epoch 74 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02137028539060443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02137029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0009990>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd427cea0; to 'JaxprTracer' at 0x7ffdd427d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cc00710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009269073160381117
Epoch 74 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02649223770402694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02649224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a0290>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8d1170; to 'JaxprTracer' at 0x7ffbbc8d0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45cbb540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012492973557889303
Epoch 74 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02233556148954624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02233556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4500160>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc8d7d30; to 'JaxprTracer' at 0x7ffbbc8d4400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69f493a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009915259490480324
Epoch 74 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.021383830180893116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02138383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a260>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb00c720; to 'JaxprTracer' at 0x7ffbbb00c040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bab4160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009334192043512473
Epoch 74 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02208673083222538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4da00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92e137e0; to 'JaxprTracer' at 0x7ffb92e127f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4071740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0070735619123808565
Epoch 74 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.022236247576368703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02223625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4720>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbbafe70; to 'JaxprTracer' at 0x7ffbbbbace50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a73f410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.009010803055103506
Epoch 74 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.024961416701581314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02496142, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c312580>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe05369d0; to 'JaxprTracer' at 0x7ffbe0536d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50a23340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.010460075895549013
Epoch 74 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017025696426977693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0170257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ffbd0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdff1c10; to 'JaxprTracer' at 0x7ffbbdff08b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ffc19c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007023073261085292
Epoch 74 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02341301327109505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02341301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30db60>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb89fbf0; to 'JaxprTracer' at 0x7ffbbb89eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf40c780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011674889226882168
Epoch 74 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02626545242677977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02626545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1ba50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0b2bfb0; to 'JaxprTracer' at 0x7ffbe0b2b5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11673860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012129817372592189
Epoch 74 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.023918034726148736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02391803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654d10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb932eb10; to 'JaxprTracer' at 0x7ffbb932f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56335f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008089935688426763
Epoch 74 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.023721290231280414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb28f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f70630; to 'JaxprTracer' at 0x7ffbe0f707c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e1eaa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010835229269309498
Epoch 74 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02232134510075723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02232135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c5077e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd4712f70; to 'JaxprTracer' at 0x7ffdd47122a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48eef0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.006032624318290273
Epoch 74 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.020982430669669715, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02098243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa948050>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbbbc8f90; to 'JaxprTracer' at 0x7ffbaaf4dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf2f8130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006740027871526165
Epoch 74 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024622053478949392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02462205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ef890>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c060900; to 'JaxprTracer' at 0x7ffbbdd12c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c434cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.006977301519044787
74, epoch_train_loss=0.24488193905705827
Epoch 75
Epoch 75 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022349953799772053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02234995, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a060>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2149300; to 'JaxprTracer' at 0x7ffbe21481d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2325dd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01081380088107292
Epoch 75 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01817548905448336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01817549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa3c55d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf44b8450; to 'JaxprTracer' at 0x7ffdf44ba7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3baaca10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009865285080234147
Epoch 75 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009395786846413552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00939579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94bb60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe28a7a0; to 'JaxprTracer' at 0x7ffbbe28ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x732fa9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.00294205845326087
Epoch 75 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.00987556433207367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00987556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aef40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92d6b0b0; to 'JaxprTracer' at 0x7ffb92d69760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a44f4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008942941706430466
Epoch 75 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018188774268095863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01818877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f6c10>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c55aac0; to 'JaxprTracer' at 0x7ffd3c55a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xee76b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009807847574899815
Epoch 75 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.023852678341148518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02385268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d700>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93904770; to 'JaxprTracer' at 0x7ffb939058a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x378cb4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01196610182103664
Epoch 75 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.022360540098533475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02236054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb99e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c209a0; to 'JaxprTracer' at 0x7ffbabae3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40991cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011411865988489915
Epoch 75 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.022535858675038697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb8fa0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd129fd0; to 'JaxprTracer' at 0x7ffd9c319210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x586cc6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011430736006816239
Epoch 75 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020405221188800993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02040522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff900>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6e91c0; to 'JaxprTracer' at 0x7ffc6c6e8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd09c650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0032059130921241233
Epoch 75 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02252538121785482, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02252538, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334b830>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa3affb0; to 'JaxprTracer' at 0x7ffbaa3ad990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aaab10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009506931474573042
Epoch 75 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017307750002973674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01730775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24770>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa1398a0; to 'JaxprTracer' at 0x7ffbaa13bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77289300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009027467441121421
Epoch 75 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.022533838332815102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02253384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab511ac0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb058810; to 'JaxprTracer' at 0x7ffba8551a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29cd1710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.0084521606712861
Epoch 75 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02167573547589721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02167574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930af500>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe26da520; to 'JaxprTracer' at 0x7ffbe26d9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x733b9c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009176222465432666
Epoch 75 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.025246138936851837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02524614, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f4e80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e463e0; to 'JaxprTracer' at 0x7ffbb8e46390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d388480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012497333361351375
Epoch 75 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021293059959942875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02129306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba795390>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c3326b0; to 'JaxprTracer' at 0x7ffc6c332700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x356c16b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009862158151801486
Epoch 75 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020433148249748928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02043315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c5000>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c523c90; to 'JaxprTracer' at 0x7ffbe2761e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x472bda10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00948049056760286
Epoch 75 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.021608735201211222, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02160874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73ad00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd1527a0; to 'JaxprTracer' at 0x7ffbbd153290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e485170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007300140390668647
Epoch 75 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021531185025518814, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02153119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a1920>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c7fec0; to 'JaxprTracer' at 0x7ffbe1c7c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72bde5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00878625912016103
Epoch 75 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025801727080504277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02580173, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb93058420>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc5622f0; to 'JaxprTracer' at 0x7ffdbc563010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60dbda00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.0107957203263553
Epoch 75 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.01764206202741649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01764206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afe0b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb91973d0; to 'JaxprTracer' at 0x7ffbb9196480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ce2ac30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007132973004301655
Epoch 75 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02506262475425571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02506262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa55bc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c67d8a0; to 'JaxprTracer' at 0x7ffc6c67f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6088de20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.012072106601966365
Epoch 75 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.028902119810833283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02890212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d3f40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93ba1170; to 'JaxprTracer' at 0x7ffb93ba0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7700a650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012495959743017537
Epoch 75 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02663348878146188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02663349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a69410>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c0bf380; to 'JaxprTracer' at 0x7ffd9c0bff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32b32920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008316338821834812
Epoch 75 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02504526606055725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02504527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938eec10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c08aed0; to 'JaxprTracer' at 0x7ffe2c0898f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3636c640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.010999999311937922
Epoch 75 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.023291779302040707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02329178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b5200>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c701ad0; to 'JaxprTracer' at 0x7ffd3c702bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40dbcf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005930933897116738
Epoch 75 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02057894553851459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02057895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba07ee90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe250dee0; to 'JaxprTracer' at 0x7ffbe250ff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bb28070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006921644334812206
Epoch 75 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023248780330566335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02324878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67fb30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabb967f0; to 'JaxprTracer' at 0x7ffbabb96930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x130d5010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007265471795311755
75, epoch_train_loss=0.2464068620850181
Epoch 76
Epoch 76 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02041323737279591, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02041324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c311c90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd74339620; to 'JaxprTracer' at 0x7ffd74339bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd7b8f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.01112016383451634
Epoch 76 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016608532061399412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01660853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e700>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba98f6480; to 'JaxprTracer' at 0x7ffba98f6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71395250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010087786423736438
Epoch 76 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009518439711392953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00951844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e3e20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe336390; to 'JaxprTracer' at 0x7ffbbe334130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fca4660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.002848294384158136
Epoch 76 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.00973458666972472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00973459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe000b740>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc6c9990; to 'JaxprTracer' at 0x7ffdbc6c8900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x658dcc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.009297716834359114
Epoch 76 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019360378835929462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01936038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c73a5f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbabbfa1b0; to 'JaxprTracer' at 0x7ffbabbfb5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x898d90d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.010081222955459906
Epoch 76 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.02553640056384882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0255364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb0380>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c555fd0; to 'JaxprTracer' at 0x7ffc6c5572e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f014b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011782446965371406
Epoch 76 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023632144575560975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02363214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd779790>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe214c8b0; to 'JaxprTracer' at 0x7ffbe214d8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ad2230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.011566365484598719
Epoch 76 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.02372948450121751, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02372948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ad20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7638d0; to 'JaxprTracer' at 0x7ffd3c760ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cb926d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011430574731990556
Epoch 76 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.020910956759781177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02091096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec1c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c303d80; to 'JaxprTracer' at 0x7ffd3c302890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72e403c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002905418562585337
Epoch 76 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.021387525331736896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02138753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466f010>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0f8c720; to 'JaxprTracer' at 0x7ffbe075bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31dea1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009627794014891715
Epoch 76 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.01638007613386027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01638008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdd4501f70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c6bdd0; to 'JaxprTracer' at 0x7ffbb9c6b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ed89f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.009043617163935869
Epoch 76 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.021653538083778016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02165354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7fff1496b770>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6e99e0; to 'JaxprTracer' at 0x7ffc6c6e8090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45556450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008472823695990464
Epoch 76 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.021943319864645698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305bc20>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd427d580; to 'JaxprTracer' at 0x7ffdd427f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x450e7970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009277432979576863
Epoch 76 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.027478267767260235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02747827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c4c4c90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaaf4ca40; to 'JaxprTracer' at 0x7ffbaaf4e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5192e560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011982046753585418
Epoch 76 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.023508705198518495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02350871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac51d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdf451b100; to 'JaxprTracer' at 0x7ffbba9b7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x248dd040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009849872239319279
Epoch 76 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.022469955269365065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02246996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe052d3c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbe259ad0; to 'JaxprTracer' at 0x7ffbbe258f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8968f2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.00927453465674532
Epoch 76 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.022750467504088507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02275047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f6950>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d0bd0; to 'JaxprTracer' at 0x7ffbb96d3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x506c4580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.0071742277656618135
Epoch 76 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.02214204269640255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02214204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe3c2f5720>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa9abb00; to 'JaxprTracer' at 0x7ffbaa9a8270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c2f63c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008912649476024166
Epoch 76 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.025217782774172172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02521778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4ff990>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c1da8e0; to 'JaxprTracer' at 0x7ffd5c1dbfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbef4b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01038888348054501
Epoch 76 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016489417541412237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01648942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930aefd0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe0535620; to 'JaxprTracer' at 0x7ffbe0537560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45c1b960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.0068808789338398665
Epoch 76 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.023618257899123703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02361826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf185d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc673790; to 'JaxprTracer' at 0x7ffdbc671cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45cd4930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.011517895475310107
Epoch 76 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02671411262836504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02671411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab512c60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c24c720; to 'JaxprTracer' at 0x7ffd5c24d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13616320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.01198464162779022
Epoch 76 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02499237902154761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02499238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe24df0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb89cea0; to 'JaxprTracer' at 0x7ffbbb89d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3677bf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008037776725057766
Epoch 76 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.02529573339632286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02529573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67d860>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb932ef70; to 'JaxprTracer' at 0x7ffbb932d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x511cb770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011011109068611453
Epoch 76 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.02314169855867663, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0231417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9334af30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c1e1ee0; to 'JaxprTracer' at 0x7ffe3c1e3470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5183f860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005651491740735222
Epoch 76 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021401441888026278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02140144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaeff470>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9397f600; to 'JaxprTracer' at 0x7ffb9397dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x253a0a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006689907332125739
Epoch 76 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024364753817465293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02436475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2cba00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaac63240; to 'JaxprTracer' at 0x7ffbaac63c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c349ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007128027834554209
76, epoch_train_loss=0.24402560114107644
Epoch 77
Epoch 77 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021490393726556062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02149039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b69e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdd468bd30; to 'JaxprTracer' at 0x7ffbbb583b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61e25fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011080656585462154
Epoch 77 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.01823514453605175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01823514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd3c4d3b40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe26b8cc0; to 'JaxprTracer' at 0x7ffbe26b92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27158890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009483118072436946
Epoch 77 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.009838300222286052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0098383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbbe25950>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfdae840; to 'JaxprTracer' at 0x7ffbdfdac720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60769e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003495364777954927
Epoch 77 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009640037062667795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00964004, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fc1b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb92e12610; to 'JaxprTracer' at 0x7ffb92e11170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fcfc940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.008692099144490853
Epoch 77 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.019106118290716956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01910612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4dac0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96d3560; to 'JaxprTracer' at 0x7ffbb96d0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71034d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009619220669753044
Epoch 77 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.025654896421135262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0256549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c313c10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93907bf0; to 'JaxprTracer' at 0x7ffb93905f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8534ad40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.01190644553486785
Epoch 77 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.02471472778906762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02471473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77b610>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa413ba0; to 'JaxprTracer' at 0x7ffbaa4122f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2835bc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.012209452177664592
Epoch 77 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.024199373825701292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02419937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9eb9d40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb996cef0; to 'JaxprTracer' at 0x7ffbb996d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a0e42f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.011562572520045802
Epoch 77 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.019334222452332572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01933422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94aba0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbaa410c20; to 'JaxprTracer' at 0x7ffe2c4bf470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56e0dd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.002949079749584093
Epoch 77 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.023385528243556896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02338553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7958a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c68360; to 'JaxprTracer' at 0x7ffbbc8e37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3337b380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.009314033241034235
Epoch 77 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.017747505853062978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01774751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7be870>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c367f0; to 'JaxprTracer' at 0x7ffbbb899490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ff3770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008753092840476233
Epoch 77 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.023700238462398146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02370024, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654850>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe3c210ae0; to 'JaxprTracer' at 0x7ffe3c211580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31911550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008379774684255041
Epoch 77 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.023321904588745068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0233219, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd9c4fc710>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdcb8c20; to 'JaxprTracer' at 0x7ffbaa9a8810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x432c80f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009071750797997238
Epoch 77 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.02687180099437736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0268718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f54b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1a4dfd0; to 'JaxprTracer' at 0x7ffbe1a4c2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83210720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.011855035913693163
Epoch 77 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.02208048493375908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02208048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbacc8b70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e448b0; to 'JaxprTracer' at 0x7ffbb8e45f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cff7480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.009431586286034408
Epoch 77 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.020485414823733658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02048541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb9ebb480>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e0c310; to 'JaxprTracer' at 0x7ffbb8e0e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a5cb630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009155490018068008
Epoch 77 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02070189829723463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0207019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb2240>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93079620; to 'JaxprTracer' at 0x7ffb93078f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3197e670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007271867920574381
Epoch 77 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.020744029679105776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02074403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466f400>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd152020; to 'JaxprTracer' at 0x7ffbbd152980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x500b7cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.00865792261055292
Epoch 77 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02410209799533292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0241021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9305a640>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe15cc540; to 'JaxprTracer' at 0x7ffbe15ceca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82b68d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.01052318051468816
Epoch 77 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.016590054796070862, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01659005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb96a37e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd9c113fb0; to 'JaxprTracer' at 0x7ffdbc6ca480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43a03500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.0070489981968009235
Epoch 77 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.025430430455519737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02543043, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0008280>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe2063830; to 'JaxprTracer' at 0x7ffbe2061df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x524163c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.01243761005408391
Epoch 77 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.02812357884465656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02812358, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92afc7f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb96567a0; to 'JaxprTracer' at 0x7ffbb96553f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27018240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012312560018250611
Epoch 77 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.025540382838462862, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02554038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf46e24b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93ba3e70; to 'JaxprTracer' at 0x7ffd5c5bb790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5939d620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008347881552778007
Epoch 77 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.026022422086826747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02602242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c505610>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe06e0e00; to 'JaxprTracer' at 0x7ffbe06e1c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75426380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011250023162207733
Epoch 77 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.022973989795500707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02297399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f9710>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe250d620; to 'JaxprTracer' at 0x7ffbab7d76f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c7b4b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.0053136940511604456
Epoch 77 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.02113579225501381, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02113579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb938ec540>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb938f6c00; to 'JaxprTracer' at 0x7ffb938f4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36407c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006238527775051669
Epoch 77 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.024204148172188637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02420415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb8e08be0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93b8d620; to 'JaxprTracer' at 0x7ffbb99764d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4102ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007227115709706769
77, epoch_train_loss=0.24358815457967417
Epoch 78
Epoch 78 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.021128068444466568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02112807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c507900>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe1c33600; to 'JaxprTracer' at 0x7ffbe1a02480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xba77570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.011340897893664114
Epoch 78 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.016963975630746943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01696398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab5125b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbdfa77920; to 'JaxprTracer' at 0x7ffbdfa77d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37e77540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.009382825960296439
Epoch 78 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01041105609032126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01041106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7466dbe0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbc0fc2c0; to 'JaxprTracer' at 0x7ffbbc0fcae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x363e0c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.003581797516907513
Epoch 78 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.009807403879620915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0098074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa569b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c36e0c0; to 'JaxprTracer' at 0x7ffd5c36e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49f72cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.00841763243711604
Epoch 78 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018740250284684595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01874025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdf409a1c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbda26e30; to 'JaxprTracer' at 0x7ffbbda24680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6050abc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.00947524069387611
Epoch 78 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024449879450507077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02444988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930b78b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb8e47d80; to 'JaxprTracer' at 0x7ffbaa077f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c16eb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.011788379279248242
Epoch 78 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.024150251917202593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02415025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe22519c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbb832700; to 'JaxprTracer' at 0x7ffbbb833560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b3cb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01180766902354736
Epoch 78 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023767880196352644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02376788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe2253be0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c760b30; to 'JaxprTracer' at 0x7ffd3c761800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12b513d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.01142897213346358
Epoch 78 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.022158748047033824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02215875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffba8a6a640>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab46e610; to 'JaxprTracer' at 0x7ffbab46f880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61ff0ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4776,) mean=-0.021212925548649127
Batch Loss = 0.0031410677902711163
Epoch 78 :: Batch 10/27
eC.__call__, rho shape: (9848, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.02296979445454119, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02296979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0ac5a60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c5661b0; to 'JaxprTracer' at 0x7ffd3c566930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37a94a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9848,) mean=-0.022895487217695708
Batch Loss = 0.00958289372015374
Epoch 78 :: Batch 11/27
eC.__call__, rho shape: (9752, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.015765300903160365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0157653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa6bf980>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9c6b3d0; to 'JaxprTracer' at 0x7ffbb9c6b2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x119eb8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9752,) mean=-0.017431270102575093
Batch Loss = 0.008781507948051092
Epoch 78 :: Batch 12/27
eC.__call__, rho shape: (12256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.02089882308697236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02089882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab4f8480>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc6c6e9620; to 'JaxprTracer' at 0x7ffc6c6eaed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b83dcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12256,) mean=-0.02289021496356384
Batch Loss = 0.008476622524053496
Epoch 78 :: Batch 13/27
eC.__call__, rho shape: (14920, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.02030474477561528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02030474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbdfa566a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd747098f0; to 'JaxprTracer' at 0x7ffd747091c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11f6b0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(14920,) mean=-0.022767543105730717
Batch Loss = 0.009412035072036464
Epoch 78 :: Batch 14/27
eC.__call__, rho shape: (12208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.024327313024259074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02432731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe1cb19b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbd791350; to 'JaxprTracer' at 0x7ffbbd793b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42c490c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12208,) mean=-0.025314169032237918
Batch Loss = 0.012167622499873031
Epoch 78 :: Batch 15/27
eC.__call__, rho shape: (9824, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.021426767634039886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02142677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67fa60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb939322a0; to 'JaxprTracer' at 0x7ffe3c355c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53050310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9824,) mean=-0.022761249105293348
Batch Loss = 0.00980852515763552
Epoch 78 :: Batch 16/27
eC.__call__, rho shape: (9912, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.02070578135299437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02070578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe2c3103c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffdbc535ad0; to 'JaxprTracer' at 0x7ffdbc5369d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8582e110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9912,) mean=-0.02217858315761728
Batch Loss = 0.009376538785159202
Epoch 78 :: Batch 17/27
eC.__call__, rho shape: (15208, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.02130565537920931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02130566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbba7f7da0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba9331f80; to 'JaxprTracer' at 0x7ffba9330310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c304630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15208,) mean=-0.022890250718588575
Batch Loss = 0.007142586377958504
Epoch 78 :: Batch 18/27
eC.__call__, rho shape: (10040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.021646972813205066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02164697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbe0f4ce80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c2a0b30; to 'JaxprTracer' at 0x7ffe2c2a1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8119f5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(10040,) mean=-0.021913289279012104
Batch Loss = 0.008653860834837185
Epoch 78 :: Batch 19/27
eC.__call__, rho shape: (8552, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.02463806863641153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02463807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30e680>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab235bc0; to 'JaxprTracer' at 0x7ffbbb00da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x177e2040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(8552,) mean=-0.02384525418198295
Batch Loss = 0.011034533690808814
Epoch 78 :: Batch 20/27
eC.__call__, rho shape: (6936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.017044680975839034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01704468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb930af990>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc8dc10; to 'JaxprTracer' at 0x7ffbbdc8d5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52d25490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6936,) mean=-0.01669243903670594
Batch Loss = 0.007369102574919944
Epoch 78 :: Batch 21/27
eC.__call__, rho shape: (11536, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02584158245051361, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02584158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbcf1be90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93e26cf0; to 'JaxprTracer' at 0x7ffb93e25f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x554fde60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(11536,) mean=-0.01999224998108264
Batch Loss = 0.013278455320914078
Epoch 78 :: Batch 22/27
eC.__call__, rho shape: (24512, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.028674873750072334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02867487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbab7bc4e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffba90b1ee0; to 'JaxprTracer' at 0x7ffb930407c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d1261b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(24512,) mean=-0.025220525743551322
Batch Loss = 0.012849941830539788
Epoch 78 :: Batch 23/27
eC.__call__, rho shape: (13096, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.02661183121517876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02661183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaaefccc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c18b2e0; to 'JaxprTracer' at 0x7ffd5c188c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25dbdeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13096,) mean=-0.024735613653363474
Batch Loss = 0.008538950838807895
Epoch 78 :: Batch 24/27
eC.__call__, rho shape: (12384, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.026988412720846754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02698841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77ba90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c12f380; to 'JaxprTracer' at 0x7ffd5c12d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x649d22f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(12384,) mean=-0.02380836668104246
Batch Loss = 0.011764928728834077
Epoch 78 :: Batch 25/27
eC.__call__, rho shape: (13936, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.024023593819638547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02402359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca980>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb935ee610; to 'JaxprTracer' at 0x7ffb935ef6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f6c83b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(13936,) mean=-0.024344366305461575
Batch Loss = 0.005207630496933113
Epoch 78 :: Batch 26/27
eC.__call__, rho shape: (9656, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.021710170557283224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02171017, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd7457e900>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbba78de40; to 'JaxprTracer' at 0x7ffbba78f150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75125df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(9656,) mean=-0.022160471752565886
Batch Loss = 0.006376905728697027
Epoch 78 :: Batch 27/27
eC.__call__, rho shape: (15256, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.023648797887932265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0236488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbaa94bf90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd5c186250; to 'JaxprTracer' at 0x7ffd5c186390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bafdd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(15256,) mean=-0.024441582530723757
Batch Loss = 0.007353157687831934
78, epoch_train_loss=0.24754028254643543
Epoch 79
Epoch 79 :: Batch 1/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.020362331401159214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02036233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbd77a400>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c320c70; to 'JaxprTracer' at 0x7ffd3c323740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b1955d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.021597463332822614
Batch Loss = 0.012707550710362146
Epoch 79 :: Batch 2/27
eC.__call__, rho shape: (5016, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.020291159060799393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02029116, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb92aff260>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb93041710; to 'JaxprTracer' at 0x7ffb93043470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24e55050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5016,) mean=-0.018771968176869457
Batch Loss = 0.010027444459016153
Epoch 79 :: Batch 3/27
eC.__call__, rho shape: (2440, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.010733884407421691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01073388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c2ca2d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbbdc8fba0; to 'JaxprTracer' at 0x7ffbbdc8fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a4cb720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(2440,) mean=-0.008466749468441406
Batch Loss = 0.0031756673588116276
Epoch 79 :: Batch 4/27
eC.__call__, rho shape: (4592, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.01049229089479988, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01049229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbbc654840>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb9e8dee0; to 'JaxprTracer' at 0x7ffbb9e8d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d404a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(4592,) mean=-0.013480201438505906
Batch Loss = 0.007177707792173097
Epoch 79 :: Batch 5/27
eC.__call__, rho shape: (5040, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.018920835281588666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01892084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc30f590>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbe207a570; to 'JaxprTracer' at 0x7ffbe2078090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e47460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(5040,) mean=-0.019180729272373867
Batch Loss = 0.009497804090706264
Epoch 79 :: Batch 6/27
eC.__call__, rho shape: (6152, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.024646292603266454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02464629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc6c506780>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbab808180; to 'JaxprTracer' at 0x7ffbab80ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47dcca80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6152,) mean=-0.023533988888991015
Batch Loss = 0.014164333630229143
Epoch 79 :: Batch 7/27
eC.__call__, rho shape: (6088, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.023117081354814016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02311708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67e840>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffe2c4e9710; to 'JaxprTracer' at 0x7ffe2c4ea8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x832cf030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6088,) mean=-0.02091779732345896
Batch Loss = 0.01238326155513796
Epoch 79 :: Batch 8/27
eC.__call__, rho shape: (6320, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023050315459933215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02305032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffdbc67f5a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd3c7cd760; to 'JaxprTracer' at 0x7ffd3c7cc950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x515865a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
Ref stats: shape=(6320,) mean=-0.02238376675364885
Batch Loss = 0.012833318778980722
Epoch 79 :: Batch 9/27
eC.__call__, rho shape: (4776, 16)
eC.__call__, rho nans: 0
Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
slurmstepd: error: *** JOB 613603 ON dn016 CANCELLED AT 2024-07-16T09:31:17 ***

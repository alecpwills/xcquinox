--- /home/awills/anaconda3/envs/pyscfad/lib/python3.10/site-packages/pyscfad/dft/numint.py	2025-03-05 11:08:56.533283190 -0500
+++ numint.py	2025-03-05 11:13:58.139186107 -0500
@@ -119,9 +119,16 @@
             #aow = numpy.ndarray(ao.shape, order='F', buffer=aow)
             for idm in range(nset):
                 rho = make_rho(idm, ao, mask, 'LDA')
-                exc, vxc = ni.eval_xc(xc_code, rho, spin=0,
+                #XCQUINOX MODIFICATION
+                try:
+                    #First try using the custom eval_xc inputs, then resort to default for regular kernel
+                    exc, vxc = ni.eval_xc(xc_code, rho, ao, weight, coords, spin=0,
                                       relativity=relativity, deriv=1,
                                       verbose=verbose)[:2]
+                except:
+                    exc, vxc = ni.eval_xc(xc_code, rho, spin=0,
+                                       relativity=relativity, deriv=1,
+                                       verbose=verbose)[:2]
                 vrho = vxc[0]
                 den = rho * weight
                 nelec[idm] += stop_grad(den).sum()
@@ -138,9 +145,16 @@
             #aow = numpy.ndarray(ao[0].shape, order='F', buffer=aow)
             for idm in range(nset):
                 rho = make_rho(idm, ao, mask, 'GGA')
-                exc, vxc = ni.eval_xc(xc_code, rho, spin=0,
+                #XCQUINOX MODIFICATION
+                try:
+                    #First try using the custom eval_xc inputs, then resort to default for regular kernel
+                    exc, vxc = ni.eval_xc(xc_code, rho, ao, weight, coords, spin=0,
                                       relativity=relativity, deriv=1,
                                       verbose=verbose)[:2]
+                except:
+                    exc, vxc = ni.eval_xc(xc_code, rho, spin=0,
+                                       relativity=relativity, deriv=1,
+                                       verbose=verbose)[:2]
                 den = rho[0] * weight
                 nelec[idm] += stop_grad(den).sum()
                 excsum[idm] += np.dot(den, exc)
@@ -202,9 +216,16 @@
             #aow = numpy.ndarray(ao[0].shape, order='F', buffer=aow)
             for idm in range(nset):
                 rho = make_rho(idm, ao, mask, 'MGGA')
-                exc, vxc = ni.eval_xc(xc_code, rho, spin=0,
+                #XCQUINOX MODIFICATION
+                try:
+                    #First try using the custom eval_xc inputs, then resort to default for regular kernel
+                    exc, vxc = ni.eval_xc(xc_code, rho, ao, weight, coords, spin=0,
                                       relativity=relativity, deriv=1,
                                       verbose=verbose)[:2]
+                except:
+                    exc, vxc = ni.eval_xc(xc_code, rho, spin=0,
+                                       relativity=relativity, deriv=1,
+                                       verbose=verbose)[:2]
                 # pylint: disable=W0612
                 vrho, vsigma, vlapl, vtau = vxc[:4]
                 den = rho[0] * weight
